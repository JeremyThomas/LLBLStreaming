//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using SD.LLBLGen.Pro.ORMSupportClasses;
using SD.LLBLGen.Pro.QuerySpec.Adapter;

namespace AW.Dal.SqlServer
{
	/// <summary>Class which contains the static logic to execute retrieval stored procedures in the database.</summary>
	public static partial class RetrievalProcedures
	{

		/// <summary>Calls stored procedure 'uspGetEmployeeManagers'.<br/><br/></summary>
		/// <param name="employeeId">Input parameter. </param>
		/// <returns>Filled DataTable with resultset(s) of stored procedure</returns>
		public static DataTable UspGetEmployeeManagers(System.Int32 employeeId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return UspGetEmployeeManagers(employeeId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'uspGetEmployeeManagers'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="employeeId">Input parameter. </param>
		/// <returns>Filled DataTable with resultset(s) of stored procedure</returns>
		public static DataTable UspGetEmployeeManagers(System.Int32 employeeId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateUspGetEmployeeManagersCall(dataAccessProvider, employeeId))
			{
				DataTable toReturn = call.FillDataTable();
				return toReturn;
			}
		}

		/// <summary>Creates an IRetrievalQuery object for a call to the procedure 'uspGetEmployeeManagers'.</summary>
		/// <param name="employeeId">Input parameter of stored procedure</param>
		/// <returns>IRetrievalQuery object which is ready to use for datafetching</returns>
		public static IRetrievalQuery GetUspGetEmployeeManagersCallAsQuery(System.Int32 employeeId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return GetUspGetEmployeeManagersCallAsQuery(employeeId, dataAccessProvider);
			}
		}

		/// <summary>Creates an IRetrievalQuery object for a call to the procedure 'uspGetEmployeeManagers'.</summary>
		/// <param name="employeeId">Input parameter of stored procedure</param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>IRetrievalQuery object which is ready to use for datafetching</returns>
		public static IRetrievalQuery GetUspGetEmployeeManagersCallAsQuery(System.Int32 employeeId, IDataAccessCore dataAccessProvider)
		{
			return CreateUspGetEmployeeManagersCall(dataAccessProvider, employeeId).ToRetrievalQuery();
		}

		/// <summary>Calls stored procedure 'uspGetManagerEmployees'.<br/><br/></summary>
		/// <param name="managerId">Input parameter. </param>
		/// <returns>Filled DataTable with resultset(s) of stored procedure</returns>
		public static DataTable UspGetManagerEmployees(System.Int32 managerId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return UspGetManagerEmployees(managerId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'uspGetManagerEmployees'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="managerId">Input parameter. </param>
		/// <returns>Filled DataTable with resultset(s) of stored procedure</returns>
		public static DataTable UspGetManagerEmployees(System.Int32 managerId, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateUspGetManagerEmployeesCall(dataAccessProvider, managerId))
			{
				DataTable toReturn = call.FillDataTable();
				return toReturn;
			}
		}

		/// <summary>Creates an IRetrievalQuery object for a call to the procedure 'uspGetManagerEmployees'.</summary>
		/// <param name="managerId">Input parameter of stored procedure</param>
		/// <returns>IRetrievalQuery object which is ready to use for datafetching</returns>
		public static IRetrievalQuery GetUspGetManagerEmployeesCallAsQuery(System.Int32 managerId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return GetUspGetManagerEmployeesCallAsQuery(managerId, dataAccessProvider);
			}
		}

		/// <summary>Creates an IRetrievalQuery object for a call to the procedure 'uspGetManagerEmployees'.</summary>
		/// <param name="managerId">Input parameter of stored procedure</param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>IRetrievalQuery object which is ready to use for datafetching</returns>
		public static IRetrievalQuery GetUspGetManagerEmployeesCallAsQuery(System.Int32 managerId, IDataAccessCore dataAccessProvider)
		{
			return CreateUspGetManagerEmployeesCall(dataAccessProvider, managerId).ToRetrievalQuery();
		}

		/// <summary>Creates the call object for the call 'UspGetEmployeeManagers' to stored procedure 'uspGetEmployeeManagers'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="employeeId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateUspGetEmployeeManagersCall(IDataAccessCore dataAccessProvider, System.Int32 employeeId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[AdventureWorks].[dbo].[uspGetEmployeeManagers]", "UspGetEmployeeManagers")
							.AddParameter("@EmployeeID", "Int", 0, ParameterDirection.Input, true, 10, 0, employeeId);
		}

		/// <summary>Creates the call object for the call 'UspGetManagerEmployees' to stored procedure 'uspGetManagerEmployees'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="managerId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateUspGetManagerEmployeesCall(IDataAccessCore dataAccessProvider, System.Int32 managerId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[AdventureWorks].[dbo].[uspGetManagerEmployees]", "UspGetManagerEmployees")
							.AddParameter("@ManagerID", "Int", 0, ParameterDirection.Input, true, 10, 0, managerId);
		}


	}
}
