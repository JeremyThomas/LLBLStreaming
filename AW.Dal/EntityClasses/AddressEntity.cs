//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Address'.<br/><br/>MS_Description: Street address information for customers, employees, and vendors.<br/></summary>
	[Serializable]
	public partial class AddressEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<EmployeeAddressEntity> _employeeAddresses;
		private EntityCollection<VendorAddressEntity> _vendorAddresses;
		private EntityCollection<CustomerAddressEntity> _customerAddresses;
		private EntityCollection<SalesOrderHeaderEntity> _salesOrderHeaders;
		private EntityCollection<SalesOrderHeaderEntity> _salesOrderHeadersShipped;
		private EntityCollection<CustomerEntity> _customerCollectionViaCustomerAddress;
		private StateProvinceEntity _stateProvince;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static AddressEntityStaticMetaData _staticMetaData = new AddressEntityStaticMetaData();
		private static AddressRelations _relationsFactory = new AddressRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name StateProvince</summary>
			public static readonly string StateProvince = "StateProvince";
			/// <summary>Member name EmployeeAddresses</summary>
			public static readonly string EmployeeAddresses = "EmployeeAddresses";
			/// <summary>Member name VendorAddresses</summary>
			public static readonly string VendorAddresses = "VendorAddresses";
			/// <summary>Member name CustomerAddresses</summary>
			public static readonly string CustomerAddresses = "CustomerAddresses";
			/// <summary>Member name SalesOrderHeaders</summary>
			public static readonly string SalesOrderHeaders = "SalesOrderHeaders";
			/// <summary>Member name SalesOrderHeadersShipped</summary>
			public static readonly string SalesOrderHeadersShipped = "SalesOrderHeadersShipped";
			/// <summary>Member name CustomerCollectionViaCustomerAddress</summary>
			public static readonly string CustomerCollectionViaCustomerAddress = "CustomerCollectionViaCustomerAddress";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AddressEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public AddressEntityStaticMetaData()
			{
				SetEntityCoreInfo("AddressEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.AddressEntity, typeof(AddressEntity), typeof(AddressEntityFactory), false);
				AddNavigatorMetaData<AddressEntity, EntityCollection<EmployeeAddressEntity>>("EmployeeAddresses", a => a._employeeAddresses, (a, b) => a._employeeAddresses = b, a => a.EmployeeAddresses, () => new AddressRelations().EmployeeAddressEntityUsingAddressID, typeof(EmployeeAddressEntity), (int)AW.Dal.EntityType.EmployeeAddressEntity);
				AddNavigatorMetaData<AddressEntity, EntityCollection<VendorAddressEntity>>("VendorAddresses", a => a._vendorAddresses, (a, b) => a._vendorAddresses = b, a => a.VendorAddresses, () => new AddressRelations().VendorAddressEntityUsingAddressID, typeof(VendorAddressEntity), (int)AW.Dal.EntityType.VendorAddressEntity);
				AddNavigatorMetaData<AddressEntity, EntityCollection<CustomerAddressEntity>>("CustomerAddresses", a => a._customerAddresses, (a, b) => a._customerAddresses = b, a => a.CustomerAddresses, () => new AddressRelations().CustomerAddressEntityUsingAddressID, typeof(CustomerAddressEntity), (int)AW.Dal.EntityType.CustomerAddressEntity);
				AddNavigatorMetaData<AddressEntity, EntityCollection<SalesOrderHeaderEntity>>("SalesOrderHeaders", a => a._salesOrderHeaders, (a, b) => a._salesOrderHeaders = b, a => a.SalesOrderHeaders, () => new AddressRelations().SalesOrderHeaderEntityUsingBillToAddressID, typeof(SalesOrderHeaderEntity), (int)AW.Dal.EntityType.SalesOrderHeaderEntity);
				AddNavigatorMetaData<AddressEntity, EntityCollection<SalesOrderHeaderEntity>>("SalesOrderHeadersShipped", a => a._salesOrderHeadersShipped, (a, b) => a._salesOrderHeadersShipped = b, a => a.SalesOrderHeadersShipped, () => new AddressRelations().SalesOrderHeaderEntityUsingShipToAddressID, typeof(SalesOrderHeaderEntity), (int)AW.Dal.EntityType.SalesOrderHeaderEntity);
				AddNavigatorMetaData<AddressEntity, StateProvinceEntity>("StateProvince", "Addresses", (a, b) => a._stateProvince = b, a => a._stateProvince, (a, b) => a.StateProvince = b, AW.Dal.RelationClasses.StaticAddressRelations.StateProvinceEntityUsingStateProvinceIDStatic, ()=>new AddressRelations().StateProvinceEntityUsingStateProvinceID, null, new int[] { (int)AddressFieldIndex.StateProvinceID }, null, true, (int)AW.Dal.EntityType.StateProvinceEntity);
				AddNavigatorMetaData<AddressEntity, EntityCollection<CustomerEntity>>("CustomerCollectionViaCustomerAddress", a => a._customerCollectionViaCustomerAddress, (a, b) => a._customerCollectionViaCustomerAddress = b, a => a.CustomerCollectionViaCustomerAddress, () => new AddressRelations().CustomerAddressEntityUsingAddressID, () => new CustomerAddressRelations().CustomerEntityUsingCustomerID, "AddressEntity__", "CustomerAddress_", typeof(CustomerEntity), (int)AW.Dal.EntityType.CustomerEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AddressEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public AddressEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AddressEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AddressEntity</param>
		public AddressEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="addressID">PK value for Address which data should be fetched into this Address object</param>
		public AddressEntity(System.Int32 addressID) : this(addressID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="addressID">PK value for Address which data should be fetched into this Address object</param>
		/// <param name="validator">The custom validator object for this AddressEntity</param>
		public AddressEntity(System.Int32 addressID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.AddressID = addressID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AddressEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'EmployeeAddress' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmployeeAddresses() { return CreateRelationInfoForNavigator("EmployeeAddresses"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'VendorAddress' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoVendorAddresses() { return CreateRelationInfoForNavigator("VendorAddresses"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CustomerAddress' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerAddresses() { return CreateRelationInfoForNavigator("CustomerAddresses"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SalesOrderHeader' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesOrderHeaders() { return CreateRelationInfoForNavigator("SalesOrderHeaders"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SalesOrderHeader' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesOrderHeadersShipped() { return CreateRelationInfoForNavigator("SalesOrderHeadersShipped"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Customer' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerCollectionViaCustomerAddress() { return CreateRelationInfoForNavigator("CustomerCollectionViaCustomerAddress"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'StateProvince' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStateProvince() { return CreateRelationInfoForNavigator("StateProvince"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Street address information for customers, employees, and vendors.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("AddressID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"First street address line.");
			_fieldsCustomProperties.Add("AddressLine1", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Nonclustered index.");
			_fieldsCustomProperties.Add("AddressLine2", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Name of the city.");
			_fieldsCustomProperties.Add("City", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Postal code for the street address.");
			_fieldsCustomProperties.Add("PostalCode", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");
			_fieldsCustomProperties.Add("Rowguid", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Unique identification number for the state or province. Foreign key to StateProvince table.");
			_fieldsCustomProperties.Add("StateProvinceID", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AddressEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static AddressRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EmployeeAddress' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmployeeAddresses { get { return _staticMetaData.GetPrefetchPathElement("EmployeeAddresses", CommonEntityBase.CreateEntityCollection<EmployeeAddressEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'VendorAddress' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathVendorAddresses { get { return _staticMetaData.GetPrefetchPathElement("VendorAddresses", CommonEntityBase.CreateEntityCollection<VendorAddressEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerAddress' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerAddresses { get { return _staticMetaData.GetPrefetchPathElement("CustomerAddresses", CommonEntityBase.CreateEntityCollection<CustomerAddressEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesOrderHeader' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesOrderHeaders { get { return _staticMetaData.GetPrefetchPathElement("SalesOrderHeaders", CommonEntityBase.CreateEntityCollection<SalesOrderHeaderEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesOrderHeader' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesOrderHeadersShipped { get { return _staticMetaData.GetPrefetchPathElement("SalesOrderHeadersShipped", CommonEntityBase.CreateEntityCollection<SalesOrderHeaderEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Customer' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerCollectionViaCustomerAddress { get { return _staticMetaData.GetPrefetchPathElement("CustomerCollectionViaCustomerAddress", CommonEntityBase.CreateEntityCollection<CustomerEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'StateProvince' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStateProvince { get { return _staticMetaData.GetPrefetchPathElement("StateProvince", CommonEntityBase.CreateEntityCollection<StateProvinceEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The AddressID property of the Entity Address<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "Address"."AddressID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 AddressID
		{
			get { return (System.Int32)GetValue((int)AddressFieldIndex.AddressID, true); }
			set { SetValue((int)AddressFieldIndex.AddressID, value); }		}

		/// <summary>The AddressLine1 property of the Entity Address<br/><br/>MS_Description: First street address line.<br/>First street address line.</summary>
		/// <remarks>Mapped on  table field: "Address"."AddressLine1".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 60.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String AddressLine1
		{
			get { return (System.String)GetValue((int)AddressFieldIndex.AddressLine1, true); }
			set	{ SetValue((int)AddressFieldIndex.AddressLine1, value); }
		}

		/// <summary>The AddressLine2 property of the Entity Address<br/><br/>MS_Description: Nonclustered index.<br/>Nonclustered index.</summary>
		/// <remarks>Mapped on  table field: "Address"."AddressLine2".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 60.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AddressLine2
		{
			get { return (System.String)GetValue((int)AddressFieldIndex.AddressLine2, true); }
			set	{ SetValue((int)AddressFieldIndex.AddressLine2, value); }
		}

		/// <summary>The City property of the Entity Address<br/><br/>MS_Description: Name of the city.<br/>Name of the city.</summary>
		/// <remarks>Mapped on  table field: "Address"."City".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 30.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String City
		{
			get { return (System.String)GetValue((int)AddressFieldIndex.City, true); }
			set	{ SetValue((int)AddressFieldIndex.City, value); }
		}

		/// <summary>The ModifiedDate property of the Entity Address<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "Address"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)AddressFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)AddressFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The PostalCode property of the Entity Address<br/><br/>MS_Description: Postal code for the street address.<br/>Postal code for the street address.</summary>
		/// <remarks>Mapped on  table field: "Address"."PostalCode".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String PostalCode
		{
			get { return (System.String)GetValue((int)AddressFieldIndex.PostalCode, true); }
			set	{ SetValue((int)AddressFieldIndex.PostalCode, value); }
		}

		/// <summary>The Rowguid property of the Entity Address<br/><br/>MS_Description: ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.<br/>ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</summary>
		/// <remarks>Mapped on  table field: "Address"."rowguid".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid Rowguid
		{
			get { return (System.Guid)GetValue((int)AddressFieldIndex.Rowguid, true); }
			set	{ SetValue((int)AddressFieldIndex.Rowguid, value); }
		}

		/// <summary>The StateProvinceID property of the Entity Address<br/><br/>MS_Description: Unique identification number for the state or province. Foreign key to StateProvince table.<br/>Unique identification number for the state or province. Foreign key to StateProvince table.</summary>
		/// <remarks>Mapped on  table field: "Address"."StateProvinceID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 StateProvinceID
		{
			get { return (System.Int32)GetValue((int)AddressFieldIndex.StateProvinceID, true); }
			set	{ SetValue((int)AddressFieldIndex.StateProvinceID, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'EmployeeAddressEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EmployeeAddressEntity))]
		public virtual EntityCollection<EmployeeAddressEntity> EmployeeAddresses { get { return GetOrCreateEntityCollection<EmployeeAddressEntity, EmployeeAddressEntityFactory>("Address", true, false, ref _employeeAddresses); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'VendorAddressEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(VendorAddressEntity))]
		public virtual EntityCollection<VendorAddressEntity> VendorAddresses { get { return GetOrCreateEntityCollection<VendorAddressEntity, VendorAddressEntityFactory>("Address", true, false, ref _vendorAddresses); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CustomerAddressEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CustomerAddressEntity))]
		public virtual EntityCollection<CustomerAddressEntity> CustomerAddresses { get { return GetOrCreateEntityCollection<CustomerAddressEntity, CustomerAddressEntityFactory>("Address", true, false, ref _customerAddresses); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SalesOrderHeaderEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SalesOrderHeaderEntity))]
		public virtual EntityCollection<SalesOrderHeaderEntity> SalesOrderHeaders { get { return GetOrCreateEntityCollection<SalesOrderHeaderEntity, SalesOrderHeaderEntityFactory>("BillingAddress", true, false, ref _salesOrderHeaders); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SalesOrderHeaderEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SalesOrderHeaderEntity))]
		public virtual EntityCollection<SalesOrderHeaderEntity> SalesOrderHeadersShipped { get { return GetOrCreateEntityCollection<SalesOrderHeaderEntity, SalesOrderHeaderEntityFactory>("ShippingAddress", true, false, ref _salesOrderHeadersShipped); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CustomerEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CustomerEntity))]
		public virtual EntityCollection<CustomerEntity> CustomerCollectionViaCustomerAddress { get { return GetOrCreateEntityCollection<CustomerEntity, CustomerEntityFactory>("AddressCollectionViaCustomerAddress", false, true, ref _customerCollectionViaCustomerAddress); } }

		/// <summary>Gets / sets related entity of type 'StateProvinceEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual StateProvinceEntity StateProvince
		{
			get { return _stateProvince; }
			set { SetSingleRelatedEntityNavigator(value, "StateProvince"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum AddressFieldIndex
	{
		///<summary>AddressID. </summary>
		AddressID,
		///<summary>AddressLine1. </summary>
		AddressLine1,
		///<summary>AddressLine2. </summary>
		AddressLine2,
		///<summary>City. </summary>
		City,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>PostalCode. </summary>
		PostalCode,
		///<summary>Rowguid. </summary>
		Rowguid,
		///<summary>StateProvinceID. </summary>
		StateProvinceID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Address. </summary>
	public partial class AddressRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between AddressEntity and EmployeeAddressEntity over the 1:n relation they have, using the relation between the fields: Address.AddressID - EmployeeAddress.AddressID</summary>
		public virtual IEntityRelation EmployeeAddressEntityUsingAddressID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EmployeeAddresses", true, new[] { AddressFields.AddressID, EmployeeAddressFields.AddressID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AddressEntity and VendorAddressEntity over the 1:n relation they have, using the relation between the fields: Address.AddressID - VendorAddress.AddressID</summary>
		public virtual IEntityRelation VendorAddressEntityUsingAddressID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "VendorAddresses", true, new[] { AddressFields.AddressID, VendorAddressFields.AddressID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AddressEntity and CustomerAddressEntity over the 1:n relation they have, using the relation between the fields: Address.AddressID - CustomerAddress.AddressID</summary>
		public virtual IEntityRelation CustomerAddressEntityUsingAddressID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CustomerAddresses", true, new[] { AddressFields.AddressID, CustomerAddressFields.AddressID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AddressEntity and SalesOrderHeaderEntity over the 1:n relation they have, using the relation between the fields: Address.AddressID - SalesOrderHeader.BillToAddressID</summary>
		public virtual IEntityRelation SalesOrderHeaderEntityUsingBillToAddressID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesOrderHeaders", true, new[] { AddressFields.AddressID, SalesOrderHeaderFields.BillToAddressID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AddressEntity and SalesOrderHeaderEntity over the 1:n relation they have, using the relation between the fields: Address.AddressID - SalesOrderHeader.ShipToAddressID</summary>
		public virtual IEntityRelation SalesOrderHeaderEntityUsingShipToAddressID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesOrderHeadersShipped", true, new[] { AddressFields.AddressID, SalesOrderHeaderFields.ShipToAddressID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AddressEntity and StateProvinceEntity over the m:1 relation they have, using the relation between the fields: Address.StateProvinceID - StateProvince.StateProvinceID</summary>
		public virtual IEntityRelation StateProvinceEntityUsingStateProvinceID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "StateProvince", false, new[] { StateProvinceFields.StateProvinceID, AddressFields.StateProvinceID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAddressRelations
	{
		internal static readonly IEntityRelation EmployeeAddressEntityUsingAddressIDStatic = new AddressRelations().EmployeeAddressEntityUsingAddressID;
		internal static readonly IEntityRelation VendorAddressEntityUsingAddressIDStatic = new AddressRelations().VendorAddressEntityUsingAddressID;
		internal static readonly IEntityRelation CustomerAddressEntityUsingAddressIDStatic = new AddressRelations().CustomerAddressEntityUsingAddressID;
		internal static readonly IEntityRelation SalesOrderHeaderEntityUsingBillToAddressIDStatic = new AddressRelations().SalesOrderHeaderEntityUsingBillToAddressID;
		internal static readonly IEntityRelation SalesOrderHeaderEntityUsingShipToAddressIDStatic = new AddressRelations().SalesOrderHeaderEntityUsingShipToAddressID;
		internal static readonly IEntityRelation StateProvinceEntityUsingStateProvinceIDStatic = new AddressRelations().StateProvinceEntityUsingStateProvinceID;

		/// <summary>CTor</summary>
		static StaticAddressRelations() { }
	}
}
