//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Contact'.<br/><br/>MS_Description: Primary XML index.<br/></summary>
	[Serializable]
	public partial class ContactEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<EmployeeEntity> _employees;
		private EntityCollection<VendorContactEntity> _vendorContacts;
		private EntityCollection<ContactCreditCardEntity> _contactCreditCards;
		private EntityCollection<IndividualEntity> _individuals;
		private EntityCollection<SalesOrderHeaderEntity> _salesOrderHeaders;
		private EntityCollection<StoreContactEntity> _storeContacts;
		private EntityCollection<CreditCardEntity> _creditCards;
		private EntityCollection<StoreEntity> _stores;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static ContactEntityStaticMetaData _staticMetaData = new ContactEntityStaticMetaData();
		private static ContactRelations _relationsFactory = new ContactRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Employees</summary>
			public static readonly string Employees = "Employees";
			/// <summary>Member name VendorContacts</summary>
			public static readonly string VendorContacts = "VendorContacts";
			/// <summary>Member name ContactCreditCards</summary>
			public static readonly string ContactCreditCards = "ContactCreditCards";
			/// <summary>Member name Individuals</summary>
			public static readonly string Individuals = "Individuals";
			/// <summary>Member name SalesOrderHeaders</summary>
			public static readonly string SalesOrderHeaders = "SalesOrderHeaders";
			/// <summary>Member name StoreContacts</summary>
			public static readonly string StoreContacts = "StoreContacts";
			/// <summary>Member name CreditCards</summary>
			public static readonly string CreditCards = "CreditCards";
			/// <summary>Member name Stores</summary>
			public static readonly string Stores = "Stores";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class ContactEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public ContactEntityStaticMetaData()
			{
				SetEntityCoreInfo("ContactEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.ContactEntity, typeof(ContactEntity), typeof(ContactEntityFactory), false);
				AddNavigatorMetaData<ContactEntity, EntityCollection<EmployeeEntity>>("Employees", a => a._employees, (a, b) => a._employees = b, a => a.Employees, () => new ContactRelations().EmployeeEntityUsingContactID, typeof(EmployeeEntity), (int)AW.Dal.EntityType.EmployeeEntity);
				AddNavigatorMetaData<ContactEntity, EntityCollection<VendorContactEntity>>("VendorContacts", a => a._vendorContacts, (a, b) => a._vendorContacts = b, a => a.VendorContacts, () => new ContactRelations().VendorContactEntityUsingContactID, typeof(VendorContactEntity), (int)AW.Dal.EntityType.VendorContactEntity);
				AddNavigatorMetaData<ContactEntity, EntityCollection<ContactCreditCardEntity>>("ContactCreditCards", a => a._contactCreditCards, (a, b) => a._contactCreditCards = b, a => a.ContactCreditCards, () => new ContactRelations().ContactCreditCardEntityUsingContactID, typeof(ContactCreditCardEntity), (int)AW.Dal.EntityType.ContactCreditCardEntity);
				AddNavigatorMetaData<ContactEntity, EntityCollection<IndividualEntity>>("Individuals", a => a._individuals, (a, b) => a._individuals = b, a => a.Individuals, () => new ContactRelations().IndividualEntityUsingContactID, typeof(IndividualEntity), (int)AW.Dal.EntityType.IndividualEntity);
				AddNavigatorMetaData<ContactEntity, EntityCollection<SalesOrderHeaderEntity>>("SalesOrderHeaders", a => a._salesOrderHeaders, (a, b) => a._salesOrderHeaders = b, a => a.SalesOrderHeaders, () => new ContactRelations().SalesOrderHeaderEntityUsingContactID, typeof(SalesOrderHeaderEntity), (int)AW.Dal.EntityType.SalesOrderHeaderEntity);
				AddNavigatorMetaData<ContactEntity, EntityCollection<StoreContactEntity>>("StoreContacts", a => a._storeContacts, (a, b) => a._storeContacts = b, a => a.StoreContacts, () => new ContactRelations().StoreContactEntityUsingContactID, typeof(StoreContactEntity), (int)AW.Dal.EntityType.StoreContactEntity);
				AddNavigatorMetaData<ContactEntity, EntityCollection<CreditCardEntity>>("CreditCards", a => a._creditCards, (a, b) => a._creditCards = b, a => a.CreditCards, () => new ContactRelations().ContactCreditCardEntityUsingContactID, () => new ContactCreditCardRelations().CreditCardEntityUsingCreditCardID, "ContactEntity__", "ContactCreditCard_", typeof(CreditCardEntity), (int)AW.Dal.EntityType.CreditCardEntity);
				AddNavigatorMetaData<ContactEntity, EntityCollection<StoreEntity>>("Stores", a => a._stores, (a, b) => a._stores = b, a => a.Stores, () => new ContactRelations().StoreContactEntityUsingContactID, () => new StoreContactRelations().StoreEntityUsingCustomerID, "ContactEntity__", "StoreContact_", typeof(StoreEntity), (int)AW.Dal.EntityType.StoreEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static ContactEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public ContactEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public ContactEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this ContactEntity</param>
		public ContactEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="contactID">PK value for Contact which data should be fetched into this Contact object</param>
		public ContactEntity(System.Int32 contactID) : this(contactID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="contactID">PK value for Contact which data should be fetched into this Contact object</param>
		/// <param name="validator">The custom validator object for this ContactEntity</param>
		public ContactEntity(System.Int32 contactID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ContactID = contactID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected ContactEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Employee' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmployees() { return CreateRelationInfoForNavigator("Employees"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'VendorContact' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoVendorContacts() { return CreateRelationInfoForNavigator("VendorContacts"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ContactCreditCard' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoContactCreditCards() { return CreateRelationInfoForNavigator("ContactCreditCards"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Individual' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoIndividuals() { return CreateRelationInfoForNavigator("Individuals"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SalesOrderHeader' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesOrderHeaders() { return CreateRelationInfoForNavigator("SalesOrderHeaders"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'StoreContact' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStoreContacts() { return CreateRelationInfoForNavigator("StoreContacts"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'CreditCard' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCreditCards() { return CreateRelationInfoForNavigator("CreditCards"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Store' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStores() { return CreateRelationInfoForNavigator("Stores"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Primary XML index.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Additional contact information about the person stored in xml format. ");
			_fieldsCustomProperties.Add("AdditionalContactInfo", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Primary key for Contact records.");
			_fieldsCustomProperties.Add("ContactID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"E-mail address for the person.");
			_fieldsCustomProperties.Add("EmailAddress", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. ");
			_fieldsCustomProperties.Add("EmailPromotion", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"First name of the person.");
			_fieldsCustomProperties.Add("FirstName", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Last name of the person.");
			_fieldsCustomProperties.Add("LastName", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Middle name or middle initial of the person.");
			_fieldsCustomProperties.Add("MiddleName", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Unique nonclustered index. Used to support replication samples.");
			_fieldsCustomProperties.Add("NameStyle", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Password for the e-mail account.");
			_fieldsCustomProperties.Add("PasswordHash", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Random value concatenated with the password string before the password is hashed.");
			_fieldsCustomProperties.Add("PasswordSalt", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Phone number associated with the person.");
			_fieldsCustomProperties.Add("Phone", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");
			_fieldsCustomProperties.Add("Rowguid", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Surname suffix. For example, Sr. or Jr.");
			_fieldsCustomProperties.Add("Suffix", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"A courtesy title. For example, Mr. or Ms.");
			_fieldsCustomProperties.Add("Title", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this ContactEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static ContactRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Employee' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmployees { get { return _staticMetaData.GetPrefetchPathElement("Employees", CommonEntityBase.CreateEntityCollection<EmployeeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'VendorContact' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathVendorContacts { get { return _staticMetaData.GetPrefetchPathElement("VendorContacts", CommonEntityBase.CreateEntityCollection<VendorContactEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ContactCreditCard' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathContactCreditCards { get { return _staticMetaData.GetPrefetchPathElement("ContactCreditCards", CommonEntityBase.CreateEntityCollection<ContactCreditCardEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Individual' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathIndividuals { get { return _staticMetaData.GetPrefetchPathElement("Individuals", CommonEntityBase.CreateEntityCollection<IndividualEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesOrderHeader' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesOrderHeaders { get { return _staticMetaData.GetPrefetchPathElement("SalesOrderHeaders", CommonEntityBase.CreateEntityCollection<SalesOrderHeaderEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'StoreContact' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStoreContacts { get { return _staticMetaData.GetPrefetchPathElement("StoreContacts", CommonEntityBase.CreateEntityCollection<StoreContactEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CreditCard' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCreditCards { get { return _staticMetaData.GetPrefetchPathElement("CreditCards", CommonEntityBase.CreateEntityCollection<CreditCardEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Store' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStores { get { return _staticMetaData.GetPrefetchPathElement("Stores", CommonEntityBase.CreateEntityCollection<StoreEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The AdditionalContactInfo property of the Entity Contact<br/><br/>MS_Description: Additional contact information about the person stored in xml format. <br/>Additional contact information about the person stored in xml format. </summary>
		/// <remarks>Mapped on  table field: "Contact"."AdditionalContactInfo".<br/>Table field type characteristics (type, precision, scale, length): Xml, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AdditionalContactInfo
		{
			get { return (System.String)GetValue((int)ContactFieldIndex.AdditionalContactInfo, true); }
			set	{ SetValue((int)ContactFieldIndex.AdditionalContactInfo, value); }
		}

		/// <summary>The ContactID property of the Entity Contact<br/><br/>MS_Description: Primary key for Contact records.<br/>Primary key for Contact records.</summary>
		/// <remarks>Mapped on  table field: "Contact"."ContactID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ContactID
		{
			get { return (System.Int32)GetValue((int)ContactFieldIndex.ContactID, true); }
			set { SetValue((int)ContactFieldIndex.ContactID, value); }		}

		/// <summary>The EmailAddress property of the Entity Contact<br/><br/>MS_Description: E-mail address for the person.<br/>E-mail address for the person.</summary>
		/// <remarks>Mapped on  table field: "Contact"."EmailAddress".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		[DataType(DataType.EmailAddress)]
		public virtual System.String EmailAddress
		{
			get { return (System.String)GetValue((int)ContactFieldIndex.EmailAddress, true); }
			set	{ SetValue((int)ContactFieldIndex.EmailAddress, value); }
		}

		/// <summary>The EmailPromotion property of the Entity Contact<br/><br/>MS_Description: 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. <br/>0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. </summary>
		/// <remarks>Mapped on  table field: "Contact"."EmailPromotion".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual AW.Data.EmailPromotion EmailPromotion
		{
			get { return (AW.Data.EmailPromotion)GetValue((int)ContactFieldIndex.EmailPromotion, true); }
			set	{ SetValue((int)ContactFieldIndex.EmailPromotion, value); }
		}

		/// <summary>The FirstName property of the Entity Contact<br/><br/>MS_Description: First name of the person.<br/>First name of the person.</summary>
		/// <remarks>Mapped on  table field: "Contact"."FirstName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String FirstName
		{
			get { return (System.String)GetValue((int)ContactFieldIndex.FirstName, true); }
			set	{ SetValue((int)ContactFieldIndex.FirstName, value); }
		}

		/// <summary>The LastName property of the Entity Contact<br/><br/>MS_Description: Last name of the person.<br/>Last name of the person.</summary>
		/// <remarks>Mapped on  table field: "Contact"."LastName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String LastName
		{
			get { return (System.String)GetValue((int)ContactFieldIndex.LastName, true); }
			set	{ SetValue((int)ContactFieldIndex.LastName, value); }
		}

		/// <summary>The MiddleName property of the Entity Contact<br/><br/>MS_Description: Middle name or middle initial of the person.<br/>Middle name or middle initial of the person.</summary>
		/// <remarks>Mapped on  table field: "Contact"."MiddleName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String MiddleName
		{
			get { return (System.String)GetValue((int)ContactFieldIndex.MiddleName, true); }
			set	{ SetValue((int)ContactFieldIndex.MiddleName, value); }
		}

		/// <summary>The ModifiedDate property of the Entity Contact<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "Contact"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)ContactFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)ContactFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The NameStyle property of the Entity Contact<br/><br/>MS_Description: Unique nonclustered index. Used to support replication samples.<br/>Unique nonclustered index. Used to support replication samples.</summary>
		/// <remarks>Mapped on  table field: "Contact"."NameStyle".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean NameStyle
		{
			get { return (System.Boolean)GetValue((int)ContactFieldIndex.NameStyle, true); }
			set	{ SetValue((int)ContactFieldIndex.NameStyle, value); }
		}

		/// <summary>The PasswordHash property of the Entity Contact<br/><br/>MS_Description: Password for the e-mail account.<br/>Password for the e-mail account.</summary>
		/// <remarks>Mapped on  table field: "Contact"."PasswordHash".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 128.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String PasswordHash
		{
			get { return (System.String)GetValue((int)ContactFieldIndex.PasswordHash, true); }
			set	{ SetValue((int)ContactFieldIndex.PasswordHash, value); }
		}

		/// <summary>The PasswordSalt property of the Entity Contact<br/><br/>MS_Description: Random value concatenated with the password string before the password is hashed.<br/>Random value concatenated with the password string before the password is hashed.</summary>
		/// <remarks>Mapped on  table field: "Contact"."PasswordSalt".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String PasswordSalt
		{
			get { return (System.String)GetValue((int)ContactFieldIndex.PasswordSalt, true); }
			set	{ SetValue((int)ContactFieldIndex.PasswordSalt, value); }
		}

		/// <summary>The Phone property of the Entity Contact<br/><br/>MS_Description: Phone number associated with the person.<br/>Phone number associated with the person.</summary>
		/// <remarks>Mapped on  table field: "Contact"."Phone".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 25.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Phone
		{
			get { return (System.String)GetValue((int)ContactFieldIndex.Phone, true); }
			set	{ SetValue((int)ContactFieldIndex.Phone, value); }
		}

		/// <summary>The Rowguid property of the Entity Contact<br/><br/>MS_Description: ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.<br/>ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</summary>
		/// <remarks>Mapped on  table field: "Contact"."rowguid".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid Rowguid
		{
			get { return (System.Guid)GetValue((int)ContactFieldIndex.Rowguid, true); }
			set	{ SetValue((int)ContactFieldIndex.Rowguid, value); }
		}

		/// <summary>The Suffix property of the Entity Contact<br/><br/>MS_Description: Surname suffix. For example, Sr. or Jr.<br/>Surname suffix. For example, Sr. or Jr.</summary>
		/// <remarks>Mapped on  table field: "Contact"."Suffix".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Suffix
		{
			get { return (System.String)GetValue((int)ContactFieldIndex.Suffix, true); }
			set	{ SetValue((int)ContactFieldIndex.Suffix, value); }
		}

		/// <summary>The Title property of the Entity Contact<br/><br/>MS_Description: A courtesy title. For example, Mr. or Ms.<br/>A courtesy title. For example, Mr. or Ms.</summary>
		/// <remarks>Mapped on  table field: "Contact"."Title".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 8.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Title
		{
			get { return (System.String)GetValue((int)ContactFieldIndex.Title, true); }
			set	{ SetValue((int)ContactFieldIndex.Title, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'EmployeeEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EmployeeEntity))]
		public virtual EntityCollection<EmployeeEntity> Employees { get { return GetOrCreateEntityCollection<EmployeeEntity, EmployeeEntityFactory>("Contact", true, false, ref _employees); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'VendorContactEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(VendorContactEntity))]
		public virtual EntityCollection<VendorContactEntity> VendorContacts { get { return GetOrCreateEntityCollection<VendorContactEntity, VendorContactEntityFactory>("Contact", true, false, ref _vendorContacts); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ContactCreditCardEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ContactCreditCardEntity))]
		public virtual EntityCollection<ContactCreditCardEntity> ContactCreditCards { get { return GetOrCreateEntityCollection<ContactCreditCardEntity, ContactCreditCardEntityFactory>("Contact", true, false, ref _contactCreditCards); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'IndividualEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(IndividualEntity))]
		public virtual EntityCollection<IndividualEntity> Individuals { get { return GetOrCreateEntityCollection<IndividualEntity, IndividualEntityFactory>("Contact", true, false, ref _individuals); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SalesOrderHeaderEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SalesOrderHeaderEntity))]
		public virtual EntityCollection<SalesOrderHeaderEntity> SalesOrderHeaders { get { return GetOrCreateEntityCollection<SalesOrderHeaderEntity, SalesOrderHeaderEntityFactory>("Contact", true, false, ref _salesOrderHeaders); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'StoreContactEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(StoreContactEntity))]
		public virtual EntityCollection<StoreContactEntity> StoreContacts { get { return GetOrCreateEntityCollection<StoreContactEntity, StoreContactEntityFactory>("Contact", true, false, ref _storeContacts); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CreditCardEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CreditCardEntity))]
		public virtual EntityCollection<CreditCardEntity> CreditCards { get { return GetOrCreateEntityCollection<CreditCardEntity, CreditCardEntityFactory>("ContactCollectionViaContactCreditCard", false, true, ref _creditCards); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'StoreEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(StoreEntity))]
		public virtual EntityCollection<StoreEntity> Stores { get { return GetOrCreateEntityCollection<StoreEntity, StoreEntityFactory>("Contacts", false, true, ref _stores); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum ContactFieldIndex
	{
		///<summary>AdditionalContactInfo. </summary>
		AdditionalContactInfo,
		///<summary>ContactID. </summary>
		ContactID,
		///<summary>EmailAddress. </summary>
		EmailAddress,
		///<summary>EmailPromotion. </summary>
		EmailPromotion,
		///<summary>FirstName. </summary>
		FirstName,
		///<summary>LastName. </summary>
		LastName,
		///<summary>MiddleName. </summary>
		MiddleName,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>NameStyle. </summary>
		NameStyle,
		///<summary>PasswordHash. </summary>
		PasswordHash,
		///<summary>PasswordSalt. </summary>
		PasswordSalt,
		///<summary>Phone. </summary>
		Phone,
		///<summary>Rowguid. </summary>
		Rowguid,
		///<summary>Suffix. </summary>
		Suffix,
		///<summary>Title. </summary>
		Title,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Contact. </summary>
	public partial class ContactRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between ContactEntity and EmployeeEntity over the 1:n relation they have, using the relation between the fields: Contact.ContactID - Employee.ContactID</summary>
		public virtual IEntityRelation EmployeeEntityUsingContactID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Employees", true, new[] { ContactFields.ContactID, EmployeeFields.ContactID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between ContactEntity and VendorContactEntity over the 1:n relation they have, using the relation between the fields: Contact.ContactID - VendorContact.ContactID</summary>
		public virtual IEntityRelation VendorContactEntityUsingContactID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "VendorContacts", true, new[] { ContactFields.ContactID, VendorContactFields.ContactID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between ContactEntity and ContactCreditCardEntity over the 1:n relation they have, using the relation between the fields: Contact.ContactID - ContactCreditCard.ContactID</summary>
		public virtual IEntityRelation ContactCreditCardEntityUsingContactID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ContactCreditCards", true, new[] { ContactFields.ContactID, ContactCreditCardFields.ContactID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between ContactEntity and IndividualEntity over the 1:n relation they have, using the relation between the fields: Contact.ContactID - Individual.ContactID</summary>
		public virtual IEntityRelation IndividualEntityUsingContactID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Individuals", true, new[] { ContactFields.ContactID, IndividualFields.ContactID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between ContactEntity and SalesOrderHeaderEntity over the 1:n relation they have, using the relation between the fields: Contact.ContactID - SalesOrderHeader.ContactID</summary>
		public virtual IEntityRelation SalesOrderHeaderEntityUsingContactID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesOrderHeaders", true, new[] { ContactFields.ContactID, SalesOrderHeaderFields.ContactID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between ContactEntity and StoreContactEntity over the 1:n relation they have, using the relation between the fields: Contact.ContactID - StoreContact.ContactID</summary>
		public virtual IEntityRelation StoreContactEntityUsingContactID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "StoreContacts", true, new[] { ContactFields.ContactID, StoreContactFields.ContactID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticContactRelations
	{
		internal static readonly IEntityRelation EmployeeEntityUsingContactIDStatic = new ContactRelations().EmployeeEntityUsingContactID;
		internal static readonly IEntityRelation VendorContactEntityUsingContactIDStatic = new ContactRelations().VendorContactEntityUsingContactID;
		internal static readonly IEntityRelation ContactCreditCardEntityUsingContactIDStatic = new ContactRelations().ContactCreditCardEntityUsingContactID;
		internal static readonly IEntityRelation IndividualEntityUsingContactIDStatic = new ContactRelations().IndividualEntityUsingContactID;
		internal static readonly IEntityRelation SalesOrderHeaderEntityUsingContactIDStatic = new ContactRelations().SalesOrderHeaderEntityUsingContactID;
		internal static readonly IEntityRelation StoreContactEntityUsingContactIDStatic = new ContactRelations().StoreContactEntityUsingContactID;

		/// <summary>CTor</summary>
		static StaticContactRelations() { }
	}
}
