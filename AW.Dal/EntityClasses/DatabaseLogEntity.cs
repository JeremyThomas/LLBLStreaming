//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'DatabaseLog'.<br/><br/>MS_Description: Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.<br/></summary>
	[Serializable]
	public partial class DatabaseLogEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static DatabaseLogEntityStaticMetaData _staticMetaData = new DatabaseLogEntityStaticMetaData();
		private static DatabaseLogRelations _relationsFactory = new DatabaseLogRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class DatabaseLogEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public DatabaseLogEntityStaticMetaData()
			{
				SetEntityCoreInfo("DatabaseLogEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.DatabaseLogEntity, typeof(DatabaseLogEntity), typeof(DatabaseLogEntityFactory), false);
			}
		}

		/// <summary>Static ctor</summary>
		static DatabaseLogEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public DatabaseLogEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public DatabaseLogEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this DatabaseLogEntity</param>
		public DatabaseLogEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="databaseLogID">PK value for DatabaseLog which data should be fetched into this DatabaseLog object</param>
		public DatabaseLogEntity(System.Int32 databaseLogID) : this(databaseLogID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="databaseLogID">PK value for DatabaseLog which data should be fetched into this DatabaseLog object</param>
		/// <param name="validator">The custom validator object for this DatabaseLogEntity</param>
		public DatabaseLogEntity(System.Int32 databaseLogID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.DatabaseLogID = databaseLogID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected DatabaseLogEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Primary key for DatabaseLog records.");
			_fieldsCustomProperties.Add("DatabaseLogID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The user who implemented the DDL change.");
			_fieldsCustomProperties.Add("DatabaseUser", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The type of DDL statement that was executed.");
			_fieldsCustomProperties.Add("Event", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The object that was changed by the DDL statment.");
			_fieldsCustomProperties.Add("Object", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Nonclustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("PostTime", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The schema to which the changed object belongs.");
			_fieldsCustomProperties.Add("Schema", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The exact Transact-SQL statement that was executed.");
			_fieldsCustomProperties.Add("Tsql", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The raw XML data generated by database trigger.");
			_fieldsCustomProperties.Add("XmlEvent", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this DatabaseLogEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static DatabaseLogRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The DatabaseLogID property of the Entity DatabaseLog<br/><br/>MS_Description: Primary key for DatabaseLog records.<br/>Primary key for DatabaseLog records.</summary>
		/// <remarks>Mapped on  table field: "DatabaseLog"."DatabaseLogID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 DatabaseLogID
		{
			get { return (System.Int32)GetValue((int)DatabaseLogFieldIndex.DatabaseLogID, true); }
			set { SetValue((int)DatabaseLogFieldIndex.DatabaseLogID, value); }		}

		/// <summary>The DatabaseUser property of the Entity DatabaseLog<br/><br/>MS_Description: The user who implemented the DDL change.<br/>The user who implemented the DDL change.</summary>
		/// <remarks>Mapped on  table field: "DatabaseLog"."DatabaseUser".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 128.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String DatabaseUser
		{
			get { return (System.String)GetValue((int)DatabaseLogFieldIndex.DatabaseUser, true); }
			set	{ SetValue((int)DatabaseLogFieldIndex.DatabaseUser, value); }
		}

		/// <summary>The Event property of the Entity DatabaseLog<br/><br/>MS_Description: The type of DDL statement that was executed.<br/>The type of DDL statement that was executed.</summary>
		/// <remarks>Mapped on  table field: "DatabaseLog"."Event".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 128.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Event
		{
			get { return (System.String)GetValue((int)DatabaseLogFieldIndex.Event, true); }
			set	{ SetValue((int)DatabaseLogFieldIndex.Event, value); }
		}

		/// <summary>The Object property of the Entity DatabaseLog<br/><br/>MS_Description: The object that was changed by the DDL statment.<br/>The object that was changed by the DDL statment.</summary>
		/// <remarks>Mapped on  table field: "DatabaseLog"."Object".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 128.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Object
		{
			get { return (System.String)GetValue((int)DatabaseLogFieldIndex.Object, true); }
			set	{ SetValue((int)DatabaseLogFieldIndex.Object, value); }
		}

		/// <summary>The PostTime property of the Entity DatabaseLog<br/><br/>MS_Description: Nonclustered index created by a primary key constraint.<br/>Nonclustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "DatabaseLog"."PostTime".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime PostTime
		{
			get { return (System.DateTime)GetValue((int)DatabaseLogFieldIndex.PostTime, true); }
			set	{ SetValue((int)DatabaseLogFieldIndex.PostTime, value); }
		}

		/// <summary>The Schema property of the Entity DatabaseLog<br/><br/>MS_Description: The schema to which the changed object belongs.<br/>The schema to which the changed object belongs.</summary>
		/// <remarks>Mapped on  table field: "DatabaseLog"."Schema".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 128.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Schema
		{
			get { return (System.String)GetValue((int)DatabaseLogFieldIndex.Schema, true); }
			set	{ SetValue((int)DatabaseLogFieldIndex.Schema, value); }
		}

		/// <summary>The Tsql property of the Entity DatabaseLog<br/><br/>MS_Description: The exact Transact-SQL statement that was executed.<br/>The exact Transact-SQL statement that was executed.</summary>
		/// <remarks>Mapped on  table field: "DatabaseLog"."TSQL".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Tsql
		{
			get { return (System.String)GetValue((int)DatabaseLogFieldIndex.Tsql, true); }
			set	{ SetValue((int)DatabaseLogFieldIndex.Tsql, value); }
		}

		/// <summary>The XmlEvent property of the Entity DatabaseLog<br/><br/>MS_Description: The raw XML data generated by database trigger.<br/>The raw XML data generated by database trigger.</summary>
		/// <remarks>Mapped on  table field: "DatabaseLog"."XmlEvent".<br/>Table field type characteristics (type, precision, scale, length): Xml, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String XmlEvent
		{
			get { return (System.String)GetValue((int)DatabaseLogFieldIndex.XmlEvent, true); }
			set	{ SetValue((int)DatabaseLogFieldIndex.XmlEvent, value); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum DatabaseLogFieldIndex
	{
		///<summary>DatabaseLogID. </summary>
		DatabaseLogID,
		///<summary>DatabaseUser. </summary>
		DatabaseUser,
		///<summary>Event. </summary>
		Event,
		///<summary>Object. </summary>
		Object,
		///<summary>PostTime. </summary>
		PostTime,
		///<summary>Schema. </summary>
		Schema,
		///<summary>Tsql. </summary>
		Tsql,
		///<summary>XmlEvent. </summary>
		XmlEvent,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: DatabaseLog. </summary>
	public partial class DatabaseLogRelations: RelationFactory
	{

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticDatabaseLogRelations
	{

		/// <summary>CTor</summary>
		static StaticDatabaseLogRelations() { }
	}
}
