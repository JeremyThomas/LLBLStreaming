//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Document'.<br/><br/>MS_Description: Product maintenance documents.<br/></summary>
	[Serializable]
	public partial class DocumentEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<ProductDocumentEntity> _productDocuments;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static DocumentEntityStaticMetaData _staticMetaData = new DocumentEntityStaticMetaData();
		private static DocumentRelations _relationsFactory = new DocumentRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name ProductDocuments</summary>
			public static readonly string ProductDocuments = "ProductDocuments";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class DocumentEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public DocumentEntityStaticMetaData()
			{
				SetEntityCoreInfo("DocumentEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.DocumentEntity, typeof(DocumentEntity), typeof(DocumentEntityFactory), false);
				AddNavigatorMetaData<DocumentEntity, EntityCollection<ProductDocumentEntity>>("ProductDocuments", a => a._productDocuments, (a, b) => a._productDocuments = b, a => a.ProductDocuments, () => new DocumentRelations().ProductDocumentEntityUsingDocumentID, typeof(ProductDocumentEntity), (int)AW.Dal.EntityType.ProductDocumentEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static DocumentEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public DocumentEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public DocumentEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this DocumentEntity</param>
		public DocumentEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="documentID">PK value for Document which data should be fetched into this Document object</param>
		public DocumentEntity(System.Int32 documentID) : this(documentID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="documentID">PK value for Document which data should be fetched into this Document object</param>
		/// <param name="validator">The custom validator object for this DocumentEntity</param>
		public DocumentEntity(System.Int32 documentID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.DocumentID = documentID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected DocumentEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ProductDocument' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProductDocuments() { return CreateRelationInfoForNavigator("ProductDocuments"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Product maintenance documents.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Engineering change approval number.");
			_fieldsCustomProperties.Add("ChangeNumber", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Complete document.");
			_fieldsCustomProperties.Add("Document", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("DocumentID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Document abstract.");
			_fieldsCustomProperties.Add("DocumentSummary", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"File extension indicating the document type. For example, .doc or .txt.");
			_fieldsCustomProperties.Add("FileExtension", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Directory path and file name of the document");
			_fieldsCustomProperties.Add("FileName", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Revision number of the document. ");
			_fieldsCustomProperties.Add("Revision", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"1 = Pending approval, 2 = Approved, 3 = Obsolete");
			_fieldsCustomProperties.Add("Status", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Title of the document.");
			_fieldsCustomProperties.Add("Title", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this DocumentEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static DocumentRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProductDocument' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProductDocuments { get { return _staticMetaData.GetPrefetchPathElement("ProductDocuments", CommonEntityBase.CreateEntityCollection<ProductDocumentEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The ChangeNumber property of the Entity Document<br/><br/>MS_Description: Engineering change approval number.<br/>Engineering change approval number.</summary>
		/// <remarks>Mapped on  table field: "Document"."ChangeNumber".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ChangeNumber
		{
			get { return (System.Int32)GetValue((int)DocumentFieldIndex.ChangeNumber, true); }
			set	{ SetValue((int)DocumentFieldIndex.ChangeNumber, value); }
		}

		/// <summary>The Document property of the Entity Document<br/><br/>MS_Description: Complete document.<br/>Complete document.</summary>
		/// <remarks>Mapped on  table field: "Document"."Document".<br/>Table field type characteristics (type, precision, scale, length): VarBinary, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.Byte[] Document
		{
			get { return (System.Byte[])GetValue((int)DocumentFieldIndex.Document, true); }
			set	{ SetValue((int)DocumentFieldIndex.Document, value); }
		}

		/// <summary>The DocumentID property of the Entity Document<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "Document"."DocumentID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 DocumentID
		{
			get { return (System.Int32)GetValue((int)DocumentFieldIndex.DocumentID, true); }
			set { SetValue((int)DocumentFieldIndex.DocumentID, value); }		}

		/// <summary>The DocumentSummary property of the Entity Document<br/><br/>MS_Description: Document abstract.<br/>Document abstract.</summary>
		/// <remarks>Mapped on  table field: "Document"."DocumentSummary".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String DocumentSummary
		{
			get { return (System.String)GetValue((int)DocumentFieldIndex.DocumentSummary, true); }
			set	{ SetValue((int)DocumentFieldIndex.DocumentSummary, value); }
		}

		/// <summary>The FileExtension property of the Entity Document<br/><br/>MS_Description: File extension indicating the document type. For example, .doc or .txt.<br/>File extension indicating the document type. For example, .doc or .txt.</summary>
		/// <remarks>Mapped on  table field: "Document"."FileExtension".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 8.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String FileExtension
		{
			get { return (System.String)GetValue((int)DocumentFieldIndex.FileExtension, true); }
			set	{ SetValue((int)DocumentFieldIndex.FileExtension, value); }
		}

		/// <summary>The FileName property of the Entity Document<br/><br/>MS_Description: Directory path and file name of the document<br/>Directory path and file name of the document</summary>
		/// <remarks>Mapped on  table field: "Document"."FileName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 400.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String FileName
		{
			get { return (System.String)GetValue((int)DocumentFieldIndex.FileName, true); }
			set	{ SetValue((int)DocumentFieldIndex.FileName, value); }
		}

		/// <summary>The ModifiedDate property of the Entity Document<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "Document"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)DocumentFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)DocumentFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The Revision property of the Entity Document<br/><br/>MS_Description: Revision number of the document. <br/>Revision number of the document. </summary>
		/// <remarks>Mapped on  table field: "Document"."Revision".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 5.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Revision
		{
			get { return (System.String)GetValue((int)DocumentFieldIndex.Revision, true); }
			set	{ SetValue((int)DocumentFieldIndex.Revision, value); }
		}

		/// <summary>The Status property of the Entity Document<br/><br/>MS_Description: 1 = Pending approval, 2 = Approved, 3 = Obsolete<br/>1 = Pending approval, 2 = Approved, 3 = Obsolete</summary>
		/// <remarks>Mapped on  table field: "Document"."Status".<br/>Table field type characteristics (type, precision, scale, length): TinyInt, 3, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual AW.Data.ProductMaintenanceDocumentStatus Status
		{
			get { return (AW.Data.ProductMaintenanceDocumentStatus)GetValue((int)DocumentFieldIndex.Status, true); }
			set	{ SetValue((int)DocumentFieldIndex.Status, value); }
		}

		/// <summary>The Title property of the Entity Document<br/><br/>MS_Description: Title of the document.<br/>Title of the document.</summary>
		/// <remarks>Mapped on  table field: "Document"."Title".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Title
		{
			get { return (System.String)GetValue((int)DocumentFieldIndex.Title, true); }
			set	{ SetValue((int)DocumentFieldIndex.Title, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductDocumentEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductDocumentEntity))]
		public virtual EntityCollection<ProductDocumentEntity> ProductDocuments { get { return GetOrCreateEntityCollection<ProductDocumentEntity, ProductDocumentEntityFactory>("Document", true, false, ref _productDocuments); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum DocumentFieldIndex
	{
		///<summary>ChangeNumber. </summary>
		ChangeNumber,
		///<summary>Document. </summary>
		Document,
		///<summary>DocumentID. </summary>
		DocumentID,
		///<summary>DocumentSummary. </summary>
		DocumentSummary,
		///<summary>FileExtension. </summary>
		FileExtension,
		///<summary>FileName. </summary>
		FileName,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>Revision. </summary>
		Revision,
		///<summary>Status. </summary>
		Status,
		///<summary>Title. </summary>
		Title,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Document. </summary>
	public partial class DocumentRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between DocumentEntity and ProductDocumentEntity over the 1:n relation they have, using the relation between the fields: Document.DocumentID - ProductDocument.DocumentID</summary>
		public virtual IEntityRelation ProductDocumentEntityUsingDocumentID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ProductDocuments", true, new[] { DocumentFields.DocumentID, ProductDocumentFields.DocumentID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticDocumentRelations
	{
		internal static readonly IEntityRelation ProductDocumentEntityUsingDocumentIDStatic = new DocumentRelations().ProductDocumentEntityUsingDocumentID;

		/// <summary>CTor</summary>
		static StaticDocumentRelations() { }
	}
}
