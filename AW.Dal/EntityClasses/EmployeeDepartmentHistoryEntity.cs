//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'EmployeeDepartmentHistory'.<br/><br/>MS_Description: Employee department transfers.<br/></summary>
	[Serializable]
	public partial class EmployeeDepartmentHistoryEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private DepartmentEntity _department;
		private EmployeeEntity _employee;
		private ShiftEntity _shift;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static EmployeeDepartmentHistoryEntityStaticMetaData _staticMetaData = new EmployeeDepartmentHistoryEntityStaticMetaData();
		private static EmployeeDepartmentHistoryRelations _relationsFactory = new EmployeeDepartmentHistoryRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Department</summary>
			public static readonly string Department = "Department";
			/// <summary>Member name Employee</summary>
			public static readonly string Employee = "Employee";
			/// <summary>Member name Shift</summary>
			public static readonly string Shift = "Shift";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class EmployeeDepartmentHistoryEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public EmployeeDepartmentHistoryEntityStaticMetaData()
			{
				SetEntityCoreInfo("EmployeeDepartmentHistoryEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.EmployeeDepartmentHistoryEntity, typeof(EmployeeDepartmentHistoryEntity), typeof(EmployeeDepartmentHistoryEntityFactory), false);
				AddNavigatorMetaData<EmployeeDepartmentHistoryEntity, DepartmentEntity>("Department", "EmployeeDepartmentHistories", (a, b) => a._department = b, a => a._department, (a, b) => a.Department = b, AW.Dal.RelationClasses.StaticEmployeeDepartmentHistoryRelations.DepartmentEntityUsingDepartmentIDStatic, ()=>new EmployeeDepartmentHistoryRelations().DepartmentEntityUsingDepartmentID, null, new int[] { (int)EmployeeDepartmentHistoryFieldIndex.DepartmentID }, null, true, (int)AW.Dal.EntityType.DepartmentEntity);
				AddNavigatorMetaData<EmployeeDepartmentHistoryEntity, EmployeeEntity>("Employee", "EmployeeDepartmentHistories", (a, b) => a._employee = b, a => a._employee, (a, b) => a.Employee = b, AW.Dal.RelationClasses.StaticEmployeeDepartmentHistoryRelations.EmployeeEntityUsingEmployeeIDStatic, ()=>new EmployeeDepartmentHistoryRelations().EmployeeEntityUsingEmployeeID, null, new int[] { (int)EmployeeDepartmentHistoryFieldIndex.EmployeeID }, null, true, (int)AW.Dal.EntityType.EmployeeEntity);
				AddNavigatorMetaData<EmployeeDepartmentHistoryEntity, ShiftEntity>("Shift", "EmployeeDepartmentHistories", (a, b) => a._shift = b, a => a._shift, (a, b) => a.Shift = b, AW.Dal.RelationClasses.StaticEmployeeDepartmentHistoryRelations.ShiftEntityUsingShiftIDStatic, ()=>new EmployeeDepartmentHistoryRelations().ShiftEntityUsingShiftID, null, new int[] { (int)EmployeeDepartmentHistoryFieldIndex.ShiftID }, null, true, (int)AW.Dal.EntityType.ShiftEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static EmployeeDepartmentHistoryEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public EmployeeDepartmentHistoryEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public EmployeeDepartmentHistoryEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this EmployeeDepartmentHistoryEntity</param>
		public EmployeeDepartmentHistoryEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="departmentID">PK value for EmployeeDepartmentHistory which data should be fetched into this EmployeeDepartmentHistory object</param>
		/// <param name="employeeID">PK value for EmployeeDepartmentHistory which data should be fetched into this EmployeeDepartmentHistory object</param>
		/// <param name="shiftID">PK value for EmployeeDepartmentHistory which data should be fetched into this EmployeeDepartmentHistory object</param>
		/// <param name="startDate">PK value for EmployeeDepartmentHistory which data should be fetched into this EmployeeDepartmentHistory object</param>
		public EmployeeDepartmentHistoryEntity(System.Int16 departmentID, System.Int32 employeeID, System.Byte shiftID, System.DateTime startDate) : this(departmentID, employeeID, shiftID, startDate, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="departmentID">PK value for EmployeeDepartmentHistory which data should be fetched into this EmployeeDepartmentHistory object</param>
		/// <param name="employeeID">PK value for EmployeeDepartmentHistory which data should be fetched into this EmployeeDepartmentHistory object</param>
		/// <param name="shiftID">PK value for EmployeeDepartmentHistory which data should be fetched into this EmployeeDepartmentHistory object</param>
		/// <param name="startDate">PK value for EmployeeDepartmentHistory which data should be fetched into this EmployeeDepartmentHistory object</param>
		/// <param name="validator">The custom validator object for this EmployeeDepartmentHistoryEntity</param>
		public EmployeeDepartmentHistoryEntity(System.Int16 departmentID, System.Int32 employeeID, System.Byte shiftID, System.DateTime startDate, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.DepartmentID = departmentID;
			this.EmployeeID = employeeID;
			this.ShiftID = shiftID;
			this.StartDate = startDate;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected EmployeeDepartmentHistoryEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Department' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoDepartment() { return CreateRelationInfoForNavigator("Department"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Employee' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmployee() { return CreateRelationInfoForNavigator("Employee"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Shift' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoShift() { return CreateRelationInfoForNavigator("Shift"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Employee department transfers.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Department in which the employee worked including currently. Foreign key to Department.DepartmentID.");
			_fieldsCustomProperties.Add("DepartmentID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("EmployeeID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date the employee left the department. NULL = Current department.");
			_fieldsCustomProperties.Add("EndDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Nonclustered index.");
			_fieldsCustomProperties.Add("ShiftID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date the employee started work in the department.");
			_fieldsCustomProperties.Add("StartDate", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this EmployeeDepartmentHistoryEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static EmployeeDepartmentHistoryRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Department' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathDepartment { get { return _staticMetaData.GetPrefetchPathElement("Department", CommonEntityBase.CreateEntityCollection<DepartmentEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Employee' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmployee { get { return _staticMetaData.GetPrefetchPathElement("Employee", CommonEntityBase.CreateEntityCollection<EmployeeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Shift' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathShift { get { return _staticMetaData.GetPrefetchPathElement("Shift", CommonEntityBase.CreateEntityCollection<ShiftEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The DepartmentID property of the Entity EmployeeDepartmentHistory<br/><br/>MS_Description: Department in which the employee worked including currently. Foreign key to Department.DepartmentID.<br/>Department in which the employee worked including currently. Foreign key to Department.DepartmentID.</summary>
		/// <remarks>Mapped on  table field: "EmployeeDepartmentHistory"."DepartmentID".<br/>Table field type characteristics (type, precision, scale, length): SmallInt, 5, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int16 DepartmentID
		{
			get { return (System.Int16)GetValue((int)EmployeeDepartmentHistoryFieldIndex.DepartmentID, true); }
			set	{ SetValue((int)EmployeeDepartmentHistoryFieldIndex.DepartmentID, value); }
		}

		/// <summary>The EmployeeID property of the Entity EmployeeDepartmentHistory<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "EmployeeDepartmentHistory"."EmployeeID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 EmployeeID
		{
			get { return (System.Int32)GetValue((int)EmployeeDepartmentHistoryFieldIndex.EmployeeID, true); }
			set	{ SetValue((int)EmployeeDepartmentHistoryFieldIndex.EmployeeID, value); }
		}

		/// <summary>The EndDate property of the Entity EmployeeDepartmentHistory<br/><br/>MS_Description: Date the employee left the department. NULL = Current department.<br/>Date the employee left the department. NULL = Current department.</summary>
		/// <remarks>Mapped on  table field: "EmployeeDepartmentHistory"."EndDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> EndDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)EmployeeDepartmentHistoryFieldIndex.EndDate, false); }
			set	{ SetValue((int)EmployeeDepartmentHistoryFieldIndex.EndDate, value); }
		}

		/// <summary>The ModifiedDate property of the Entity EmployeeDepartmentHistory<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "EmployeeDepartmentHistory"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)EmployeeDepartmentHistoryFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)EmployeeDepartmentHistoryFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The ShiftID property of the Entity EmployeeDepartmentHistory<br/><br/>MS_Description: Nonclustered index.<br/>Nonclustered index.</summary>
		/// <remarks>Mapped on  table field: "EmployeeDepartmentHistory"."ShiftID".<br/>Table field type characteristics (type, precision, scale, length): TinyInt, 3, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Byte ShiftID
		{
			get { return (System.Byte)GetValue((int)EmployeeDepartmentHistoryFieldIndex.ShiftID, true); }
			set	{ SetValue((int)EmployeeDepartmentHistoryFieldIndex.ShiftID, value); }
		}

		/// <summary>The StartDate property of the Entity EmployeeDepartmentHistory<br/><br/>MS_Description: Date the employee started work in the department.<br/>Date the employee started work in the department.</summary>
		/// <remarks>Mapped on  table field: "EmployeeDepartmentHistory"."StartDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.DateTime StartDate
		{
			get { return (System.DateTime)GetValue((int)EmployeeDepartmentHistoryFieldIndex.StartDate, true); }
			set	{ SetValue((int)EmployeeDepartmentHistoryFieldIndex.StartDate, value); }
		}

		/// <summary>Gets / sets related entity of type 'DepartmentEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual DepartmentEntity Department
		{
			get { return _department; }
			set { SetSingleRelatedEntityNavigator(value, "Department"); }
		}

		/// <summary>Gets / sets related entity of type 'EmployeeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual EmployeeEntity Employee
		{
			get { return _employee; }
			set { SetSingleRelatedEntityNavigator(value, "Employee"); }
		}

		/// <summary>Gets / sets related entity of type 'ShiftEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ShiftEntity Shift
		{
			get { return _shift; }
			set { SetSingleRelatedEntityNavigator(value, "Shift"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum EmployeeDepartmentHistoryFieldIndex
	{
		///<summary>DepartmentID. </summary>
		DepartmentID,
		///<summary>EmployeeID. </summary>
		EmployeeID,
		///<summary>EndDate. </summary>
		EndDate,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>ShiftID. </summary>
		ShiftID,
		///<summary>StartDate. </summary>
		StartDate,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: EmployeeDepartmentHistory. </summary>
	public partial class EmployeeDepartmentHistoryRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between EmployeeDepartmentHistoryEntity and DepartmentEntity over the m:1 relation they have, using the relation between the fields: EmployeeDepartmentHistory.DepartmentID - Department.DepartmentID</summary>
		public virtual IEntityRelation DepartmentEntityUsingDepartmentID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Department", false, new[] { DepartmentFields.DepartmentID, EmployeeDepartmentHistoryFields.DepartmentID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeDepartmentHistoryEntity and EmployeeEntity over the m:1 relation they have, using the relation between the fields: EmployeeDepartmentHistory.EmployeeID - Employee.EmployeeID</summary>
		public virtual IEntityRelation EmployeeEntityUsingEmployeeID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Employee", false, new[] { EmployeeFields.EmployeeID, EmployeeDepartmentHistoryFields.EmployeeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeDepartmentHistoryEntity and ShiftEntity over the m:1 relation they have, using the relation between the fields: EmployeeDepartmentHistory.ShiftID - Shift.ShiftID</summary>
		public virtual IEntityRelation ShiftEntityUsingShiftID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Shift", false, new[] { ShiftFields.ShiftID, EmployeeDepartmentHistoryFields.ShiftID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticEmployeeDepartmentHistoryRelations
	{
		internal static readonly IEntityRelation DepartmentEntityUsingDepartmentIDStatic = new EmployeeDepartmentHistoryRelations().DepartmentEntityUsingDepartmentID;
		internal static readonly IEntityRelation EmployeeEntityUsingEmployeeIDStatic = new EmployeeDepartmentHistoryRelations().EmployeeEntityUsingEmployeeID;
		internal static readonly IEntityRelation ShiftEntityUsingShiftIDStatic = new EmployeeDepartmentHistoryRelations().ShiftEntityUsingShiftID;

		/// <summary>CTor</summary>
		static StaticEmployeeDepartmentHistoryRelations() { }
	}
}
