//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Employee'.<br/><br/>MS_Description: Employee information such as salary, department, and title.<br/></summary>
	[Serializable]
	public partial class EmployeeEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<EmployeeEntity> _manages;
		private EntityCollection<EmployeeAddressEntity> _employeeAddresses;
		private EntityCollection<EmployeeDepartmentHistoryEntity> _employeeDepartmentHistories;
		private EntityCollection<EmployeePayHistoryEntity> _employeePayHistories;
		private EntityCollection<JobCandidateEntity> _jobCandidates;
		private EntityCollection<PurchaseOrderHeaderEntity> _purchaseOrderHeaders;
		private EmployeeEntity _manager;
		private ContactEntity _contact;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static EmployeeEntityStaticMetaData _staticMetaData = new EmployeeEntityStaticMetaData();
		private static EmployeeRelations _relationsFactory = new EmployeeRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Manager</summary>
			public static readonly string Manager = "Manager";
			/// <summary>Member name Contact</summary>
			public static readonly string Contact = "Contact";
			/// <summary>Member name Manages</summary>
			public static readonly string Manages = "Manages";
			/// <summary>Member name EmployeeAddresses</summary>
			public static readonly string EmployeeAddresses = "EmployeeAddresses";
			/// <summary>Member name EmployeeDepartmentHistories</summary>
			public static readonly string EmployeeDepartmentHistories = "EmployeeDepartmentHistories";
			/// <summary>Member name EmployeePayHistories</summary>
			public static readonly string EmployeePayHistories = "EmployeePayHistories";
			/// <summary>Member name JobCandidates</summary>
			public static readonly string JobCandidates = "JobCandidates";
			/// <summary>Member name PurchaseOrderHeaders</summary>
			public static readonly string PurchaseOrderHeaders = "PurchaseOrderHeaders";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class EmployeeEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public EmployeeEntityStaticMetaData()
			{
				SetEntityCoreInfo("EmployeeEntity", InheritanceHierarchyType.TargetPerEntity, false, (int)AW.Dal.EntityType.EmployeeEntity, typeof(EmployeeEntity), typeof(EmployeeEntityFactory), false);
				AddNavigatorMetaData<EmployeeEntity, EntityCollection<EmployeeEntity>>("Manages", a => a._manages, (a, b) => a._manages = b, a => a.Manages, () => new EmployeeRelations().EmployeeEntityUsingManagerID, typeof(EmployeeEntity), (int)AW.Dal.EntityType.EmployeeEntity);
				AddNavigatorMetaData<EmployeeEntity, EntityCollection<EmployeeAddressEntity>>("EmployeeAddresses", a => a._employeeAddresses, (a, b) => a._employeeAddresses = b, a => a.EmployeeAddresses, () => new EmployeeRelations().EmployeeAddressEntityUsingEmployeeID, typeof(EmployeeAddressEntity), (int)AW.Dal.EntityType.EmployeeAddressEntity);
				AddNavigatorMetaData<EmployeeEntity, EntityCollection<EmployeeDepartmentHistoryEntity>>("EmployeeDepartmentHistories", a => a._employeeDepartmentHistories, (a, b) => a._employeeDepartmentHistories = b, a => a.EmployeeDepartmentHistories, () => new EmployeeRelations().EmployeeDepartmentHistoryEntityUsingEmployeeID, typeof(EmployeeDepartmentHistoryEntity), (int)AW.Dal.EntityType.EmployeeDepartmentHistoryEntity);
				AddNavigatorMetaData<EmployeeEntity, EntityCollection<EmployeePayHistoryEntity>>("EmployeePayHistories", a => a._employeePayHistories, (a, b) => a._employeePayHistories = b, a => a.EmployeePayHistories, () => new EmployeeRelations().EmployeePayHistoryEntityUsingEmployeeID, typeof(EmployeePayHistoryEntity), (int)AW.Dal.EntityType.EmployeePayHistoryEntity);
				AddNavigatorMetaData<EmployeeEntity, EntityCollection<JobCandidateEntity>>("JobCandidates", a => a._jobCandidates, (a, b) => a._jobCandidates = b, a => a.JobCandidates, () => new EmployeeRelations().JobCandidateEntityUsingEmployeeID, typeof(JobCandidateEntity), (int)AW.Dal.EntityType.JobCandidateEntity);
				AddNavigatorMetaData<EmployeeEntity, EntityCollection<PurchaseOrderHeaderEntity>>("PurchaseOrderHeaders", a => a._purchaseOrderHeaders, (a, b) => a._purchaseOrderHeaders = b, a => a.PurchaseOrderHeaders, () => new EmployeeRelations().PurchaseOrderHeaderEntityUsingEmployeeID, typeof(PurchaseOrderHeaderEntity), (int)AW.Dal.EntityType.PurchaseOrderHeaderEntity);
				AddNavigatorMetaData<EmployeeEntity, EmployeeEntity>("Manager", "Manages", (a, b) => a._manager = b, a => a._manager, (a, b) => a.Manager = b, AW.Dal.RelationClasses.StaticEmployeeRelations.EmployeeEntityUsingEmployeeIDManagerIDStatic, ()=>new EmployeeRelations().EmployeeEntityUsingEmployeeIDManagerID, null, new int[] { (int)EmployeeFieldIndex.ManagerID }, null, true, (int)AW.Dal.EntityType.EmployeeEntity);
				AddNavigatorMetaData<EmployeeEntity, ContactEntity>("Contact", "Employees", (a, b) => a._contact = b, a => a._contact, (a, b) => a.Contact = b, AW.Dal.RelationClasses.StaticEmployeeRelations.ContactEntityUsingContactIDStatic, ()=>new EmployeeRelations().ContactEntityUsingContactID, null, new int[] { (int)EmployeeFieldIndex.ContactID }, null, true, (int)AW.Dal.EntityType.ContactEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static EmployeeEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public EmployeeEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public EmployeeEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this EmployeeEntity</param>
		public EmployeeEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="employeeID">PK value for Employee which data should be fetched into this Employee object</param>
		public EmployeeEntity(System.Int32 employeeID) : this(employeeID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="employeeID">PK value for Employee which data should be fetched into this Employee object</param>
		/// <param name="validator">The custom validator object for this EmployeeEntity</param>
		public EmployeeEntity(System.Int32 employeeID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.EmployeeID = employeeID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected EmployeeEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Gets a predicateexpression which filters on this entity. Only useful in entity fetches</summary>
		/// <param name="negate">Optional flag to produce a NOT filter, (true), or a normal filter (false, default). </param>
		/// <returns>ready to use predicateexpression</returns>
		public  static IPredicateExpression GetEntityTypeFilter(bool negate=false) { return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter("EmployeeEntity", negate); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Employee' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoManages() { return CreateRelationInfoForNavigator("Manages"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'EmployeeAddress' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmployeeAddresses() { return CreateRelationInfoForNavigator("EmployeeAddresses"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'EmployeeDepartmentHistory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmployeeDepartmentHistories() { return CreateRelationInfoForNavigator("EmployeeDepartmentHistories"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'EmployeePayHistory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmployeePayHistories() { return CreateRelationInfoForNavigator("EmployeePayHistories"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'JobCandidate' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoJobCandidates() { return CreateRelationInfoForNavigator("JobCandidates"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'PurchaseOrderHeader' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPurchaseOrderHeaders() { return CreateRelationInfoForNavigator("PurchaseOrderHeaders"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Employee' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoManager() { return CreateRelationInfoForNavigator("Manager"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Contact' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoContact() { return CreateRelationInfoForNavigator("Contact"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Employee information such as salary, department, and title.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date of birth.");
			_fieldsCustomProperties.Add("BirthDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Unique nonclustered index.");
			_fieldsCustomProperties.Add("ContactID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("EmployeeID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"M = Male, F = Female");
			_fieldsCustomProperties.Add("Gender", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Employee hired on this date.");
			_fieldsCustomProperties.Add("HireDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"0 = Inactive, 1 = Active");
			_fieldsCustomProperties.Add("IsCurrent", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.");
			_fieldsCustomProperties.Add("IsSalaried", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Network login.");
			_fieldsCustomProperties.Add("LoginID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Nonclustered index.");
			_fieldsCustomProperties.Add("ManagerID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"M = Married, S = Single");
			_fieldsCustomProperties.Add("MaritalStatus", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Unique national identification number such as a social security number.");
			_fieldsCustomProperties.Add("NationalIdnumber", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");
			_fieldsCustomProperties.Add("Rowguid", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Number of available sick leave hours.");
			_fieldsCustomProperties.Add("SickLeaveHours", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Work title such as Buyer or Sales Representative.");
			_fieldsCustomProperties.Add("Title", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Number of available vacation hours.");
			_fieldsCustomProperties.Add("VacationHours", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this EmployeeEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static EmployeeRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Employee' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathManages { get { return _staticMetaData.GetPrefetchPathElement("Manages", CommonEntityBase.CreateEntityCollection<EmployeeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EmployeeAddress' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmployeeAddresses { get { return _staticMetaData.GetPrefetchPathElement("EmployeeAddresses", CommonEntityBase.CreateEntityCollection<EmployeeAddressEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EmployeeDepartmentHistory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmployeeDepartmentHistories { get { return _staticMetaData.GetPrefetchPathElement("EmployeeDepartmentHistories", CommonEntityBase.CreateEntityCollection<EmployeeDepartmentHistoryEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EmployeePayHistory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmployeePayHistories { get { return _staticMetaData.GetPrefetchPathElement("EmployeePayHistories", CommonEntityBase.CreateEntityCollection<EmployeePayHistoryEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'JobCandidate' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathJobCandidates { get { return _staticMetaData.GetPrefetchPathElement("JobCandidates", CommonEntityBase.CreateEntityCollection<JobCandidateEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PurchaseOrderHeader' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPurchaseOrderHeaders { get { return _staticMetaData.GetPrefetchPathElement("PurchaseOrderHeaders", CommonEntityBase.CreateEntityCollection<PurchaseOrderHeaderEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Employee' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathManager { get { return _staticMetaData.GetPrefetchPathElement("Manager", CommonEntityBase.CreateEntityCollection<EmployeeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Contact' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathContact { get { return _staticMetaData.GetPrefetchPathElement("Contact", CommonEntityBase.CreateEntityCollection<ContactEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The BirthDate property of the Entity Employee<br/><br/>MS_Description: Date of birth.<br/>Date of birth.</summary>
		/// <remarks>Mapped on  table field: "Employee"."BirthDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime BirthDate
		{
			get { return (System.DateTime)GetValue((int)EmployeeFieldIndex.BirthDate, true); }
			set	{ SetValue((int)EmployeeFieldIndex.BirthDate, value); }
		}

		/// <summary>The ContactID property of the Entity Employee<br/><br/>MS_Description: Unique nonclustered index.<br/>Unique nonclustered index.</summary>
		/// <remarks>Mapped on  table field: "Employee"."ContactID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ContactID
		{
			get { return (System.Int32)GetValue((int)EmployeeFieldIndex.ContactID, true); }
			set	{ SetValue((int)EmployeeFieldIndex.ContactID, value); }
		}

		/// <summary>The EmployeeID property of the Entity Employee<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "Employee"."EmployeeID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 EmployeeID
		{
			get { return (System.Int32)GetValue((int)EmployeeFieldIndex.EmployeeID, true); }
			set { SetValue((int)EmployeeFieldIndex.EmployeeID, value); }		}

		/// <summary>The Gender property of the Entity Employee<br/><br/>MS_Description: M = Male, F = Female<br/>M = Male, F = Female</summary>
		/// <remarks>Mapped on  table field: "Employee"."Gender".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 1.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual AW.Data.Gender Gender
		{
			get { return (AW.Data.Gender)GetValue((int)EmployeeFieldIndex.Gender, true); }
			set	{ SetValue((int)EmployeeFieldIndex.Gender, value); }
		}

		/// <summary>The HireDate property of the Entity Employee<br/><br/>MS_Description: Employee hired on this date.<br/>Employee hired on this date.</summary>
		/// <remarks>Mapped on  table field: "Employee"."HireDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime HireDate
		{
			get { return (System.DateTime)GetValue((int)EmployeeFieldIndex.HireDate, true); }
			set	{ SetValue((int)EmployeeFieldIndex.HireDate, value); }
		}

		/// <summary>The IsCurrent property of the Entity Employee<br/><br/>MS_Description: 0 = Inactive, 1 = Active<br/>0 = Inactive, 1 = Active</summary>
		/// <remarks>Mapped on  table field: "Employee"."CurrentFlag".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsCurrent
		{
			get { return (System.Boolean)GetValue((int)EmployeeFieldIndex.IsCurrent, true); }
			set	{ SetValue((int)EmployeeFieldIndex.IsCurrent, value); }
		}

		/// <summary>The IsSalaried property of the Entity Employee<br/><br/>MS_Description: Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.<br/>Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.</summary>
		/// <remarks>Mapped on  table field: "Employee"."SalariedFlag".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsSalaried
		{
			get { return (System.Boolean)GetValue((int)EmployeeFieldIndex.IsSalaried, true); }
			set	{ SetValue((int)EmployeeFieldIndex.IsSalaried, value); }
		}

		/// <summary>The LoginID property of the Entity Employee<br/><br/>MS_Description: Network login.<br/>Network login.</summary>
		/// <remarks>Mapped on  table field: "Employee"."LoginID".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 256.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String LoginID
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.LoginID, true); }
			set	{ SetValue((int)EmployeeFieldIndex.LoginID, value); }
		}

		/// <summary>The ManagerID property of the Entity Employee<br/><br/>MS_Description: Nonclustered index.<br/>Nonclustered index.</summary>
		/// <remarks>Mapped on  table field: "Employee"."ManagerID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ManagerID
		{
			get { return (Nullable<System.Int32>)GetValue((int)EmployeeFieldIndex.ManagerID, false); }
			set	{ SetValue((int)EmployeeFieldIndex.ManagerID, value); }
		}

		/// <summary>The MaritalStatus property of the Entity Employee<br/><br/>MS_Description: M = Married, S = Single<br/>M = Married, S = Single</summary>
		/// <remarks>Mapped on  table field: "Employee"."MaritalStatus".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 1.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual AW.Data.MaritalStatus MaritalStatus
		{
			get { return (AW.Data.MaritalStatus)GetValue((int)EmployeeFieldIndex.MaritalStatus, true); }
			set	{ SetValue((int)EmployeeFieldIndex.MaritalStatus, value); }
		}

		/// <summary>The ModifiedDate property of the Entity Employee<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "Employee"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)EmployeeFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)EmployeeFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The NationalIdnumber property of the Entity Employee<br/><br/>MS_Description: Unique national identification number such as a social security number.<br/>Unique national identification number such as a social security number.</summary>
		/// <remarks>Mapped on  table field: "Employee"."NationalIDNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String NationalIdnumber
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.NationalIdnumber, true); }
			set	{ SetValue((int)EmployeeFieldIndex.NationalIdnumber, value); }
		}

		/// <summary>The Rowguid property of the Entity Employee<br/><br/>MS_Description: ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.<br/>ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</summary>
		/// <remarks>Mapped on  table field: "Employee"."rowguid".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid Rowguid
		{
			get { return (System.Guid)GetValue((int)EmployeeFieldIndex.Rowguid, true); }
			set	{ SetValue((int)EmployeeFieldIndex.Rowguid, value); }
		}

		/// <summary>The SickLeaveHours property of the Entity Employee<br/><br/>MS_Description: Number of available sick leave hours.<br/>Number of available sick leave hours.</summary>
		/// <remarks>Mapped on  table field: "Employee"."SickLeaveHours".<br/>Table field type characteristics (type, precision, scale, length): SmallInt, 5, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int16 SickLeaveHours
		{
			get { return (System.Int16)GetValue((int)EmployeeFieldIndex.SickLeaveHours, true); }
			set	{ SetValue((int)EmployeeFieldIndex.SickLeaveHours, value); }
		}

		/// <summary>The Title property of the Entity Employee<br/><br/>MS_Description: Work title such as Buyer or Sales Representative.<br/>Work title such as Buyer or Sales Representative.</summary>
		/// <remarks>Mapped on  table field: "Employee"."Title".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Title
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.Title, true); }
			set	{ SetValue((int)EmployeeFieldIndex.Title, value); }
		}

		/// <summary>The VacationHours property of the Entity Employee<br/><br/>MS_Description: Number of available vacation hours.<br/>Number of available vacation hours.</summary>
		/// <remarks>Mapped on  table field: "Employee"."VacationHours".<br/>Table field type characteristics (type, precision, scale, length): SmallInt, 5, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int16 VacationHours
		{
			get { return (System.Int16)GetValue((int)EmployeeFieldIndex.VacationHours, true); }
			set	{ SetValue((int)EmployeeFieldIndex.VacationHours, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'EmployeeEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EmployeeEntity))]
		public virtual EntityCollection<EmployeeEntity> Manages { get { return GetOrCreateEntityCollection<EmployeeEntity, EmployeeEntityFactory>("Manager", true, false, ref _manages); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'EmployeeAddressEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EmployeeAddressEntity))]
		public virtual EntityCollection<EmployeeAddressEntity> EmployeeAddresses { get { return GetOrCreateEntityCollection<EmployeeAddressEntity, EmployeeAddressEntityFactory>("Employee", true, false, ref _employeeAddresses); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'EmployeeDepartmentHistoryEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EmployeeDepartmentHistoryEntity))]
		public virtual EntityCollection<EmployeeDepartmentHistoryEntity> EmployeeDepartmentHistories { get { return GetOrCreateEntityCollection<EmployeeDepartmentHistoryEntity, EmployeeDepartmentHistoryEntityFactory>("Employee", true, false, ref _employeeDepartmentHistories); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'EmployeePayHistoryEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EmployeePayHistoryEntity))]
		public virtual EntityCollection<EmployeePayHistoryEntity> EmployeePayHistories { get { return GetOrCreateEntityCollection<EmployeePayHistoryEntity, EmployeePayHistoryEntityFactory>("Employee", true, false, ref _employeePayHistories); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'JobCandidateEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(JobCandidateEntity))]
		public virtual EntityCollection<JobCandidateEntity> JobCandidates { get { return GetOrCreateEntityCollection<JobCandidateEntity, JobCandidateEntityFactory>("Employee", true, false, ref _jobCandidates); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'PurchaseOrderHeaderEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PurchaseOrderHeaderEntity))]
		public virtual EntityCollection<PurchaseOrderHeaderEntity> PurchaseOrderHeaders { get { return GetOrCreateEntityCollection<PurchaseOrderHeaderEntity, PurchaseOrderHeaderEntityFactory>("Employee", true, false, ref _purchaseOrderHeaders); } }

		/// <summary>Gets / sets related entity of type 'EmployeeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual EmployeeEntity Manager
		{
			get { return _manager; }
			set { SetSingleRelatedEntityNavigator(value, "Manager"); }
		}

		/// <summary>Gets / sets related entity of type 'ContactEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ContactEntity Contact
		{
			get { return _contact; }
			set { SetSingleRelatedEntityNavigator(value, "Contact"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum EmployeeFieldIndex
	{
		///<summary>BirthDate. </summary>
		BirthDate,
		///<summary>ContactID. </summary>
		ContactID,
		///<summary>EmployeeID. </summary>
		EmployeeID,
		///<summary>Gender. </summary>
		Gender,
		///<summary>HireDate. </summary>
		HireDate,
		///<summary>IsCurrent. </summary>
		IsCurrent,
		///<summary>IsSalaried. </summary>
		IsSalaried,
		///<summary>LoginID. </summary>
		LoginID,
		///<summary>ManagerID. </summary>
		ManagerID,
		///<summary>MaritalStatus. </summary>
		MaritalStatus,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>NationalIdnumber. </summary>
		NationalIdnumber,
		///<summary>Rowguid. </summary>
		Rowguid,
		///<summary>SickLeaveHours. </summary>
		SickLeaveHours,
		///<summary>Title. </summary>
		Title,
		///<summary>VacationHours. </summary>
		VacationHours,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Employee. </summary>
	public partial class EmployeeRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and EmployeeEntity over the 1:n relation they have, using the relation between the fields: Employee.EmployeeID - Employee.ManagerID</summary>
		public virtual IEntityRelation EmployeeEntityUsingManagerID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Manages", true, new[] { EmployeeFields.EmployeeID, EmployeeFields.ManagerID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and EmployeeAddressEntity over the 1:n relation they have, using the relation between the fields: Employee.EmployeeID - EmployeeAddress.EmployeeID</summary>
		public virtual IEntityRelation EmployeeAddressEntityUsingEmployeeID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EmployeeAddresses", true, new[] { EmployeeFields.EmployeeID, EmployeeAddressFields.EmployeeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and EmployeeDepartmentHistoryEntity over the 1:n relation they have, using the relation between the fields: Employee.EmployeeID - EmployeeDepartmentHistory.EmployeeID</summary>
		public virtual IEntityRelation EmployeeDepartmentHistoryEntityUsingEmployeeID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EmployeeDepartmentHistories", true, new[] { EmployeeFields.EmployeeID, EmployeeDepartmentHistoryFields.EmployeeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and EmployeePayHistoryEntity over the 1:n relation they have, using the relation between the fields: Employee.EmployeeID - EmployeePayHistory.EmployeeID</summary>
		public virtual IEntityRelation EmployeePayHistoryEntityUsingEmployeeID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EmployeePayHistories", true, new[] { EmployeeFields.EmployeeID, EmployeePayHistoryFields.EmployeeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and JobCandidateEntity over the 1:n relation they have, using the relation between the fields: Employee.EmployeeID - JobCandidate.EmployeeID</summary>
		public virtual IEntityRelation JobCandidateEntityUsingEmployeeID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "JobCandidates", true, new[] { EmployeeFields.EmployeeID, JobCandidateFields.EmployeeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and PurchaseOrderHeaderEntity over the 1:n relation they have, using the relation between the fields: Employee.EmployeeID - PurchaseOrderHeader.EmployeeID</summary>
		public virtual IEntityRelation PurchaseOrderHeaderEntityUsingEmployeeID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "PurchaseOrderHeaders", true, new[] { EmployeeFields.EmployeeID, PurchaseOrderHeaderFields.EmployeeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and EmployeeEntity over the m:1 relation they have, using the relation between the fields: Employee.ManagerID - Employee.EmployeeID</summary>
		public virtual IEntityRelation EmployeeEntityUsingEmployeeIDManagerID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Manager", false, new[] { EmployeeFields.EmployeeID, EmployeeFields.ManagerID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and ContactEntity over the m:1 relation they have, using the relation between the fields: Employee.ContactID - Contact.ContactID</summary>
		public virtual IEntityRelation ContactEntityUsingContactID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Contact", false, new[] { ContactFields.ContactID, EmployeeFields.ContactID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and SalesPersonEntity over the 1:1 relation they have, which is used to build a target per entity hierarchy</summary>		
		internal IEntityRelation RelationToSubTypeSalesPersonEntity
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateHierarchyRelation(true, new[] { EmployeeFields.EmployeeID, SalesPersonFields.EmployeeID }); }
		}

		/// <inheritdoc/>
		public override IEntityRelation GetSubTypeRelation(string subTypeEntityName)
		{
			switch(subTypeEntityName)
			{
				case "SalesPersonEntity":
					return this.RelationToSubTypeSalesPersonEntity;
				default:
					return null;
			}
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticEmployeeRelations
	{
		internal static readonly IEntityRelation EmployeeEntityUsingManagerIDStatic = new EmployeeRelations().EmployeeEntityUsingManagerID;
		internal static readonly IEntityRelation EmployeeAddressEntityUsingEmployeeIDStatic = new EmployeeRelations().EmployeeAddressEntityUsingEmployeeID;
		internal static readonly IEntityRelation EmployeeDepartmentHistoryEntityUsingEmployeeIDStatic = new EmployeeRelations().EmployeeDepartmentHistoryEntityUsingEmployeeID;
		internal static readonly IEntityRelation EmployeePayHistoryEntityUsingEmployeeIDStatic = new EmployeeRelations().EmployeePayHistoryEntityUsingEmployeeID;
		internal static readonly IEntityRelation JobCandidateEntityUsingEmployeeIDStatic = new EmployeeRelations().JobCandidateEntityUsingEmployeeID;
		internal static readonly IEntityRelation PurchaseOrderHeaderEntityUsingEmployeeIDStatic = new EmployeeRelations().PurchaseOrderHeaderEntityUsingEmployeeID;
		internal static readonly IEntityRelation EmployeeEntityUsingEmployeeIDManagerIDStatic = new EmployeeRelations().EmployeeEntityUsingEmployeeIDManagerID;
		internal static readonly IEntityRelation ContactEntityUsingContactIDStatic = new EmployeeRelations().ContactEntityUsingContactID;

		/// <summary>CTor</summary>
		static StaticEmployeeRelations() { }
	}
}
