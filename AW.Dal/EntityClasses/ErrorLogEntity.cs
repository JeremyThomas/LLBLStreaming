//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'ErrorLog'.<br/><br/>MS_Description: Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.<br/></summary>
	[Serializable]
	public partial class ErrorLogEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static ErrorLogEntityStaticMetaData _staticMetaData = new ErrorLogEntityStaticMetaData();
		private static ErrorLogRelations _relationsFactory = new ErrorLogRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class ErrorLogEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public ErrorLogEntityStaticMetaData()
			{
				SetEntityCoreInfo("ErrorLogEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.ErrorLogEntity, typeof(ErrorLogEntity), typeof(ErrorLogEntityFactory), false);
			}
		}

		/// <summary>Static ctor</summary>
		static ErrorLogEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public ErrorLogEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public ErrorLogEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this ErrorLogEntity</param>
		public ErrorLogEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="errorLogID">PK value for ErrorLog which data should be fetched into this ErrorLog object</param>
		public ErrorLogEntity(System.Int32 errorLogID) : this(errorLogID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="errorLogID">PK value for ErrorLog which data should be fetched into this ErrorLog object</param>
		/// <param name="validator">The custom validator object for this ErrorLogEntity</param>
		public ErrorLogEntity(System.Int32 errorLogID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ErrorLogID = errorLogID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected ErrorLogEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The line number at which the error occurred.");
			_fieldsCustomProperties.Add("ErrorLine", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("ErrorLogID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The message text of the error that occurred.");
			_fieldsCustomProperties.Add("ErrorMessage", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The error number of the error that occurred.");
			_fieldsCustomProperties.Add("ErrorNumber", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The name of the stored procedure or trigger where the error occurred.");
			_fieldsCustomProperties.Add("ErrorProcedure", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The severity of the error that occurred.");
			_fieldsCustomProperties.Add("ErrorSeverity", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The state number of the error that occurred.");
			_fieldsCustomProperties.Add("ErrorState", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The date and time at which the error occurred.");
			_fieldsCustomProperties.Add("ErrorTime", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"The user who executed the batch in which the error occurred.");
			_fieldsCustomProperties.Add("UserName", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this ErrorLogEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static ErrorLogRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The ErrorLine property of the Entity ErrorLog<br/><br/>MS_Description: The line number at which the error occurred.<br/>The line number at which the error occurred.</summary>
		/// <remarks>Mapped on  table field: "ErrorLog"."ErrorLine".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ErrorLine
		{
			get { return (Nullable<System.Int32>)GetValue((int)ErrorLogFieldIndex.ErrorLine, false); }
			set	{ SetValue((int)ErrorLogFieldIndex.ErrorLine, value); }
		}

		/// <summary>The ErrorLogID property of the Entity ErrorLog<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "ErrorLog"."ErrorLogID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ErrorLogID
		{
			get { return (System.Int32)GetValue((int)ErrorLogFieldIndex.ErrorLogID, true); }
			set { SetValue((int)ErrorLogFieldIndex.ErrorLogID, value); }		}

		/// <summary>The ErrorMessage property of the Entity ErrorLog<br/><br/>MS_Description: The message text of the error that occurred.<br/>The message text of the error that occurred.</summary>
		/// <remarks>Mapped on  table field: "ErrorLog"."ErrorMessage".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 4000.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String ErrorMessage
		{
			get { return (System.String)GetValue((int)ErrorLogFieldIndex.ErrorMessage, true); }
			set	{ SetValue((int)ErrorLogFieldIndex.ErrorMessage, value); }
		}

		/// <summary>The ErrorNumber property of the Entity ErrorLog<br/><br/>MS_Description: The error number of the error that occurred.<br/>The error number of the error that occurred.</summary>
		/// <remarks>Mapped on  table field: "ErrorLog"."ErrorNumber".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ErrorNumber
		{
			get { return (System.Int32)GetValue((int)ErrorLogFieldIndex.ErrorNumber, true); }
			set	{ SetValue((int)ErrorLogFieldIndex.ErrorNumber, value); }
		}

		/// <summary>The ErrorProcedure property of the Entity ErrorLog<br/><br/>MS_Description: The name of the stored procedure or trigger where the error occurred.<br/>The name of the stored procedure or trigger where the error occurred.</summary>
		/// <remarks>Mapped on  table field: "ErrorLog"."ErrorProcedure".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 126.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ErrorProcedure
		{
			get { return (System.String)GetValue((int)ErrorLogFieldIndex.ErrorProcedure, true); }
			set	{ SetValue((int)ErrorLogFieldIndex.ErrorProcedure, value); }
		}

		/// <summary>The ErrorSeverity property of the Entity ErrorLog<br/><br/>MS_Description: The severity of the error that occurred.<br/>The severity of the error that occurred.</summary>
		/// <remarks>Mapped on  table field: "ErrorLog"."ErrorSeverity".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ErrorSeverity
		{
			get { return (Nullable<System.Int32>)GetValue((int)ErrorLogFieldIndex.ErrorSeverity, false); }
			set	{ SetValue((int)ErrorLogFieldIndex.ErrorSeverity, value); }
		}

		/// <summary>The ErrorState property of the Entity ErrorLog<br/><br/>MS_Description: The state number of the error that occurred.<br/>The state number of the error that occurred.</summary>
		/// <remarks>Mapped on  table field: "ErrorLog"."ErrorState".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ErrorState
		{
			get { return (Nullable<System.Int32>)GetValue((int)ErrorLogFieldIndex.ErrorState, false); }
			set	{ SetValue((int)ErrorLogFieldIndex.ErrorState, value); }
		}

		/// <summary>The ErrorTime property of the Entity ErrorLog<br/><br/>MS_Description: The date and time at which the error occurred.<br/>The date and time at which the error occurred.</summary>
		/// <remarks>Mapped on  table field: "ErrorLog"."ErrorTime".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ErrorTime
		{
			get { return (System.DateTime)GetValue((int)ErrorLogFieldIndex.ErrorTime, true); }
			set	{ SetValue((int)ErrorLogFieldIndex.ErrorTime, value); }
		}

		/// <summary>The UserName property of the Entity ErrorLog<br/><br/>MS_Description: The user who executed the batch in which the error occurred.<br/>The user who executed the batch in which the error occurred.</summary>
		/// <remarks>Mapped on  table field: "ErrorLog"."UserName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 128.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String UserName
		{
			get { return (System.String)GetValue((int)ErrorLogFieldIndex.UserName, true); }
			set	{ SetValue((int)ErrorLogFieldIndex.UserName, value); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum ErrorLogFieldIndex
	{
		///<summary>ErrorLine. </summary>
		ErrorLine,
		///<summary>ErrorLogID. </summary>
		ErrorLogID,
		///<summary>ErrorMessage. </summary>
		ErrorMessage,
		///<summary>ErrorNumber. </summary>
		ErrorNumber,
		///<summary>ErrorProcedure. </summary>
		ErrorProcedure,
		///<summary>ErrorSeverity. </summary>
		ErrorSeverity,
		///<summary>ErrorState. </summary>
		ErrorState,
		///<summary>ErrorTime. </summary>
		ErrorTime,
		///<summary>UserName. </summary>
		UserName,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: ErrorLog. </summary>
	public partial class ErrorLogRelations: RelationFactory
	{

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticErrorLogRelations
	{

		/// <summary>CTor</summary>
		static StaticErrorLogRelations() { }
	}
}
