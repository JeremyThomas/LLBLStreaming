//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Individual'.<br/><br/>MS_Description: Secondary XML index for value.<br/></summary>
	[Serializable]
	public partial class IndividualEntity : CustomerEntity
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private ContactEntity _contact;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static IndividualEntityStaticMetaData _staticMetaData = new IndividualEntityStaticMetaData();
		private static IndividualRelations _relationsFactory = new IndividualRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public new static partial class MemberNames
		{
			/// <summary>Member name Contact</summary>
			public static readonly string Contact = "Contact";
			/// <summary>Member name SalesTerritory</summary>
			public static readonly string SalesTerritory = "SalesTerritory";
			/// <summary>Member name CustomerAddresses</summary>
			public static readonly string CustomerAddresses = "CustomerAddresses";
			/// <summary>Member name SalesOrderHeaders</summary>
			public static readonly string SalesOrderHeaders = "SalesOrderHeaders";
			/// <summary>Member name AddressCollectionViaCustomerAddress</summary>
			public static readonly string AddressCollectionViaCustomerAddress = "AddressCollectionViaCustomerAddress";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class IndividualEntityStaticMetaData : CustomerEntityStaticMetaData
		{
			public IndividualEntityStaticMetaData()
			{
				SetEntityCoreInfo("IndividualEntity", InheritanceHierarchyType.TargetPerEntity, true, (int)AW.Dal.EntityType.IndividualEntity, typeof(IndividualEntity), typeof(IndividualEntityFactory), false);
				AddNavigatorMetaData<IndividualEntity, ContactEntity>("Contact", "Individuals", (a, b) => a._contact = b, a => a._contact, (a, b) => a.Contact = b, AW.Dal.RelationClasses.StaticIndividualRelations.ContactEntityUsingContactIDStatic, ()=>new IndividualRelations().ContactEntityUsingContactID, null, new int[] { (int)IndividualFieldIndex.ContactID }, null, true, (int)AW.Dal.EntityType.ContactEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static IndividualEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public IndividualEntity()
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public IndividualEntity(IEntityFields2 fields) : base(fields)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this IndividualEntity</param>
		public IndividualEntity(IValidator validator) : base(validator)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="customerID">PK value for Individual which data should be fetched into this Individual object</param>
		public IndividualEntity(System.Int32 customerID) : base(customerID)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="customerID">PK value for Individual which data should be fetched into this Individual object</param>
		/// <param name="validator">The custom validator object for this IndividualEntity</param>
		public IndividualEntity(System.Int32 customerID, IValidator validator) : base(customerID, validator)
		{
			InitClassEmpty();
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected IndividualEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Gets a predicateexpression which filters on this entity. Only useful in entity fetches</summary>
		/// <param name="negate">Optional flag to produce a NOT filter, (true), or a normal filter (false, default). </param>
		/// <returns>ready to use predicateexpression</returns>
		public new static IPredicateExpression GetEntityTypeFilter(bool negate=false) { return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter("IndividualEntity", negate); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Contact' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoContact() { return CreateRelationInfoForNavigator("Contact"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Secondary XML index for value.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Identifies the customer in the Contact table. Foreign key to Contact.ContactID.");
			_fieldsCustomProperties.Add("ContactID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.");
			_fieldsCustomProperties.Add("Demographics", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		private void InitClassEmpty()
		{
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public new static IndividualRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public new static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Contact' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathContact { get { return _staticMetaData.GetPrefetchPathElement("Contact", CommonEntityBase.CreateEntityCollection<ContactEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public new static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The ContactID property of the Entity Individual<br/><br/>MS_Description: Identifies the customer in the Contact table. Foreign key to Contact.ContactID.<br/>Identifies the customer in the Contact table. Foreign key to Contact.ContactID.</summary>
		/// <remarks>Mapped on  table field: "Individual"."ContactID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ContactID
		{
			get { return (System.Int32)GetValue((int)IndividualFieldIndex.ContactID, true); }
			set	{ SetValue((int)IndividualFieldIndex.ContactID, value); }
		}

		/// <summary>The Demographics property of the Entity Individual<br/><br/>MS_Description: Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.<br/>Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.</summary>
		/// <remarks>Mapped on  table field: "Individual"."Demographics".<br/>Table field type characteristics (type, precision, scale, length): Xml, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Demographics
		{
			get { return (System.String)GetValue((int)IndividualFieldIndex.Demographics, true); }
			set	{ SetValue((int)IndividualFieldIndex.Demographics, value); }
		}

		/// <summary>Gets / sets related entity of type 'ContactEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ContactEntity Contact
		{
			get { return _contact; }
			set { SetSingleRelatedEntityNavigator(value, "Contact"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum IndividualFieldIndex
	{
		///<summary>AccountNumber. Inherited from Customer</summary>
		AccountNumber,
		///<summary>CustomerID. Inherited from Customer</summary>
		CustomerID_Customer,
		///<summary>CustomerType. Inherited from Customer</summary>
		CustomerType,
		///<summary>ModifiedDate. Inherited from Customer</summary>
		ModifiedDate,
		///<summary>Rowguid. Inherited from Customer</summary>
		Rowguid,
		///<summary>TerritoryID. Inherited from Customer</summary>
		TerritoryID,
		///<summary>CustomerID. </summary>
		CustomerID,
		///<summary>ContactID. </summary>
		ContactID,
		///<summary>Demographics. </summary>
		Demographics,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Individual. </summary>
	public partial class IndividualRelations: CustomerRelations
	{
		/// <summary>Returns a new IEntityRelation object, between IndividualEntity and CustomerAddressEntity over the 1:n relation they have, using the relation between the fields: Individual.CustomerID - CustomerAddress.CustomerID</summary>
		public override IEntityRelation CustomerAddressEntityUsingCustomerID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CustomerAddresses", true, new[] { IndividualFields.CustomerID, CustomerAddressFields.CustomerID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between IndividualEntity and SalesOrderHeaderEntity over the 1:n relation they have, using the relation between the fields: Individual.CustomerID - SalesOrderHeader.CustomerID</summary>
		public override IEntityRelation SalesOrderHeaderEntityUsingCustomerID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesOrderHeaders", true, new[] { IndividualFields.CustomerID, SalesOrderHeaderFields.CustomerID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between IndividualEntity and ContactEntity over the m:1 relation they have, using the relation between the fields: Individual.ContactID - Contact.ContactID</summary>
		public virtual IEntityRelation ContactEntityUsingContactID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Contact", false, new[] { ContactFields.ContactID, IndividualFields.ContactID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between IndividualEntity and SalesTerritoryEntity over the m:1 relation they have, using the relation between the fields: Individual.TerritoryID - SalesTerritory.TerritoryID</summary>
		public override IEntityRelation SalesTerritoryEntityUsingTerritoryID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SalesTerritory", false, new[] { SalesTerritoryFields.TerritoryID, IndividualFields.TerritoryID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between IndividualEntity and CustomerEntity over the 1:1 relation they have, which is used to build a target per entity hierarchy</summary>
		internal IEntityRelation RelationToSuperTypeCustomerEntity
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateHierarchyRelation(false, new[] { CustomerFields.CustomerID, IndividualFields.CustomerID }); }
		}

		/// <inheritdoc/>
		public override IEntityRelation GetSubTypeRelation(string subTypeEntityName)
		{
			return null;
		}
		
		/// <inheritdoc/>
		public override IEntityRelation GetSuperTypeRelation()	{ return this.RelationToSuperTypeCustomerEntity; }

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticIndividualRelations
	{
		internal static readonly IEntityRelation CustomerAddressEntityUsingCustomerIDStatic = new IndividualRelations().CustomerAddressEntityUsingCustomerID;
		internal static readonly IEntityRelation SalesOrderHeaderEntityUsingCustomerIDStatic = new IndividualRelations().SalesOrderHeaderEntityUsingCustomerID;
		internal static readonly IEntityRelation ContactEntityUsingContactIDStatic = new IndividualRelations().ContactEntityUsingContactID;
		internal static readonly IEntityRelation SalesTerritoryEntityUsingTerritoryIDStatic = new IndividualRelations().SalesTerritoryEntityUsingTerritoryID;

		/// <summary>CTor</summary>
		static StaticIndividualRelations() { }
	}
}
