//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'ProductModel'.<br/><br/>MS_Description: Primary XML index.<br/></summary>
	[Serializable]
	public partial class ProductModelEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<ProductEntity> _products;
		private EntityCollection<ProductModelIllustrationEntity> _productModelIllustrations;
		private EntityCollection<ProductModelProductDescriptionCultureEntity> _productModelProductDescriptionCultures;
		private EntityCollection<IllustrationEntity> _illustrations;
		private EntityCollection<ProductDescriptionEntity> _descriptions;
		private EntityCollection<ProductSubcategoryEntity> _subcategories;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static ProductModelEntityStaticMetaData _staticMetaData = new ProductModelEntityStaticMetaData();
		private static ProductModelRelations _relationsFactory = new ProductModelRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Products</summary>
			public static readonly string Products = "Products";
			/// <summary>Member name ProductModelIllustrations</summary>
			public static readonly string ProductModelIllustrations = "ProductModelIllustrations";
			/// <summary>Member name ProductModelProductDescriptionCultures</summary>
			public static readonly string ProductModelProductDescriptionCultures = "ProductModelProductDescriptionCultures";
			/// <summary>Member name Illustrations</summary>
			public static readonly string Illustrations = "Illustrations";
			/// <summary>Member name Descriptions</summary>
			public static readonly string Descriptions = "Descriptions";
			/// <summary>Member name Subcategories</summary>
			public static readonly string Subcategories = "Subcategories";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class ProductModelEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public ProductModelEntityStaticMetaData()
			{
				SetEntityCoreInfo("ProductModelEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.ProductModelEntity, typeof(ProductModelEntity), typeof(ProductModelEntityFactory), false);
				AddNavigatorMetaData<ProductModelEntity, EntityCollection<ProductEntity>>("Products", a => a._products, (a, b) => a._products = b, a => a.Products, () => new ProductModelRelations().ProductEntityUsingProductModelID, typeof(ProductEntity), (int)AW.Dal.EntityType.ProductEntity);
				AddNavigatorMetaData<ProductModelEntity, EntityCollection<ProductModelIllustrationEntity>>("ProductModelIllustrations", a => a._productModelIllustrations, (a, b) => a._productModelIllustrations = b, a => a.ProductModelIllustrations, () => new ProductModelRelations().ProductModelIllustrationEntityUsingProductModelID, typeof(ProductModelIllustrationEntity), (int)AW.Dal.EntityType.ProductModelIllustrationEntity);
				AddNavigatorMetaData<ProductModelEntity, EntityCollection<ProductModelProductDescriptionCultureEntity>>("ProductModelProductDescriptionCultures", a => a._productModelProductDescriptionCultures, (a, b) => a._productModelProductDescriptionCultures = b, a => a.ProductModelProductDescriptionCultures, () => new ProductModelRelations().ProductModelProductDescriptionCultureEntityUsingProductModelID, typeof(ProductModelProductDescriptionCultureEntity), (int)AW.Dal.EntityType.ProductModelProductDescriptionCultureEntity);
				AddNavigatorMetaData<ProductModelEntity, EntityCollection<IllustrationEntity>>("Illustrations", a => a._illustrations, (a, b) => a._illustrations = b, a => a.Illustrations, () => new ProductModelRelations().ProductModelIllustrationEntityUsingProductModelID, () => new ProductModelIllustrationRelations().IllustrationEntityUsingIllustrationID, "ProductModelEntity__", "ProductModelIllustration_", typeof(IllustrationEntity), (int)AW.Dal.EntityType.IllustrationEntity);
				AddNavigatorMetaData<ProductModelEntity, EntityCollection<ProductDescriptionEntity>>("Descriptions", a => a._descriptions, (a, b) => a._descriptions = b, a => a.Descriptions, () => new ProductModelRelations().ProductModelProductDescriptionCultureEntityUsingProductModelID, () => new ProductModelProductDescriptionCultureRelations().ProductDescriptionEntityUsingProductDescriptionID, "ProductModelEntity__", "ProductModelProductDescriptionCulture_", typeof(ProductDescriptionEntity), (int)AW.Dal.EntityType.ProductDescriptionEntity);
				AddNavigatorMetaData<ProductModelEntity, EntityCollection<ProductSubcategoryEntity>>("Subcategories", a => a._subcategories, (a, b) => a._subcategories = b, a => a.Subcategories, () => new ProductModelRelations().ProductEntityUsingProductModelID, () => new ProductRelations().ProductSubcategoryEntityUsingProductSubcategoryID, "ProductModelEntity__", "Product_", typeof(ProductSubcategoryEntity), (int)AW.Dal.EntityType.ProductSubcategoryEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static ProductModelEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public ProductModelEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public ProductModelEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this ProductModelEntity</param>
		public ProductModelEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="productModelID">PK value for ProductModel which data should be fetched into this ProductModel object</param>
		public ProductModelEntity(System.Int32 productModelID) : this(productModelID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="productModelID">PK value for ProductModel which data should be fetched into this ProductModel object</param>
		/// <param name="validator">The custom validator object for this ProductModelEntity</param>
		public ProductModelEntity(System.Int32 productModelID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ProductModelID = productModelID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected ProductModelEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Product' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProducts() { return CreateRelationInfoForNavigator("Products"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ProductModelIllustration' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProductModelIllustrations() { return CreateRelationInfoForNavigator("ProductModelIllustrations"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ProductModelProductDescriptionCulture' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProductModelProductDescriptionCultures() { return CreateRelationInfoForNavigator("ProductModelProductDescriptionCultures"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Illustration' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoIllustrations() { return CreateRelationInfoForNavigator("Illustrations"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ProductDescription' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoDescriptions() { return CreateRelationInfoForNavigator("Descriptions"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ProductSubcategory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSubcategories() { return CreateRelationInfoForNavigator("Subcategories"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Primary XML index.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Detailed product catalog information in xml format.");
			_fieldsCustomProperties.Add("CatalogDescription", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Manufacturing instructions in xml format.");
			_fieldsCustomProperties.Add("Instructions", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Unique nonclustered index.");
			_fieldsCustomProperties.Add("Name", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Primary key for ProductModel records.");
			_fieldsCustomProperties.Add("ProductModelID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");
			_fieldsCustomProperties.Add("Rowguid", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this ProductModelEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static ProductModelRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Product' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProducts { get { return _staticMetaData.GetPrefetchPathElement("Products", CommonEntityBase.CreateEntityCollection<ProductEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProductModelIllustration' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProductModelIllustrations { get { return _staticMetaData.GetPrefetchPathElement("ProductModelIllustrations", CommonEntityBase.CreateEntityCollection<ProductModelIllustrationEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProductModelProductDescriptionCulture' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProductModelProductDescriptionCultures { get { return _staticMetaData.GetPrefetchPathElement("ProductModelProductDescriptionCultures", CommonEntityBase.CreateEntityCollection<ProductModelProductDescriptionCultureEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Illustration' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathIllustrations { get { return _staticMetaData.GetPrefetchPathElement("Illustrations", CommonEntityBase.CreateEntityCollection<IllustrationEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProductDescription' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathDescriptions { get { return _staticMetaData.GetPrefetchPathElement("Descriptions", CommonEntityBase.CreateEntityCollection<ProductDescriptionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProductSubcategory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSubcategories { get { return _staticMetaData.GetPrefetchPathElement("Subcategories", CommonEntityBase.CreateEntityCollection<ProductSubcategoryEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The CatalogDescription property of the Entity ProductModel<br/><br/>MS_Description: Detailed product catalog information in xml format.<br/>Detailed product catalog information in xml format.</summary>
		/// <remarks>Mapped on  table field: "ProductModel"."CatalogDescription".<br/>Table field type characteristics (type, precision, scale, length): Xml, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String CatalogDescription
		{
			get { return (System.String)GetValue((int)ProductModelFieldIndex.CatalogDescription, true); }
			set	{ SetValue((int)ProductModelFieldIndex.CatalogDescription, value); }
		}

		/// <summary>The Instructions property of the Entity ProductModel<br/><br/>MS_Description: Manufacturing instructions in xml format.<br/>Manufacturing instructions in xml format.</summary>
		/// <remarks>Mapped on  table field: "ProductModel"."Instructions".<br/>Table field type characteristics (type, precision, scale, length): Xml, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Instructions
		{
			get { return (System.String)GetValue((int)ProductModelFieldIndex.Instructions, true); }
			set	{ SetValue((int)ProductModelFieldIndex.Instructions, value); }
		}

		/// <summary>The ModifiedDate property of the Entity ProductModel<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "ProductModel"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)ProductModelFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)ProductModelFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The Name property of the Entity ProductModel<br/><br/>MS_Description: Unique nonclustered index.<br/>Unique nonclustered index.</summary>
		/// <remarks>Mapped on  table field: "ProductModel"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)ProductModelFieldIndex.Name, true); }
			set	{ SetValue((int)ProductModelFieldIndex.Name, value); }
		}

		/// <summary>The ProductModelID property of the Entity ProductModel<br/><br/>MS_Description: Primary key for ProductModel records.<br/>Primary key for ProductModel records.</summary>
		/// <remarks>Mapped on  table field: "ProductModel"."ProductModelID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ProductModelID
		{
			get { return (System.Int32)GetValue((int)ProductModelFieldIndex.ProductModelID, true); }
			set { SetValue((int)ProductModelFieldIndex.ProductModelID, value); }		}

		/// <summary>The Rowguid property of the Entity ProductModel<br/><br/>MS_Description: ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.<br/>ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</summary>
		/// <remarks>Mapped on  table field: "ProductModel"."rowguid".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid Rowguid
		{
			get { return (System.Guid)GetValue((int)ProductModelFieldIndex.Rowguid, true); }
			set	{ SetValue((int)ProductModelFieldIndex.Rowguid, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductEntity))]
		public virtual EntityCollection<ProductEntity> Products { get { return GetOrCreateEntityCollection<ProductEntity, ProductEntityFactory>("ProductModel", true, false, ref _products); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductModelIllustrationEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductModelIllustrationEntity))]
		public virtual EntityCollection<ProductModelIllustrationEntity> ProductModelIllustrations { get { return GetOrCreateEntityCollection<ProductModelIllustrationEntity, ProductModelIllustrationEntityFactory>("ProductModel", true, false, ref _productModelIllustrations); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductModelProductDescriptionCultureEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductModelProductDescriptionCultureEntity))]
		public virtual EntityCollection<ProductModelProductDescriptionCultureEntity> ProductModelProductDescriptionCultures { get { return GetOrCreateEntityCollection<ProductModelProductDescriptionCultureEntity, ProductModelProductDescriptionCultureEntityFactory>("ProductModel", true, false, ref _productModelProductDescriptionCultures); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'IllustrationEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(IllustrationEntity))]
		public virtual EntityCollection<IllustrationEntity> Illustrations { get { return GetOrCreateEntityCollection<IllustrationEntity, IllustrationEntityFactory>("Models", false, true, ref _illustrations); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductDescriptionEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductDescriptionEntity))]
		public virtual EntityCollection<ProductDescriptionEntity> Descriptions { get { return GetOrCreateEntityCollection<ProductDescriptionEntity, ProductDescriptionEntityFactory>("Models", false, true, ref _descriptions); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductSubcategoryEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductSubcategoryEntity))]
		public virtual EntityCollection<ProductSubcategoryEntity> Subcategories { get { return GetOrCreateEntityCollection<ProductSubcategoryEntity, ProductSubcategoryEntityFactory>("Models", false, true, ref _subcategories); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum ProductModelFieldIndex
	{
		///<summary>CatalogDescription. </summary>
		CatalogDescription,
		///<summary>Instructions. </summary>
		Instructions,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>Name. </summary>
		Name,
		///<summary>ProductModelID. </summary>
		ProductModelID,
		///<summary>Rowguid. </summary>
		Rowguid,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: ProductModel. </summary>
	public partial class ProductModelRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between ProductModelEntity and ProductEntity over the 1:n relation they have, using the relation between the fields: ProductModel.ProductModelID - Product.ProductModelID</summary>
		public virtual IEntityRelation ProductEntityUsingProductModelID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Products", true, new[] { ProductModelFields.ProductModelID, ProductFields.ProductModelID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between ProductModelEntity and ProductModelIllustrationEntity over the 1:n relation they have, using the relation between the fields: ProductModel.ProductModelID - ProductModelIllustration.ProductModelID</summary>
		public virtual IEntityRelation ProductModelIllustrationEntityUsingProductModelID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ProductModelIllustrations", true, new[] { ProductModelFields.ProductModelID, ProductModelIllustrationFields.ProductModelID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between ProductModelEntity and ProductModelProductDescriptionCultureEntity over the 1:n relation they have, using the relation between the fields: ProductModel.ProductModelID - ProductModelProductDescriptionCulture.ProductModelID</summary>
		public virtual IEntityRelation ProductModelProductDescriptionCultureEntityUsingProductModelID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ProductModelProductDescriptionCultures", true, new[] { ProductModelFields.ProductModelID, ProductModelProductDescriptionCultureFields.ProductModelID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticProductModelRelations
	{
		internal static readonly IEntityRelation ProductEntityUsingProductModelIDStatic = new ProductModelRelations().ProductEntityUsingProductModelID;
		internal static readonly IEntityRelation ProductModelIllustrationEntityUsingProductModelIDStatic = new ProductModelRelations().ProductModelIllustrationEntityUsingProductModelID;
		internal static readonly IEntityRelation ProductModelProductDescriptionCultureEntityUsingProductModelIDStatic = new ProductModelRelations().ProductModelProductDescriptionCultureEntityUsingProductModelID;

		/// <summary>CTor</summary>
		static StaticProductModelRelations() { }
	}
}
