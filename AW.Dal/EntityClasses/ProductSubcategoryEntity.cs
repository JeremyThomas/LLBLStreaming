//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'ProductSubcategory'.<br/><br/>MS_Description: Product subcategories. See ProductCategory table.<br/></summary>
	[Serializable]
	public partial class ProductSubcategoryEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<ProductEntity> _products;
		private EntityCollection<ProductModelEntity> _models;
		private ProductCategoryEntity _productCategory;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static ProductSubcategoryEntityStaticMetaData _staticMetaData = new ProductSubcategoryEntityStaticMetaData();
		private static ProductSubcategoryRelations _relationsFactory = new ProductSubcategoryRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name ProductCategory</summary>
			public static readonly string ProductCategory = "ProductCategory";
			/// <summary>Member name Products</summary>
			public static readonly string Products = "Products";
			/// <summary>Member name Models</summary>
			public static readonly string Models = "Models";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class ProductSubcategoryEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public ProductSubcategoryEntityStaticMetaData()
			{
				SetEntityCoreInfo("ProductSubcategoryEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.ProductSubcategoryEntity, typeof(ProductSubcategoryEntity), typeof(ProductSubcategoryEntityFactory), false);
				AddNavigatorMetaData<ProductSubcategoryEntity, EntityCollection<ProductEntity>>("Products", a => a._products, (a, b) => a._products = b, a => a.Products, () => new ProductSubcategoryRelations().ProductEntityUsingProductSubcategoryID, typeof(ProductEntity), (int)AW.Dal.EntityType.ProductEntity);
				AddNavigatorMetaData<ProductSubcategoryEntity, ProductCategoryEntity>("ProductCategory", "ProductSubcategories", (a, b) => a._productCategory = b, a => a._productCategory, (a, b) => a.ProductCategory = b, AW.Dal.RelationClasses.StaticProductSubcategoryRelations.ProductCategoryEntityUsingProductCategoryIDStatic, ()=>new ProductSubcategoryRelations().ProductCategoryEntityUsingProductCategoryID, null, new int[] { (int)ProductSubcategoryFieldIndex.ProductCategoryID }, null, true, (int)AW.Dal.EntityType.ProductCategoryEntity);
				AddNavigatorMetaData<ProductSubcategoryEntity, EntityCollection<ProductModelEntity>>("Models", a => a._models, (a, b) => a._models = b, a => a.Models, () => new ProductSubcategoryRelations().ProductEntityUsingProductSubcategoryID, () => new ProductRelations().ProductModelEntityUsingProductModelID, "ProductSubcategoryEntity__", "Product_", typeof(ProductModelEntity), (int)AW.Dal.EntityType.ProductModelEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static ProductSubcategoryEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public ProductSubcategoryEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public ProductSubcategoryEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this ProductSubcategoryEntity</param>
		public ProductSubcategoryEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="productSubcategoryID">PK value for ProductSubcategory which data should be fetched into this ProductSubcategory object</param>
		public ProductSubcategoryEntity(System.Int32 productSubcategoryID) : this(productSubcategoryID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="productSubcategoryID">PK value for ProductSubcategory which data should be fetched into this ProductSubcategory object</param>
		/// <param name="validator">The custom validator object for this ProductSubcategoryEntity</param>
		public ProductSubcategoryEntity(System.Int32 productSubcategoryID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ProductSubcategoryID = productSubcategoryID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected ProductSubcategoryEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Product' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProducts() { return CreateRelationInfoForNavigator("Products"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ProductModel' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoModels() { return CreateRelationInfoForNavigator("Models"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'ProductCategory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProductCategory() { return CreateRelationInfoForNavigator("ProductCategory"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Product subcategories. See ProductCategory table.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Unique nonclustered index. Used to support replication samples.");
			_fieldsCustomProperties.Add("Name", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Product category identification number. Foreign key to ProductCategory.ProductCategoryID.");
			_fieldsCustomProperties.Add("ProductCategoryID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("ProductSubcategoryID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");
			_fieldsCustomProperties.Add("Rowguid", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this ProductSubcategoryEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static ProductSubcategoryRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Product' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProducts { get { return _staticMetaData.GetPrefetchPathElement("Products", CommonEntityBase.CreateEntityCollection<ProductEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProductModel' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathModels { get { return _staticMetaData.GetPrefetchPathElement("Models", CommonEntityBase.CreateEntityCollection<ProductModelEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProductCategory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProductCategory { get { return _staticMetaData.GetPrefetchPathElement("ProductCategory", CommonEntityBase.CreateEntityCollection<ProductCategoryEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The ModifiedDate property of the Entity ProductSubcategory<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "ProductSubcategory"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)ProductSubcategoryFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)ProductSubcategoryFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The Name property of the Entity ProductSubcategory<br/><br/>MS_Description: Unique nonclustered index. Used to support replication samples.<br/>Unique nonclustered index. Used to support replication samples.</summary>
		/// <remarks>Mapped on  table field: "ProductSubcategory"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)ProductSubcategoryFieldIndex.Name, true); }
			set	{ SetValue((int)ProductSubcategoryFieldIndex.Name, value); }
		}

		/// <summary>The ProductCategoryID property of the Entity ProductSubcategory<br/><br/>MS_Description: Product category identification number. Foreign key to ProductCategory.ProductCategoryID.<br/>Product category identification number. Foreign key to ProductCategory.ProductCategoryID.</summary>
		/// <remarks>Mapped on  table field: "ProductSubcategory"."ProductCategoryID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ProductCategoryID
		{
			get { return (System.Int32)GetValue((int)ProductSubcategoryFieldIndex.ProductCategoryID, true); }
			set	{ SetValue((int)ProductSubcategoryFieldIndex.ProductCategoryID, value); }
		}

		/// <summary>The ProductSubcategoryID property of the Entity ProductSubcategory<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "ProductSubcategory"."ProductSubcategoryID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 ProductSubcategoryID
		{
			get { return (System.Int32)GetValue((int)ProductSubcategoryFieldIndex.ProductSubcategoryID, true); }
			set { SetValue((int)ProductSubcategoryFieldIndex.ProductSubcategoryID, value); }		}

		/// <summary>The Rowguid property of the Entity ProductSubcategory<br/><br/>MS_Description: ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.<br/>ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</summary>
		/// <remarks>Mapped on  table field: "ProductSubcategory"."rowguid".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid Rowguid
		{
			get { return (System.Guid)GetValue((int)ProductSubcategoryFieldIndex.Rowguid, true); }
			set	{ SetValue((int)ProductSubcategoryFieldIndex.Rowguid, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductEntity))]
		public virtual EntityCollection<ProductEntity> Products { get { return GetOrCreateEntityCollection<ProductEntity, ProductEntityFactory>("ProductSubcategory", true, false, ref _products); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductModelEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductModelEntity))]
		public virtual EntityCollection<ProductModelEntity> Models { get { return GetOrCreateEntityCollection<ProductModelEntity, ProductModelEntityFactory>("Subcategories", false, true, ref _models); } }

		/// <summary>Gets / sets related entity of type 'ProductCategoryEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ProductCategoryEntity ProductCategory
		{
			get { return _productCategory; }
			set { SetSingleRelatedEntityNavigator(value, "ProductCategory"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum ProductSubcategoryFieldIndex
	{
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>Name. </summary>
		Name,
		///<summary>ProductCategoryID. </summary>
		ProductCategoryID,
		///<summary>ProductSubcategoryID. </summary>
		ProductSubcategoryID,
		///<summary>Rowguid. </summary>
		Rowguid,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: ProductSubcategory. </summary>
	public partial class ProductSubcategoryRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between ProductSubcategoryEntity and ProductEntity over the 1:n relation they have, using the relation between the fields: ProductSubcategory.ProductSubcategoryID - Product.ProductSubcategoryID</summary>
		public virtual IEntityRelation ProductEntityUsingProductSubcategoryID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Products", true, new[] { ProductSubcategoryFields.ProductSubcategoryID, ProductFields.ProductSubcategoryID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between ProductSubcategoryEntity and ProductCategoryEntity over the m:1 relation they have, using the relation between the fields: ProductSubcategory.ProductCategoryID - ProductCategory.ProductCategoryID</summary>
		public virtual IEntityRelation ProductCategoryEntityUsingProductCategoryID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "ProductCategory", false, new[] { ProductCategoryFields.ProductCategoryID, ProductSubcategoryFields.ProductCategoryID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticProductSubcategoryRelations
	{
		internal static readonly IEntityRelation ProductEntityUsingProductSubcategoryIDStatic = new ProductSubcategoryRelations().ProductEntityUsingProductSubcategoryID;
		internal static readonly IEntityRelation ProductCategoryEntityUsingProductCategoryIDStatic = new ProductSubcategoryRelations().ProductCategoryEntityUsingProductCategoryID;

		/// <summary>CTor</summary>
		static StaticProductSubcategoryRelations() { }
	}
}
