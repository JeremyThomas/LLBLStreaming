//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'SalesOrderHeader'.<br/><br/>MS_Description: General sales order information.<br/></summary>
	[Serializable]
	public partial class SalesOrderHeaderEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<SalesOrderHistoryEntity> _salesOrderHistory;
		private EntityCollection<SalesOrderDetailEntity> _salesOrderDetails;
		private EntityCollection<SalesOrderHeaderSalesReasonEntity> _salesOrderHeaderSalesReasons;
		private EntityCollection<SalesReasonEntity> _salesReasons;
		private EntityCollection<SpecialOfferProductEntity> _specialOffers;
		private AddressEntity _billingAddress;
		private AddressEntity _shippingAddress;
		private ContactEntity _contact;
		private ShipMethodEntity _shipMethod;
		private CreditCardEntity _creditCard;
		private CurrencyRateEntity _currencyRate;
		private CustomerEntity _customer;
		private CustomerViewRelatedEntity _customerViewRelated;
		private SalesPersonEntity _salesPerson;
		private SalesTerritoryEntity _salesTerritory;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static SalesOrderHeaderEntityStaticMetaData _staticMetaData = new SalesOrderHeaderEntityStaticMetaData();
		private static SalesOrderHeaderRelations _relationsFactory = new SalesOrderHeaderRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name BillingAddress</summary>
			public static readonly string BillingAddress = "BillingAddress";
			/// <summary>Member name ShippingAddress</summary>
			public static readonly string ShippingAddress = "ShippingAddress";
			/// <summary>Member name Contact</summary>
			public static readonly string Contact = "Contact";
			/// <summary>Member name ShipMethod</summary>
			public static readonly string ShipMethod = "ShipMethod";
			/// <summary>Member name CreditCard</summary>
			public static readonly string CreditCard = "CreditCard";
			/// <summary>Member name CurrencyRate</summary>
			public static readonly string CurrencyRate = "CurrencyRate";
			/// <summary>Member name Customer</summary>
			public static readonly string Customer = "Customer";
			/// <summary>Member name CustomerViewRelated</summary>
			public static readonly string CustomerViewRelated = "CustomerViewRelated";
			/// <summary>Member name SalesPerson</summary>
			public static readonly string SalesPerson = "SalesPerson";
			/// <summary>Member name SalesTerritory</summary>
			public static readonly string SalesTerritory = "SalesTerritory";
			/// <summary>Member name SalesOrderHistory</summary>
			public static readonly string SalesOrderHistory = "SalesOrderHistory";
			/// <summary>Member name SalesOrderDetails</summary>
			public static readonly string SalesOrderDetails = "SalesOrderDetails";
			/// <summary>Member name SalesOrderHeaderSalesReasons</summary>
			public static readonly string SalesOrderHeaderSalesReasons = "SalesOrderHeaderSalesReasons";
			/// <summary>Member name SalesReasons</summary>
			public static readonly string SalesReasons = "SalesReasons";
			/// <summary>Member name SpecialOffers</summary>
			public static readonly string SpecialOffers = "SpecialOffers";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class SalesOrderHeaderEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public SalesOrderHeaderEntityStaticMetaData()
			{
				SetEntityCoreInfo("SalesOrderHeaderEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.SalesOrderHeaderEntity, typeof(SalesOrderHeaderEntity), typeof(SalesOrderHeaderEntityFactory), false);
				AddNavigatorMetaData<SalesOrderHeaderEntity, EntityCollection<SalesOrderHistoryEntity>>("SalesOrderHistory", a => a._salesOrderHistory, (a, b) => a._salesOrderHistory = b, a => a.SalesOrderHistory, () => new SalesOrderHeaderRelations().SalesOrderHistoryEntityUsingReferenceOrderID, typeof(SalesOrderHistoryEntity), (int)AW.Dal.EntityType.SalesOrderHistoryEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, EntityCollection<SalesOrderDetailEntity>>("SalesOrderDetails", a => a._salesOrderDetails, (a, b) => a._salesOrderDetails = b, a => a.SalesOrderDetails, () => new SalesOrderHeaderRelations().SalesOrderDetailEntityUsingSalesOrderID, typeof(SalesOrderDetailEntity), (int)AW.Dal.EntityType.SalesOrderDetailEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, EntityCollection<SalesOrderHeaderSalesReasonEntity>>("SalesOrderHeaderSalesReasons", a => a._salesOrderHeaderSalesReasons, (a, b) => a._salesOrderHeaderSalesReasons = b, a => a.SalesOrderHeaderSalesReasons, () => new SalesOrderHeaderRelations().SalesOrderHeaderSalesReasonEntityUsingSalesOrderID, typeof(SalesOrderHeaderSalesReasonEntity), (int)AW.Dal.EntityType.SalesOrderHeaderSalesReasonEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, AddressEntity>("BillingAddress", "SalesOrderHeaders", (a, b) => a._billingAddress = b, a => a._billingAddress, (a, b) => a.BillingAddress = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderRelations.AddressEntityUsingBillToAddressIDStatic, ()=>new SalesOrderHeaderRelations().AddressEntityUsingBillToAddressID, null, new int[] { (int)SalesOrderHeaderFieldIndex.BillToAddressID }, null, true, (int)AW.Dal.EntityType.AddressEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, AddressEntity>("ShippingAddress", "SalesOrderHeadersShipped", (a, b) => a._shippingAddress = b, a => a._shippingAddress, (a, b) => a.ShippingAddress = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderRelations.AddressEntityUsingShipToAddressIDStatic, ()=>new SalesOrderHeaderRelations().AddressEntityUsingShipToAddressID, null, new int[] { (int)SalesOrderHeaderFieldIndex.ShipToAddressID }, null, true, (int)AW.Dal.EntityType.AddressEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, ContactEntity>("Contact", "SalesOrderHeaders", (a, b) => a._contact = b, a => a._contact, (a, b) => a.Contact = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderRelations.ContactEntityUsingContactIDStatic, ()=>new SalesOrderHeaderRelations().ContactEntityUsingContactID, null, new int[] { (int)SalesOrderHeaderFieldIndex.ContactID }, null, true, (int)AW.Dal.EntityType.ContactEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, ShipMethodEntity>("ShipMethod", "SalesOrderHeaders", (a, b) => a._shipMethod = b, a => a._shipMethod, (a, b) => a.ShipMethod = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderRelations.ShipMethodEntityUsingShipMethodIDStatic, ()=>new SalesOrderHeaderRelations().ShipMethodEntityUsingShipMethodID, null, new int[] { (int)SalesOrderHeaderFieldIndex.ShipMethodID }, null, true, (int)AW.Dal.EntityType.ShipMethodEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, CreditCardEntity>("CreditCard", "SalesOrderHeaders", (a, b) => a._creditCard = b, a => a._creditCard, (a, b) => a.CreditCard = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderRelations.CreditCardEntityUsingCreditCardIDStatic, ()=>new SalesOrderHeaderRelations().CreditCardEntityUsingCreditCardID, null, new int[] { (int)SalesOrderHeaderFieldIndex.CreditCardID }, null, true, (int)AW.Dal.EntityType.CreditCardEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, CurrencyRateEntity>("CurrencyRate", "SalesOrderHeaders", (a, b) => a._currencyRate = b, a => a._currencyRate, (a, b) => a.CurrencyRate = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderRelations.CurrencyRateEntityUsingCurrencyRateIDStatic, ()=>new SalesOrderHeaderRelations().CurrencyRateEntityUsingCurrencyRateID, null, new int[] { (int)SalesOrderHeaderFieldIndex.CurrencyRateID }, null, true, (int)AW.Dal.EntityType.CurrencyRateEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, CustomerEntity>("Customer", "SalesOrderHeaders", (a, b) => a._customer = b, a => a._customer, (a, b) => a.Customer = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderRelations.CustomerEntityUsingCustomerIDStatic, ()=>new SalesOrderHeaderRelations().CustomerEntityUsingCustomerID, null, new int[] { (int)SalesOrderHeaderFieldIndex.CustomerID }, null, true, (int)AW.Dal.EntityType.CustomerEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, CustomerViewRelatedEntity>("CustomerViewRelated", "SalesOrderHeader", (a, b) => a._customerViewRelated = b, a => a._customerViewRelated, (a, b) => a.CustomerViewRelated = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderRelations.CustomerViewRelatedEntityUsingCustomerIDStatic, ()=>new SalesOrderHeaderRelations().CustomerViewRelatedEntityUsingCustomerID, new string[] { "CustomerCity", "CustomerCountry", "CustomerFirstName", "CustomerLastName", "CustomerState", "CustomerZip" }, new int[] { (int)SalesOrderHeaderFieldIndex.CustomerID }, a => a.OnCustomerViewRelatedPropertyChanged, true, (int)AW.Dal.EntityType.CustomerViewRelatedEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, SalesPersonEntity>("SalesPerson", "SalesOrderHeaders", (a, b) => a._salesPerson = b, a => a._salesPerson, (a, b) => a.SalesPerson = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderRelations.SalesPersonEntityUsingSalesPersonIDStatic, ()=>new SalesOrderHeaderRelations().SalesPersonEntityUsingSalesPersonID, null, new int[] { (int)SalesOrderHeaderFieldIndex.SalesPersonID }, null, true, (int)AW.Dal.EntityType.SalesPersonEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, SalesTerritoryEntity>("SalesTerritory", "SalesOrderHeaders", (a, b) => a._salesTerritory = b, a => a._salesTerritory, (a, b) => a.SalesTerritory = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderRelations.SalesTerritoryEntityUsingTerritoryIDStatic, ()=>new SalesOrderHeaderRelations().SalesTerritoryEntityUsingTerritoryID, null, new int[] { (int)SalesOrderHeaderFieldIndex.TerritoryID }, null, true, (int)AW.Dal.EntityType.SalesTerritoryEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, EntityCollection<SalesReasonEntity>>("SalesReasons", a => a._salesReasons, (a, b) => a._salesReasons = b, a => a.SalesReasons, () => new SalesOrderHeaderRelations().SalesOrderHeaderSalesReasonEntityUsingSalesOrderID, () => new SalesOrderHeaderSalesReasonRelations().SalesReasonEntityUsingSalesReasonID, "SalesOrderHeaderEntity__", "SalesOrderHeaderSalesReason_", typeof(SalesReasonEntity), (int)AW.Dal.EntityType.SalesReasonEntity);
				AddNavigatorMetaData<SalesOrderHeaderEntity, EntityCollection<SpecialOfferProductEntity>>("SpecialOffers", a => a._specialOffers, (a, b) => a._specialOffers = b, a => a.SpecialOffers, () => new SalesOrderHeaderRelations().SalesOrderDetailEntityUsingSalesOrderID, () => new SalesOrderDetailRelations().SpecialOfferProductEntityUsingProductIDSpecialOfferID, "SalesOrderHeaderEntity__", "SalesOrderDetail_", typeof(SpecialOfferProductEntity), (int)AW.Dal.EntityType.SpecialOfferProductEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static SalesOrderHeaderEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public SalesOrderHeaderEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public SalesOrderHeaderEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this SalesOrderHeaderEntity</param>
		public SalesOrderHeaderEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="salesOrderID">PK value for SalesOrderHeader which data should be fetched into this SalesOrderHeader object</param>
		public SalesOrderHeaderEntity(System.Int32 salesOrderID) : this(salesOrderID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="salesOrderID">PK value for SalesOrderHeader which data should be fetched into this SalesOrderHeader object</param>
		/// <param name="validator">The custom validator object for this SalesOrderHeaderEntity</param>
		public SalesOrderHeaderEntity(System.Int32 salesOrderID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.SalesOrderID = salesOrderID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected SalesOrderHeaderEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SalesOrderHistory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesOrderHistory() { return CreateRelationInfoForNavigator("SalesOrderHistory"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SalesOrderDetail' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesOrderDetails() { return CreateRelationInfoForNavigator("SalesOrderDetails"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SalesOrderHeaderSalesReason' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesOrderHeaderSalesReasons() { return CreateRelationInfoForNavigator("SalesOrderHeaderSalesReasons"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SalesReason' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesReasons() { return CreateRelationInfoForNavigator("SalesReasons"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SpecialOfferProduct' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSpecialOffers() { return CreateRelationInfoForNavigator("SpecialOffers"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Address' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoBillingAddress() { return CreateRelationInfoForNavigator("BillingAddress"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Address' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoShippingAddress() { return CreateRelationInfoForNavigator("ShippingAddress"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Contact' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoContact() { return CreateRelationInfoForNavigator("Contact"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'ShipMethod' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoShipMethod() { return CreateRelationInfoForNavigator("ShipMethod"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CreditCard' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCreditCard() { return CreateRelationInfoForNavigator("CreditCard"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CurrencyRate' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCurrencyRate() { return CreateRelationInfoForNavigator("CurrencyRate"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Customer' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomer() { return CreateRelationInfoForNavigator("Customer"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CustomerViewRelated' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomerViewRelated() { return CreateRelationInfoForNavigator("CustomerViewRelated"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'SalesPerson' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesPerson() { return CreateRelationInfoForNavigator("SalesPerson"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'SalesTerritory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesTerritory() { return CreateRelationInfoForNavigator("SalesTerritory"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"General sales order information.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Financial accounting number reference.");
			_fieldsCustomProperties.Add("AccountNumber", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Customer billing address. Foreign key to Address.AddressID.");
			_fieldsCustomProperties.Add("BillToAddressID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Sales representative comments.");
			_fieldsCustomProperties.Add("Comment", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Customer contact identification number. Foreign key to Contact.ContactID.");
			_fieldsCustomProperties.Add("ContactID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Approval code provided by the credit card company.");
			_fieldsCustomProperties.Add("CreditCardApprovalCode", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Credit card identification number. Foreign key to CreditCard.CreditCardID.");
			_fieldsCustomProperties.Add("CreditCardID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.");
			_fieldsCustomProperties.Add("CurrencyRateID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Customer identification number. Foreign key to Customer.CustomerID.");
			_fieldsCustomProperties.Add("CustomerID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date the order is due to the customer.");
			_fieldsCustomProperties.Add("DueDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Shipping cost.");
			_fieldsCustomProperties.Add("Freight", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"0 = Order placed by sales person. 1 = Order placed online by customer.");
			_fieldsCustomProperties.Add("OnlineOrderFlag", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Unique nonclustered index.");
			_fieldsCustomProperties.Add("OrderDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Customer purchase order number reference. ");
			_fieldsCustomProperties.Add("PurchaseOrderNumber", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Incremental number to track changes to the sales order over time.");
			_fieldsCustomProperties.Add("RevisionNumber", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");
			_fieldsCustomProperties.Add("Rowguid", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("SalesOrderID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Unique sales order identification number.");
			_fieldsCustomProperties.Add("SalesOrderNumber", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.");
			_fieldsCustomProperties.Add("SalesPersonID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Nonclustered index.");
			_fieldsCustomProperties.Add("ShipDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Shipping method. Foreign key to ShipMethod.ShipMethodID.");
			_fieldsCustomProperties.Add("ShipMethodID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Customer shipping address. Foreign key to Address.AddressID.");
			_fieldsCustomProperties.Add("ShipToAddressID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled");
			_fieldsCustomProperties.Add("Status", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.");
			_fieldsCustomProperties.Add("SubTotal", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Tax amount.");
			_fieldsCustomProperties.Add("TaxAmt", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.");
			_fieldsCustomProperties.Add("TerritoryID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Total due from customer. Computed as Subtotal + TaxAmt + Freight.");
			_fieldsCustomProperties.Add("TotalDue", fieldHashtable);
		}

		/// <summary>Handles property change events of properties in a related entity.</summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnCustomerViewRelatedPropertyChanged( object sender, PropertyChangedEventArgs e )
		{
			switch( e.PropertyName )
			{
				case "City":
					this.OnPropertyChanged("CustomerCity");
					break;
				case "CountryRegionName":
					this.OnPropertyChanged("CustomerCountry");
					break;
				case "FirstName":
					this.OnPropertyChanged("CustomerFirstName");
					break;
				case "LastName":
					this.OnPropertyChanged("CustomerLastName");
					break;
				case "StateProvinceName":
					this.OnPropertyChanged("CustomerState");
					break;
				case "PostalCode":
					this.OnPropertyChanged("CustomerZip");
					break;
			}
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this SalesOrderHeaderEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static SalesOrderHeaderRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesOrderHistory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesOrderHistory { get { return _staticMetaData.GetPrefetchPathElement("SalesOrderHistory", CommonEntityBase.CreateEntityCollection<SalesOrderHistoryEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesOrderDetail' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesOrderDetails { get { return _staticMetaData.GetPrefetchPathElement("SalesOrderDetails", CommonEntityBase.CreateEntityCollection<SalesOrderDetailEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesOrderHeaderSalesReason' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesOrderHeaderSalesReasons { get { return _staticMetaData.GetPrefetchPathElement("SalesOrderHeaderSalesReasons", CommonEntityBase.CreateEntityCollection<SalesOrderHeaderSalesReasonEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesReason' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesReasons { get { return _staticMetaData.GetPrefetchPathElement("SalesReasons", CommonEntityBase.CreateEntityCollection<SalesReasonEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SpecialOfferProduct' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSpecialOffers { get { return _staticMetaData.GetPrefetchPathElement("SpecialOffers", CommonEntityBase.CreateEntityCollection<SpecialOfferProductEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Address' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathBillingAddress { get { return _staticMetaData.GetPrefetchPathElement("BillingAddress", CommonEntityBase.CreateEntityCollection<AddressEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Address' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathShippingAddress { get { return _staticMetaData.GetPrefetchPathElement("ShippingAddress", CommonEntityBase.CreateEntityCollection<AddressEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Contact' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathContact { get { return _staticMetaData.GetPrefetchPathElement("Contact", CommonEntityBase.CreateEntityCollection<ContactEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ShipMethod' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathShipMethod { get { return _staticMetaData.GetPrefetchPathElement("ShipMethod", CommonEntityBase.CreateEntityCollection<ShipMethodEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CreditCard' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCreditCard { get { return _staticMetaData.GetPrefetchPathElement("CreditCard", CommonEntityBase.CreateEntityCollection<CreditCardEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CurrencyRate' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCurrencyRate { get { return _staticMetaData.GetPrefetchPathElement("CurrencyRate", CommonEntityBase.CreateEntityCollection<CurrencyRateEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Customer' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomer { get { return _staticMetaData.GetPrefetchPathElement("Customer", CommonEntityBase.CreateEntityCollection<CustomerEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CustomerViewRelated' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomerViewRelated { get { return _staticMetaData.GetPrefetchPathElement("CustomerViewRelated", CommonEntityBase.CreateEntityCollection<CustomerViewRelatedEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesPerson' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesPerson { get { return _staticMetaData.GetPrefetchPathElement("SalesPerson", CommonEntityBase.CreateEntityCollection<SalesPersonEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesTerritory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesTerritory { get { return _staticMetaData.GetPrefetchPathElement("SalesTerritory", CommonEntityBase.CreateEntityCollection<SalesTerritoryEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The AccountNumber property of the Entity SalesOrderHeader<br/><br/>MS_Description: Financial accounting number reference.<br/>Financial accounting number reference.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."AccountNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AccountNumber
		{
			get { return (System.String)GetValue((int)SalesOrderHeaderFieldIndex.AccountNumber, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.AccountNumber, value); }
		}

		/// <summary>The BillToAddressID property of the Entity SalesOrderHeader<br/><br/>MS_Description: Customer billing address. Foreign key to Address.AddressID.<br/>Customer billing address. Foreign key to Address.AddressID.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."BillToAddressID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 BillToAddressID
		{
			get { return (System.Int32)GetValue((int)SalesOrderHeaderFieldIndex.BillToAddressID, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.BillToAddressID, value); }
		}

		/// <summary>The Comment property of the Entity SalesOrderHeader<br/><br/>MS_Description: Sales representative comments.<br/>Sales representative comments.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."Comment".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 128.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Comment
		{
			get { return (System.String)GetValue((int)SalesOrderHeaderFieldIndex.Comment, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.Comment, value); }
		}

		/// <summary>The ContactID property of the Entity SalesOrderHeader<br/><br/>MS_Description: Customer contact identification number. Foreign key to Contact.ContactID.<br/>Customer contact identification number. Foreign key to Contact.ContactID.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."ContactID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ContactID
		{
			get { return (System.Int32)GetValue((int)SalesOrderHeaderFieldIndex.ContactID, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.ContactID, value); }
		}

		/// <summary>The CreditCardApprovalCode property of the Entity SalesOrderHeader<br/><br/>MS_Description: Approval code provided by the credit card company.<br/>Approval code provided by the credit card company.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."CreditCardApprovalCode".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 15.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String CreditCardApprovalCode
		{
			get { return (System.String)GetValue((int)SalesOrderHeaderFieldIndex.CreditCardApprovalCode, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.CreditCardApprovalCode, value); }
		}

		/// <summary>The CreditCardID property of the Entity SalesOrderHeader<br/><br/>MS_Description: Credit card identification number. Foreign key to CreditCard.CreditCardID.<br/>Credit card identification number. Foreign key to CreditCard.CreditCardID.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."CreditCardID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> CreditCardID
		{
			get { return (Nullable<System.Int32>)GetValue((int)SalesOrderHeaderFieldIndex.CreditCardID, false); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.CreditCardID, value); }
		}

		/// <summary>The CurrencyRateID property of the Entity SalesOrderHeader<br/><br/>MS_Description: Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.<br/>Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."CurrencyRateID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> CurrencyRateID
		{
			get { return (Nullable<System.Int32>)GetValue((int)SalesOrderHeaderFieldIndex.CurrencyRateID, false); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.CurrencyRateID, value); }
		}

		/// <summary>The CustomerID property of the Entity SalesOrderHeader<br/><br/>MS_Description: Customer identification number. Foreign key to Customer.CustomerID.<br/>Customer identification number. Foreign key to Customer.CustomerID.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."CustomerID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 CustomerID
		{
			get { return (System.Int32)GetValue((int)SalesOrderHeaderFieldIndex.CustomerID, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.CustomerID, value); }
		}

		/// <summary>The DueDate property of the Entity SalesOrderHeader<br/><br/>MS_Description: Date the order is due to the customer.<br/>Date the order is due to the customer.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."DueDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DueDate
		{
			get { return (System.DateTime)GetValue((int)SalesOrderHeaderFieldIndex.DueDate, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.DueDate, value); }
		}

		/// <summary>The Freight property of the Entity SalesOrderHeader<br/><br/>MS_Description: Shipping cost.<br/>Shipping cost.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."Freight".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal Freight
		{
			get { return (System.Decimal)GetValue((int)SalesOrderHeaderFieldIndex.Freight, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.Freight, value); }
		}

		/// <summary>The ModifiedDate property of the Entity SalesOrderHeader<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)SalesOrderHeaderFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The OnlineOrderFlag property of the Entity SalesOrderHeader<br/><br/>MS_Description: 0 = Order placed by sales person. 1 = Order placed online by customer.<br/>0 = Order placed by sales person. 1 = Order placed online by customer.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."OnlineOrderFlag".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean OnlineOrderFlag
		{
			get { return (System.Boolean)GetValue((int)SalesOrderHeaderFieldIndex.OnlineOrderFlag, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.OnlineOrderFlag, value); }
		}

		/// <summary>The OrderDate property of the Entity SalesOrderHeader<br/><br/>MS_Description: Unique nonclustered index.<br/>Unique nonclustered index.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."OrderDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime OrderDate
		{
			get { return (System.DateTime)GetValue((int)SalesOrderHeaderFieldIndex.OrderDate, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.OrderDate, value); }
		}

		/// <summary>The PurchaseOrderNumber property of the Entity SalesOrderHeader<br/><br/>MS_Description: Customer purchase order number reference. <br/>Customer purchase order number reference. </summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."PurchaseOrderNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 25.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PurchaseOrderNumber
		{
			get { return (System.String)GetValue((int)SalesOrderHeaderFieldIndex.PurchaseOrderNumber, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.PurchaseOrderNumber, value); }
		}

		/// <summary>The RevisionNumber property of the Entity SalesOrderHeader<br/><br/>MS_Description: Incremental number to track changes to the sales order over time.<br/>Incremental number to track changes to the sales order over time.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."RevisionNumber".<br/>Table field type characteristics (type, precision, scale, length): TinyInt, 3, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Byte RevisionNumber
		{
			get { return (System.Byte)GetValue((int)SalesOrderHeaderFieldIndex.RevisionNumber, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.RevisionNumber, value); }
		}

		/// <summary>The Rowguid property of the Entity SalesOrderHeader<br/><br/>MS_Description: ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.<br/>ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."rowguid".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid Rowguid
		{
			get { return (System.Guid)GetValue((int)SalesOrderHeaderFieldIndex.Rowguid, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.Rowguid, value); }
		}

		/// <summary>The SalesOrderID property of the Entity SalesOrderHeader<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."SalesOrderID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 SalesOrderID
		{
			get { return (System.Int32)GetValue((int)SalesOrderHeaderFieldIndex.SalesOrderID, true); }
			set { SetValue((int)SalesOrderHeaderFieldIndex.SalesOrderID, value); }		}

		/// <summary>The SalesOrderNumber property of the Entity SalesOrderHeader<br/><br/>MS_Description: Unique sales order identification number.<br/>Unique sales order identification number.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."SalesOrderNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 25.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String SalesOrderNumber
		{
			get { return (System.String)GetValue((int)SalesOrderHeaderFieldIndex.SalesOrderNumber, true); }
		}

		/// <summary>The SalesPersonID property of the Entity SalesOrderHeader<br/><br/>MS_Description: Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.<br/>Sales person who created the sales order. Foreign key to SalesPerson.SalePersonID.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."SalesPersonID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> SalesPersonID
		{
			get { return (Nullable<System.Int32>)GetValue((int)SalesOrderHeaderFieldIndex.SalesPersonID, false); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.SalesPersonID, value); }
		}

		/// <summary>The ShipDate property of the Entity SalesOrderHeader<br/><br/>MS_Description: Nonclustered index.<br/>Nonclustered index.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."ShipDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> ShipDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)SalesOrderHeaderFieldIndex.ShipDate, false); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.ShipDate, value); }
		}

		/// <summary>The ShipMethodID property of the Entity SalesOrderHeader<br/><br/>MS_Description: Shipping method. Foreign key to ShipMethod.ShipMethodID.<br/>Shipping method. Foreign key to ShipMethod.ShipMethodID.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."ShipMethodID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ShipMethodID
		{
			get { return (System.Int32)GetValue((int)SalesOrderHeaderFieldIndex.ShipMethodID, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.ShipMethodID, value); }
		}

		/// <summary>The ShipToAddressID property of the Entity SalesOrderHeader<br/><br/>MS_Description: Customer shipping address. Foreign key to Address.AddressID.<br/>Customer shipping address. Foreign key to Address.AddressID.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."ShipToAddressID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ShipToAddressID
		{
			get { return (System.Int32)GetValue((int)SalesOrderHeaderFieldIndex.ShipToAddressID, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.ShipToAddressID, value); }
		}

		/// <summary>The Status property of the Entity SalesOrderHeader<br/><br/>MS_Description: Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled<br/>Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."Status".<br/>Table field type characteristics (type, precision, scale, length): TinyInt, 3, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual AW.Data.OrderStatus Status
		{
			get { return (AW.Data.OrderStatus)GetValue((int)SalesOrderHeaderFieldIndex.Status, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.Status, value); }
		}

		/// <summary>The SubTotal property of the Entity SalesOrderHeader<br/><br/>MS_Description: Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.<br/>Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."SubTotal".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal SubTotal
		{
			get { return (System.Decimal)GetValue((int)SalesOrderHeaderFieldIndex.SubTotal, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.SubTotal, value); }
		}

		/// <summary>The TaxAmt property of the Entity SalesOrderHeader<br/><br/>MS_Description: Tax amount.<br/>Tax amount.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."TaxAmt".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal TaxAmt
		{
			get { return (System.Decimal)GetValue((int)SalesOrderHeaderFieldIndex.TaxAmt, true); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.TaxAmt, value); }
		}

		/// <summary>The TerritoryID property of the Entity SalesOrderHeader<br/><br/>MS_Description: Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.<br/>Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."TerritoryID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> TerritoryID
		{
			get { return (Nullable<System.Int32>)GetValue((int)SalesOrderHeaderFieldIndex.TerritoryID, false); }
			set	{ SetValue((int)SalesOrderHeaderFieldIndex.TerritoryID, value); }
		}

		/// <summary>The TotalDue property of the Entity SalesOrderHeader<br/><br/>MS_Description: Total due from customer. Computed as Subtotal + TaxAmt + Freight.<br/>Total due from customer. Computed as Subtotal + TaxAmt + Freight.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeader"."TotalDue".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal TotalDue
		{
			get { return (System.Decimal)GetValue((int)SalesOrderHeaderFieldIndex.TotalDue, true); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'SalesOrderHistoryEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SalesOrderHistoryEntity))]
		public virtual EntityCollection<SalesOrderHistoryEntity> SalesOrderHistory { get { return GetOrCreateEntityCollection<SalesOrderHistoryEntity, SalesOrderHistoryEntityFactory>("SalesOrders", true, false, ref _salesOrderHistory); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SalesOrderDetailEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SalesOrderDetailEntity))]
		public virtual EntityCollection<SalesOrderDetailEntity> SalesOrderDetails { get { return GetOrCreateEntityCollection<SalesOrderDetailEntity, SalesOrderDetailEntityFactory>("SalesOrderHeader", true, false, ref _salesOrderDetails); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SalesOrderHeaderSalesReasonEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SalesOrderHeaderSalesReasonEntity))]
		public virtual EntityCollection<SalesOrderHeaderSalesReasonEntity> SalesOrderHeaderSalesReasons { get { return GetOrCreateEntityCollection<SalesOrderHeaderSalesReasonEntity, SalesOrderHeaderSalesReasonEntityFactory>("SalesOrderHeader", true, false, ref _salesOrderHeaderSalesReasons); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SalesReasonEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SalesReasonEntity))]
		public virtual EntityCollection<SalesReasonEntity> SalesReasons { get { return GetOrCreateEntityCollection<SalesReasonEntity, SalesReasonEntityFactory>("SalesOrders", false, true, ref _salesReasons); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SpecialOfferProductEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SpecialOfferProductEntity))]
		public virtual EntityCollection<SpecialOfferProductEntity> SpecialOffers { get { return GetOrCreateEntityCollection<SpecialOfferProductEntity, SpecialOfferProductEntityFactory>("SalesOrders", false, true, ref _specialOffers); } }

		/// <summary>Gets / sets related entity of type 'AddressEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual AddressEntity BillingAddress
		{
			get { return _billingAddress; }
			set { SetSingleRelatedEntityNavigator(value, "BillingAddress"); }
		}

		/// <summary>Gets / sets related entity of type 'AddressEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual AddressEntity ShippingAddress
		{
			get { return _shippingAddress; }
			set { SetSingleRelatedEntityNavigator(value, "ShippingAddress"); }
		}

		/// <summary>Gets / sets related entity of type 'ContactEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ContactEntity Contact
		{
			get { return _contact; }
			set { SetSingleRelatedEntityNavigator(value, "Contact"); }
		}

		/// <summary>Gets / sets related entity of type 'ShipMethodEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ShipMethodEntity ShipMethod
		{
			get { return _shipMethod; }
			set { SetSingleRelatedEntityNavigator(value, "ShipMethod"); }
		}

		/// <summary>Gets / sets related entity of type 'CreditCardEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CreditCardEntity CreditCard
		{
			get { return _creditCard; }
			set { SetSingleRelatedEntityNavigator(value, "CreditCard"); }
		}

		/// <summary>Gets / sets related entity of type 'CurrencyRateEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CurrencyRateEntity CurrencyRate
		{
			get { return _currencyRate; }
			set { SetSingleRelatedEntityNavigator(value, "CurrencyRate"); }
		}

		/// <summary>Gets / sets related entity of type 'CustomerEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CustomerEntity Customer
		{
			get { return _customer; }
			set { SetSingleRelatedEntityNavigator(value, "Customer"); }
		}

		/// <summary>Gets / sets related entity of type 'CustomerViewRelatedEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CustomerViewRelatedEntity CustomerViewRelated
		{
			get { return _customerViewRelated; }
			set { SetSingleRelatedEntityNavigator(value, "CustomerViewRelated"); }
		}

		/// <summary>Gets / sets related entity of type 'SalesPersonEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual SalesPersonEntity SalesPerson
		{
			get { return _salesPerson; }
			set { SetSingleRelatedEntityNavigator(value, "SalesPerson"); }
		}

		/// <summary>Gets / sets related entity of type 'SalesTerritoryEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual SalesTerritoryEntity SalesTerritory
		{
			get { return _salesTerritory; }
			set { SetSingleRelatedEntityNavigator(value, "SalesTerritory"); }
		}
 
		/// <summary>Gets / Sets the value of the related field this.CustomerViewRelated.City.<br/><br/></summary>
		public virtual System.String CustomerCity
		{
			get { return this.CustomerViewRelated==null ? (System.String)TypeDefaultValue.GetDefaultValue(typeof(System.String)) : this.CustomerViewRelated.City; }
			set
			{
				CustomerViewRelatedEntity relatedEntity = this.CustomerViewRelated;
				if(relatedEntity!=null)
				{
					relatedEntity.City = value;
				}				
			}
		} 
		/// <summary>Gets / Sets the value of the related field this.CustomerViewRelated.CountryRegionName.<br/><br/></summary>
		public virtual System.String CustomerCountry
		{
			get { return this.CustomerViewRelated==null ? (System.String)TypeDefaultValue.GetDefaultValue(typeof(System.String)) : this.CustomerViewRelated.CountryRegionName; }
			set
			{
				CustomerViewRelatedEntity relatedEntity = this.CustomerViewRelated;
				if(relatedEntity!=null)
				{
					relatedEntity.CountryRegionName = value;
				}				
			}
		} 
		/// <summary>Gets / Sets the value of the related field this.CustomerViewRelated.FirstName.<br/><br/></summary>
		public virtual System.String CustomerFirstName
		{
			get { return this.CustomerViewRelated==null ? (System.String)TypeDefaultValue.GetDefaultValue(typeof(System.String)) : this.CustomerViewRelated.FirstName; }
			set
			{
				CustomerViewRelatedEntity relatedEntity = this.CustomerViewRelated;
				if(relatedEntity!=null)
				{
					relatedEntity.FirstName = value;
				}				
			}
		} 
		/// <summary>Gets / Sets the value of the related field this.CustomerViewRelated.LastName.<br/><br/></summary>
		public virtual System.String CustomerLastName
		{
			get { return this.CustomerViewRelated==null ? (System.String)TypeDefaultValue.GetDefaultValue(typeof(System.String)) : this.CustomerViewRelated.LastName; }
			set
			{
				CustomerViewRelatedEntity relatedEntity = this.CustomerViewRelated;
				if(relatedEntity!=null)
				{
					relatedEntity.LastName = value;
				}				
			}
		} 
		/// <summary>Gets / Sets the value of the related field this.CustomerViewRelated.StateProvinceName.<br/><br/></summary>
		public virtual System.String CustomerState
		{
			get { return this.CustomerViewRelated==null ? (System.String)TypeDefaultValue.GetDefaultValue(typeof(System.String)) : this.CustomerViewRelated.StateProvinceName; }
			set
			{
				CustomerViewRelatedEntity relatedEntity = this.CustomerViewRelated;
				if(relatedEntity!=null)
				{
					relatedEntity.StateProvinceName = value;
				}				
			}
		} 
		/// <summary>Gets / Sets the value of the related field this.CustomerViewRelated.PostalCode.<br/><br/></summary>
		public virtual System.String CustomerZip
		{
			get { return this.CustomerViewRelated==null ? (System.String)TypeDefaultValue.GetDefaultValue(typeof(System.String)) : this.CustomerViewRelated.PostalCode; }
			set
			{
				CustomerViewRelatedEntity relatedEntity = this.CustomerViewRelated;
				if(relatedEntity!=null)
				{
					relatedEntity.PostalCode = value;
				}				
			}
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum SalesOrderHeaderFieldIndex
	{
		///<summary>AccountNumber. </summary>
		AccountNumber,
		///<summary>BillToAddressID. </summary>
		BillToAddressID,
		///<summary>Comment. </summary>
		Comment,
		///<summary>ContactID. </summary>
		ContactID,
		///<summary>CreditCardApprovalCode. </summary>
		CreditCardApprovalCode,
		///<summary>CreditCardID. </summary>
		CreditCardID,
		///<summary>CurrencyRateID. </summary>
		CurrencyRateID,
		///<summary>CustomerID. </summary>
		CustomerID,
		///<summary>DueDate. </summary>
		DueDate,
		///<summary>Freight. </summary>
		Freight,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>OnlineOrderFlag. </summary>
		OnlineOrderFlag,
		///<summary>OrderDate. </summary>
		OrderDate,
		///<summary>PurchaseOrderNumber. </summary>
		PurchaseOrderNumber,
		///<summary>RevisionNumber. </summary>
		RevisionNumber,
		///<summary>Rowguid. </summary>
		Rowguid,
		///<summary>SalesOrderID. </summary>
		SalesOrderID,
		///<summary>SalesOrderNumber. </summary>
		SalesOrderNumber,
		///<summary>SalesPersonID. </summary>
		SalesPersonID,
		///<summary>ShipDate. </summary>
		ShipDate,
		///<summary>ShipMethodID. </summary>
		ShipMethodID,
		///<summary>ShipToAddressID. </summary>
		ShipToAddressID,
		///<summary>Status. </summary>
		Status,
		///<summary>SubTotal. </summary>
		SubTotal,
		///<summary>TaxAmt. </summary>
		TaxAmt,
		///<summary>TerritoryID. </summary>
		TerritoryID,
		///<summary>TotalDue. </summary>
		TotalDue,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: SalesOrderHeader. </summary>
	public partial class SalesOrderHeaderRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and SalesOrderHistoryEntity over the 1:n relation they have, using the relation between the fields: SalesOrderHeader.SalesOrderID - SalesOrderHistory.ReferenceOrderID</summary>
		public virtual IEntityRelation SalesOrderHistoryEntityUsingReferenceOrderID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesOrderHistory", true, new[] { SalesOrderHeaderFields.SalesOrderID, SalesOrderHistoryFields.ReferenceOrderID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and SalesOrderDetailEntity over the 1:n relation they have, using the relation between the fields: SalesOrderHeader.SalesOrderID - SalesOrderDetail.SalesOrderID</summary>
		public virtual IEntityRelation SalesOrderDetailEntityUsingSalesOrderID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesOrderDetails", true, new[] { SalesOrderHeaderFields.SalesOrderID, SalesOrderDetailFields.SalesOrderID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and SalesOrderHeaderSalesReasonEntity over the 1:n relation they have, using the relation between the fields: SalesOrderHeader.SalesOrderID - SalesOrderHeaderSalesReason.SalesOrderID</summary>
		public virtual IEntityRelation SalesOrderHeaderSalesReasonEntityUsingSalesOrderID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesOrderHeaderSalesReasons", true, new[] { SalesOrderHeaderFields.SalesOrderID, SalesOrderHeaderSalesReasonFields.SalesOrderID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and AddressEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeader.BillToAddressID - Address.AddressID</summary>
		public virtual IEntityRelation AddressEntityUsingBillToAddressID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "BillingAddress", false, new[] { AddressFields.AddressID, SalesOrderHeaderFields.BillToAddressID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and AddressEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeader.ShipToAddressID - Address.AddressID</summary>
		public virtual IEntityRelation AddressEntityUsingShipToAddressID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "ShippingAddress", false, new[] { AddressFields.AddressID, SalesOrderHeaderFields.ShipToAddressID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and ContactEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeader.ContactID - Contact.ContactID</summary>
		public virtual IEntityRelation ContactEntityUsingContactID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Contact", false, new[] { ContactFields.ContactID, SalesOrderHeaderFields.ContactID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and ShipMethodEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeader.ShipMethodID - ShipMethod.ShipMethodID</summary>
		public virtual IEntityRelation ShipMethodEntityUsingShipMethodID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "ShipMethod", false, new[] { ShipMethodFields.ShipMethodID, SalesOrderHeaderFields.ShipMethodID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and CreditCardEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeader.CreditCardID - CreditCard.CreditCardID</summary>
		public virtual IEntityRelation CreditCardEntityUsingCreditCardID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CreditCard", false, new[] { CreditCardFields.CreditCardID, SalesOrderHeaderFields.CreditCardID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and CurrencyRateEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeader.CurrencyRateID - CurrencyRate.CurrencyRateID</summary>
		public virtual IEntityRelation CurrencyRateEntityUsingCurrencyRateID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CurrencyRate", false, new[] { CurrencyRateFields.CurrencyRateID, SalesOrderHeaderFields.CurrencyRateID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and CustomerEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeader.CustomerID - Customer.CustomerID</summary>
		public virtual IEntityRelation CustomerEntityUsingCustomerID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Customer", false, new[] { CustomerFields.CustomerID, SalesOrderHeaderFields.CustomerID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and CustomerViewRelatedEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeader.CustomerID - CustomerViewRelated.CustomerId</summary>
		public virtual IEntityRelation CustomerViewRelatedEntityUsingCustomerID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CustomerViewRelated", false, new[] { CustomerViewRelatedFields.CustomerId, SalesOrderHeaderFields.CustomerID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and SalesPersonEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeader.SalesPersonID - SalesPerson.EmployeeID</summary>
		public virtual IEntityRelation SalesPersonEntityUsingSalesPersonID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SalesPerson", false, new[] { SalesPersonFields.EmployeeID, SalesOrderHeaderFields.SalesPersonID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderEntity and SalesTerritoryEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeader.TerritoryID - SalesTerritory.TerritoryID</summary>
		public virtual IEntityRelation SalesTerritoryEntityUsingTerritoryID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SalesTerritory", false, new[] { SalesTerritoryFields.TerritoryID, SalesOrderHeaderFields.TerritoryID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticSalesOrderHeaderRelations
	{
		internal static readonly IEntityRelation SalesOrderHistoryEntityUsingReferenceOrderIDStatic = new SalesOrderHeaderRelations().SalesOrderHistoryEntityUsingReferenceOrderID;
		internal static readonly IEntityRelation SalesOrderDetailEntityUsingSalesOrderIDStatic = new SalesOrderHeaderRelations().SalesOrderDetailEntityUsingSalesOrderID;
		internal static readonly IEntityRelation SalesOrderHeaderSalesReasonEntityUsingSalesOrderIDStatic = new SalesOrderHeaderRelations().SalesOrderHeaderSalesReasonEntityUsingSalesOrderID;
		internal static readonly IEntityRelation AddressEntityUsingBillToAddressIDStatic = new SalesOrderHeaderRelations().AddressEntityUsingBillToAddressID;
		internal static readonly IEntityRelation AddressEntityUsingShipToAddressIDStatic = new SalesOrderHeaderRelations().AddressEntityUsingShipToAddressID;
		internal static readonly IEntityRelation ContactEntityUsingContactIDStatic = new SalesOrderHeaderRelations().ContactEntityUsingContactID;
		internal static readonly IEntityRelation ShipMethodEntityUsingShipMethodIDStatic = new SalesOrderHeaderRelations().ShipMethodEntityUsingShipMethodID;
		internal static readonly IEntityRelation CreditCardEntityUsingCreditCardIDStatic = new SalesOrderHeaderRelations().CreditCardEntityUsingCreditCardID;
		internal static readonly IEntityRelation CurrencyRateEntityUsingCurrencyRateIDStatic = new SalesOrderHeaderRelations().CurrencyRateEntityUsingCurrencyRateID;
		internal static readonly IEntityRelation CustomerEntityUsingCustomerIDStatic = new SalesOrderHeaderRelations().CustomerEntityUsingCustomerID;
		internal static readonly IEntityRelation CustomerViewRelatedEntityUsingCustomerIDStatic = new SalesOrderHeaderRelations().CustomerViewRelatedEntityUsingCustomerID;
		internal static readonly IEntityRelation SalesPersonEntityUsingSalesPersonIDStatic = new SalesOrderHeaderRelations().SalesPersonEntityUsingSalesPersonID;
		internal static readonly IEntityRelation SalesTerritoryEntityUsingTerritoryIDStatic = new SalesOrderHeaderRelations().SalesTerritoryEntityUsingTerritoryID;

		/// <summary>CTor</summary>
		static StaticSalesOrderHeaderRelations() { }
	}
}
