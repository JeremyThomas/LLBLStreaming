//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'SalesOrderHeaderSalesReason'.<br/><br/>MS_Description: Cross-reference table mapping sales orders to sales reason codes.<br/></summary>
	[Serializable]
	public partial class SalesOrderHeaderSalesReasonEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private SalesOrderHeaderEntity _salesOrderHeader;
		private SalesReasonEntity _salesReason;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static SalesOrderHeaderSalesReasonEntityStaticMetaData _staticMetaData = new SalesOrderHeaderSalesReasonEntityStaticMetaData();
		private static SalesOrderHeaderSalesReasonRelations _relationsFactory = new SalesOrderHeaderSalesReasonRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name SalesOrderHeader</summary>
			public static readonly string SalesOrderHeader = "SalesOrderHeader";
			/// <summary>Member name SalesReason</summary>
			public static readonly string SalesReason = "SalesReason";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class SalesOrderHeaderSalesReasonEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public SalesOrderHeaderSalesReasonEntityStaticMetaData()
			{
				SetEntityCoreInfo("SalesOrderHeaderSalesReasonEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.SalesOrderHeaderSalesReasonEntity, typeof(SalesOrderHeaderSalesReasonEntity), typeof(SalesOrderHeaderSalesReasonEntityFactory), false);
				AddNavigatorMetaData<SalesOrderHeaderSalesReasonEntity, SalesOrderHeaderEntity>("SalesOrderHeader", "SalesOrderHeaderSalesReasons", (a, b) => a._salesOrderHeader = b, a => a._salesOrderHeader, (a, b) => a.SalesOrderHeader = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderSalesReasonRelations.SalesOrderHeaderEntityUsingSalesOrderIDStatic, ()=>new SalesOrderHeaderSalesReasonRelations().SalesOrderHeaderEntityUsingSalesOrderID, null, new int[] { (int)SalesOrderHeaderSalesReasonFieldIndex.SalesOrderID }, null, true, (int)AW.Dal.EntityType.SalesOrderHeaderEntity);
				AddNavigatorMetaData<SalesOrderHeaderSalesReasonEntity, SalesReasonEntity>("SalesReason", "SalesOrderHeaderSalesReasons", (a, b) => a._salesReason = b, a => a._salesReason, (a, b) => a.SalesReason = b, AW.Dal.RelationClasses.StaticSalesOrderHeaderSalesReasonRelations.SalesReasonEntityUsingSalesReasonIDStatic, ()=>new SalesOrderHeaderSalesReasonRelations().SalesReasonEntityUsingSalesReasonID, null, new int[] { (int)SalesOrderHeaderSalesReasonFieldIndex.SalesReasonID }, null, true, (int)AW.Dal.EntityType.SalesReasonEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static SalesOrderHeaderSalesReasonEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public SalesOrderHeaderSalesReasonEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public SalesOrderHeaderSalesReasonEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this SalesOrderHeaderSalesReasonEntity</param>
		public SalesOrderHeaderSalesReasonEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="salesOrderID">PK value for SalesOrderHeaderSalesReason which data should be fetched into this SalesOrderHeaderSalesReason object</param>
		/// <param name="salesReasonID">PK value for SalesOrderHeaderSalesReason which data should be fetched into this SalesOrderHeaderSalesReason object</param>
		public SalesOrderHeaderSalesReasonEntity(System.Int32 salesOrderID, System.Int32 salesReasonID) : this(salesOrderID, salesReasonID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="salesOrderID">PK value for SalesOrderHeaderSalesReason which data should be fetched into this SalesOrderHeaderSalesReason object</param>
		/// <param name="salesReasonID">PK value for SalesOrderHeaderSalesReason which data should be fetched into this SalesOrderHeaderSalesReason object</param>
		/// <param name="validator">The custom validator object for this SalesOrderHeaderSalesReasonEntity</param>
		public SalesOrderHeaderSalesReasonEntity(System.Int32 salesOrderID, System.Int32 salesReasonID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.SalesOrderID = salesOrderID;
			this.SalesReasonID = salesReasonID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected SalesOrderHeaderSalesReasonEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'SalesOrderHeader' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesOrderHeader() { return CreateRelationInfoForNavigator("SalesOrderHeader"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'SalesReason' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesReason() { return CreateRelationInfoForNavigator("SalesReason"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Cross-reference table mapping sales orders to sales reason codes.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("SalesOrderID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Primary key. Foreign key to SalesReason.SalesReasonID.");
			_fieldsCustomProperties.Add("SalesReasonID", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this SalesOrderHeaderSalesReasonEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static SalesOrderHeaderSalesReasonRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesOrderHeader' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesOrderHeader { get { return _staticMetaData.GetPrefetchPathElement("SalesOrderHeader", CommonEntityBase.CreateEntityCollection<SalesOrderHeaderEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesReason' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesReason { get { return _staticMetaData.GetPrefetchPathElement("SalesReason", CommonEntityBase.CreateEntityCollection<SalesReasonEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The ModifiedDate property of the Entity SalesOrderHeaderSalesReason<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeaderSalesReason"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)SalesOrderHeaderSalesReasonFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)SalesOrderHeaderSalesReasonFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The SalesOrderID property of the Entity SalesOrderHeaderSalesReason<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeaderSalesReason"."SalesOrderID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 SalesOrderID
		{
			get { return (System.Int32)GetValue((int)SalesOrderHeaderSalesReasonFieldIndex.SalesOrderID, true); }
			set	{ SetValue((int)SalesOrderHeaderSalesReasonFieldIndex.SalesOrderID, value); }
		}

		/// <summary>The SalesReasonID property of the Entity SalesOrderHeaderSalesReason<br/><br/>MS_Description: Primary key. Foreign key to SalesReason.SalesReasonID.<br/>Primary key. Foreign key to SalesReason.SalesReasonID.</summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeaderSalesReason"."SalesReasonID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 SalesReasonID
		{
			get { return (System.Int32)GetValue((int)SalesOrderHeaderSalesReasonFieldIndex.SalesReasonID, true); }
			set	{ SetValue((int)SalesOrderHeaderSalesReasonFieldIndex.SalesReasonID, value); }
		}

		/// <summary>Gets / sets related entity of type 'SalesOrderHeaderEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual SalesOrderHeaderEntity SalesOrderHeader
		{
			get { return _salesOrderHeader; }
			set { SetSingleRelatedEntityNavigator(value, "SalesOrderHeader"); }
		}

		/// <summary>Gets / sets related entity of type 'SalesReasonEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual SalesReasonEntity SalesReason
		{
			get { return _salesReason; }
			set { SetSingleRelatedEntityNavigator(value, "SalesReason"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum SalesOrderHeaderSalesReasonFieldIndex
	{
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>SalesOrderID. </summary>
		SalesOrderID,
		///<summary>SalesReasonID. </summary>
		SalesReasonID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: SalesOrderHeaderSalesReason. </summary>
	public partial class SalesOrderHeaderSalesReasonRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderSalesReasonEntity and SalesOrderHeaderEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeaderSalesReason.SalesOrderID - SalesOrderHeader.SalesOrderID</summary>
		public virtual IEntityRelation SalesOrderHeaderEntityUsingSalesOrderID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SalesOrderHeader", false, new[] { SalesOrderHeaderFields.SalesOrderID, SalesOrderHeaderSalesReasonFields.SalesOrderID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderSalesReasonEntity and SalesReasonEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeaderSalesReason.SalesReasonID - SalesReason.SalesReasonID</summary>
		public virtual IEntityRelation SalesReasonEntityUsingSalesReasonID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SalesReason", false, new[] { SalesReasonFields.SalesReasonID, SalesOrderHeaderSalesReasonFields.SalesReasonID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticSalesOrderHeaderSalesReasonRelations
	{
		internal static readonly IEntityRelation SalesOrderHeaderEntityUsingSalesOrderIDStatic = new SalesOrderHeaderSalesReasonRelations().SalesOrderHeaderEntityUsingSalesOrderID;
		internal static readonly IEntityRelation SalesReasonEntityUsingSalesReasonIDStatic = new SalesOrderHeaderSalesReasonRelations().SalesReasonEntityUsingSalesReasonID;

		/// <summary>CTor</summary>
		static StaticSalesOrderHeaderSalesReasonRelations() { }
	}
}
