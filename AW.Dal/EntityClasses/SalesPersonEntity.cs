//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'SalesPerson'.<br/><br/>MS_Description: Sales representative current information.<br/></summary>
	[Serializable]
	public partial class SalesPersonEntity : EmployeeEntity
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<SalesOrderHeaderEntity> _salesOrderHeaders;
		private EntityCollection<SalesPersonQuotaHistoryEntity> _salesPersonQuotaHistories;
		private EntityCollection<SalesTerritoryHistoryEntity> _salesTerritoryHistories;
		private EntityCollection<StoreEntity> _stores;
		private SalesTerritoryEntity _salesTerritory;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static SalesPersonEntityStaticMetaData _staticMetaData = new SalesPersonEntityStaticMetaData();
		private static SalesPersonRelations _relationsFactory = new SalesPersonRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public new static partial class MemberNames
		{
			/// <summary>Member name Manager</summary>
			public static readonly string Manager = "Manager";
			/// <summary>Member name Contact</summary>
			public static readonly string Contact = "Contact";
			/// <summary>Member name SalesTerritory</summary>
			public static readonly string SalesTerritory = "SalesTerritory";
			/// <summary>Member name Manages</summary>
			public static readonly string Manages = "Manages";
			/// <summary>Member name EmployeeAddresses</summary>
			public static readonly string EmployeeAddresses = "EmployeeAddresses";
			/// <summary>Member name EmployeeDepartmentHistories</summary>
			public static readonly string EmployeeDepartmentHistories = "EmployeeDepartmentHistories";
			/// <summary>Member name EmployeePayHistories</summary>
			public static readonly string EmployeePayHistories = "EmployeePayHistories";
			/// <summary>Member name JobCandidates</summary>
			public static readonly string JobCandidates = "JobCandidates";
			/// <summary>Member name PurchaseOrderHeaders</summary>
			public static readonly string PurchaseOrderHeaders = "PurchaseOrderHeaders";
			/// <summary>Member name SalesOrderHeaders</summary>
			public static readonly string SalesOrderHeaders = "SalesOrderHeaders";
			/// <summary>Member name SalesPersonQuotaHistories</summary>
			public static readonly string SalesPersonQuotaHistories = "SalesPersonQuotaHistories";
			/// <summary>Member name SalesTerritoryHistories</summary>
			public static readonly string SalesTerritoryHistories = "SalesTerritoryHistories";
			/// <summary>Member name Stores</summary>
			public static readonly string Stores = "Stores";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class SalesPersonEntityStaticMetaData : EmployeeEntityStaticMetaData
		{
			public SalesPersonEntityStaticMetaData()
			{
				SetEntityCoreInfo("SalesPersonEntity", InheritanceHierarchyType.TargetPerEntity, true, (int)AW.Dal.EntityType.SalesPersonEntity, typeof(SalesPersonEntity), typeof(SalesPersonEntityFactory), false);
				AddNavigatorMetaData<SalesPersonEntity, EntityCollection<SalesOrderHeaderEntity>>("SalesOrderHeaders", a => a._salesOrderHeaders, (a, b) => a._salesOrderHeaders = b, a => a.SalesOrderHeaders, () => new SalesPersonRelations().SalesOrderHeaderEntityUsingSalesPersonID, typeof(SalesOrderHeaderEntity), (int)AW.Dal.EntityType.SalesOrderHeaderEntity);
				AddNavigatorMetaData<SalesPersonEntity, EntityCollection<SalesPersonQuotaHistoryEntity>>("SalesPersonQuotaHistories", a => a._salesPersonQuotaHistories, (a, b) => a._salesPersonQuotaHistories = b, a => a.SalesPersonQuotaHistories, () => new SalesPersonRelations().SalesPersonQuotaHistoryEntityUsingSalesPersonID, typeof(SalesPersonQuotaHistoryEntity), (int)AW.Dal.EntityType.SalesPersonQuotaHistoryEntity);
				AddNavigatorMetaData<SalesPersonEntity, EntityCollection<SalesTerritoryHistoryEntity>>("SalesTerritoryHistories", a => a._salesTerritoryHistories, (a, b) => a._salesTerritoryHistories = b, a => a.SalesTerritoryHistories, () => new SalesPersonRelations().SalesTerritoryHistoryEntityUsingSalesPersonID, typeof(SalesTerritoryHistoryEntity), (int)AW.Dal.EntityType.SalesTerritoryHistoryEntity);
				AddNavigatorMetaData<SalesPersonEntity, EntityCollection<StoreEntity>>("Stores", a => a._stores, (a, b) => a._stores = b, a => a.Stores, () => new SalesPersonRelations().StoreEntityUsingSalesPersonID, typeof(StoreEntity), (int)AW.Dal.EntityType.StoreEntity);
				AddNavigatorMetaData<SalesPersonEntity, SalesTerritoryEntity>("SalesTerritory", "SalesPeople", (a, b) => a._salesTerritory = b, a => a._salesTerritory, (a, b) => a.SalesTerritory = b, AW.Dal.RelationClasses.StaticSalesPersonRelations.SalesTerritoryEntityUsingTerritoryIDStatic, ()=>new SalesPersonRelations().SalesTerritoryEntityUsingTerritoryID, null, new int[] { (int)SalesPersonFieldIndex.TerritoryID }, null, true, (int)AW.Dal.EntityType.SalesTerritoryEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static SalesPersonEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public SalesPersonEntity()
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public SalesPersonEntity(IEntityFields2 fields) : base(fields)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this SalesPersonEntity</param>
		public SalesPersonEntity(IValidator validator) : base(validator)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="employeeID">PK value for SalesPerson which data should be fetched into this SalesPerson object</param>
		public SalesPersonEntity(System.Int32 employeeID) : base(employeeID)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="employeeID">PK value for SalesPerson which data should be fetched into this SalesPerson object</param>
		/// <param name="validator">The custom validator object for this SalesPersonEntity</param>
		public SalesPersonEntity(System.Int32 employeeID, IValidator validator) : base(employeeID, validator)
		{
			InitClassEmpty();
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected SalesPersonEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Gets a predicateexpression which filters on this entity. Only useful in entity fetches</summary>
		/// <param name="negate">Optional flag to produce a NOT filter, (true), or a normal filter (false, default). </param>
		/// <returns>ready to use predicateexpression</returns>
		public new static IPredicateExpression GetEntityTypeFilter(bool negate=false) { return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter("SalesPersonEntity", negate); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SalesOrderHeader' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesOrderHeaders() { return CreateRelationInfoForNavigator("SalesOrderHeaders"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SalesPersonQuotaHistory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesPersonQuotaHistories() { return CreateRelationInfoForNavigator("SalesPersonQuotaHistories"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SalesTerritoryHistory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesTerritoryHistories() { return CreateRelationInfoForNavigator("SalesTerritoryHistories"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Store' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStores() { return CreateRelationInfoForNavigator("Stores"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'SalesTerritory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesTerritory() { return CreateRelationInfoForNavigator("SalesTerritory"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Sales representative current information.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Bonus due if quota is met.");
			_fieldsCustomProperties.Add("Bonus", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Commision percent received per sale.");
			_fieldsCustomProperties.Add("CommissionPct", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Sales total of previous year.");
			_fieldsCustomProperties.Add("SalesLastYear", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Projected yearly sales.");
			_fieldsCustomProperties.Add("SalesQuota", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Sales total year to date.");
			_fieldsCustomProperties.Add("SalesYtd", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.");
			_fieldsCustomProperties.Add("TerritoryID", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		private void InitClassEmpty()
		{
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public new static SalesPersonRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public new static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesOrderHeader' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesOrderHeaders { get { return _staticMetaData.GetPrefetchPathElement("SalesOrderHeaders", CommonEntityBase.CreateEntityCollection<SalesOrderHeaderEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesPersonQuotaHistory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesPersonQuotaHistories { get { return _staticMetaData.GetPrefetchPathElement("SalesPersonQuotaHistories", CommonEntityBase.CreateEntityCollection<SalesPersonQuotaHistoryEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesTerritoryHistory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesTerritoryHistories { get { return _staticMetaData.GetPrefetchPathElement("SalesTerritoryHistories", CommonEntityBase.CreateEntityCollection<SalesTerritoryHistoryEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Store' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStores { get { return _staticMetaData.GetPrefetchPathElement("Stores", CommonEntityBase.CreateEntityCollection<StoreEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesTerritory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesTerritory { get { return _staticMetaData.GetPrefetchPathElement("SalesTerritory", CommonEntityBase.CreateEntityCollection<SalesTerritoryEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public new static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The Bonus property of the Entity SalesPerson<br/><br/>MS_Description: Bonus due if quota is met.<br/>Bonus due if quota is met.</summary>
		/// <remarks>Mapped on  table field: "SalesPerson"."Bonus".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal Bonus
		{
			get { return (System.Decimal)GetValue((int)SalesPersonFieldIndex.Bonus, true); }
			set	{ SetValue((int)SalesPersonFieldIndex.Bonus, value); }
		}

		/// <summary>The CommissionPct property of the Entity SalesPerson<br/><br/>MS_Description: Commision percent received per sale.<br/>Commision percent received per sale.</summary>
		/// <remarks>Mapped on  table field: "SalesPerson"."CommissionPct".<br/>Table field type characteristics (type, precision, scale, length): SmallMoney, 10, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal CommissionPct
		{
			get { return (System.Decimal)GetValue((int)SalesPersonFieldIndex.CommissionPct, true); }
			set	{ SetValue((int)SalesPersonFieldIndex.CommissionPct, value); }
		}

		/// <summary>The SalesLastYear property of the Entity SalesPerson<br/><br/>MS_Description: Sales total of previous year.<br/>Sales total of previous year.</summary>
		/// <remarks>Mapped on  table field: "SalesPerson"."SalesLastYear".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal SalesLastYear
		{
			get { return (System.Decimal)GetValue((int)SalesPersonFieldIndex.SalesLastYear, true); }
			set	{ SetValue((int)SalesPersonFieldIndex.SalesLastYear, value); }
		}

		/// <summary>The SalesQuota property of the Entity SalesPerson<br/><br/>MS_Description: Projected yearly sales.<br/>Projected yearly sales.</summary>
		/// <remarks>Mapped on  table field: "SalesPerson"."SalesQuota".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Decimal> SalesQuota
		{
			get { return (Nullable<System.Decimal>)GetValue((int)SalesPersonFieldIndex.SalesQuota, false); }
			set	{ SetValue((int)SalesPersonFieldIndex.SalesQuota, value); }
		}

		/// <summary>The SalesYtd property of the Entity SalesPerson<br/><br/>MS_Description: Sales total year to date.<br/>Sales total year to date.</summary>
		/// <remarks>Mapped on  table field: "SalesPerson"."SalesYTD".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal SalesYtd
		{
			get { return (System.Decimal)GetValue((int)SalesPersonFieldIndex.SalesYtd, true); }
			set	{ SetValue((int)SalesPersonFieldIndex.SalesYtd, value); }
		}

		/// <summary>The TerritoryID property of the Entity SalesPerson<br/><br/>MS_Description: Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.<br/>Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.</summary>
		/// <remarks>Mapped on  table field: "SalesPerson"."TerritoryID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> TerritoryID
		{
			get { return (Nullable<System.Int32>)GetValue((int)SalesPersonFieldIndex.TerritoryID, false); }
			set	{ SetValue((int)SalesPersonFieldIndex.TerritoryID, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'SalesOrderHeaderEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SalesOrderHeaderEntity))]
		public virtual EntityCollection<SalesOrderHeaderEntity> SalesOrderHeaders { get { return GetOrCreateEntityCollection<SalesOrderHeaderEntity, SalesOrderHeaderEntityFactory>("SalesPerson", true, false, ref _salesOrderHeaders); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SalesPersonQuotaHistoryEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SalesPersonQuotaHistoryEntity))]
		public virtual EntityCollection<SalesPersonQuotaHistoryEntity> SalesPersonQuotaHistories { get { return GetOrCreateEntityCollection<SalesPersonQuotaHistoryEntity, SalesPersonQuotaHistoryEntityFactory>("SalesPerson", true, false, ref _salesPersonQuotaHistories); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SalesTerritoryHistoryEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SalesTerritoryHistoryEntity))]
		public virtual EntityCollection<SalesTerritoryHistoryEntity> SalesTerritoryHistories { get { return GetOrCreateEntityCollection<SalesTerritoryHistoryEntity, SalesTerritoryHistoryEntityFactory>("SalesPerson", true, false, ref _salesTerritoryHistories); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'StoreEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(StoreEntity))]
		public virtual EntityCollection<StoreEntity> Stores { get { return GetOrCreateEntityCollection<StoreEntity, StoreEntityFactory>("SalesPerson", true, false, ref _stores); } }

		/// <summary>Gets / sets related entity of type 'SalesTerritoryEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual SalesTerritoryEntity SalesTerritory
		{
			get { return _salesTerritory; }
			set { SetSingleRelatedEntityNavigator(value, "SalesTerritory"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum SalesPersonFieldIndex
	{
		///<summary>BirthDate. Inherited from Employee</summary>
		BirthDate,
		///<summary>ContactID. Inherited from Employee</summary>
		ContactID,
		///<summary>EmployeeID. Inherited from Employee</summary>
		EmployeeID_Employee,
		///<summary>Gender. Inherited from Employee</summary>
		Gender,
		///<summary>HireDate. Inherited from Employee</summary>
		HireDate,
		///<summary>IsCurrent. Inherited from Employee</summary>
		IsCurrent,
		///<summary>IsSalaried. Inherited from Employee</summary>
		IsSalaried,
		///<summary>LoginID. Inherited from Employee</summary>
		LoginID,
		///<summary>ManagerID. Inherited from Employee</summary>
		ManagerID,
		///<summary>MaritalStatus. Inherited from Employee</summary>
		MaritalStatus,
		///<summary>ModifiedDate. Inherited from Employee</summary>
		ModifiedDate,
		///<summary>NationalIdnumber. Inherited from Employee</summary>
		NationalIdnumber,
		///<summary>Rowguid. Inherited from Employee</summary>
		Rowguid,
		///<summary>SickLeaveHours. Inherited from Employee</summary>
		SickLeaveHours,
		///<summary>Title. Inherited from Employee</summary>
		Title,
		///<summary>VacationHours. Inherited from Employee</summary>
		VacationHours,
		///<summary>EmployeeID. </summary>
		EmployeeID,
		///<summary>Bonus. </summary>
		Bonus,
		///<summary>CommissionPct. </summary>
		CommissionPct,
		///<summary>SalesLastYear. </summary>
		SalesLastYear,
		///<summary>SalesQuota. </summary>
		SalesQuota,
		///<summary>SalesYtd. </summary>
		SalesYtd,
		///<summary>TerritoryID. </summary>
		TerritoryID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: SalesPerson. </summary>
	public partial class SalesPersonRelations: EmployeeRelations
	{
		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and EmployeeEntity over the 1:n relation they have, using the relation between the fields: SalesPerson.EmployeeID - Employee.ManagerID</summary>
		public override IEntityRelation EmployeeEntityUsingManagerID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Manages", true, new[] { SalesPersonFields.EmployeeID, EmployeeFields.ManagerID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and EmployeeAddressEntity over the 1:n relation they have, using the relation between the fields: SalesPerson.EmployeeID - EmployeeAddress.EmployeeID</summary>
		public override IEntityRelation EmployeeAddressEntityUsingEmployeeID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EmployeeAddresses", true, new[] { SalesPersonFields.EmployeeID, EmployeeAddressFields.EmployeeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and EmployeeDepartmentHistoryEntity over the 1:n relation they have, using the relation between the fields: SalesPerson.EmployeeID - EmployeeDepartmentHistory.EmployeeID</summary>
		public override IEntityRelation EmployeeDepartmentHistoryEntityUsingEmployeeID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EmployeeDepartmentHistories", true, new[] { SalesPersonFields.EmployeeID, EmployeeDepartmentHistoryFields.EmployeeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and EmployeePayHistoryEntity over the 1:n relation they have, using the relation between the fields: SalesPerson.EmployeeID - EmployeePayHistory.EmployeeID</summary>
		public override IEntityRelation EmployeePayHistoryEntityUsingEmployeeID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EmployeePayHistories", true, new[] { SalesPersonFields.EmployeeID, EmployeePayHistoryFields.EmployeeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and JobCandidateEntity over the 1:n relation they have, using the relation between the fields: SalesPerson.EmployeeID - JobCandidate.EmployeeID</summary>
		public override IEntityRelation JobCandidateEntityUsingEmployeeID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "JobCandidates", true, new[] { SalesPersonFields.EmployeeID, JobCandidateFields.EmployeeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and PurchaseOrderHeaderEntity over the 1:n relation they have, using the relation between the fields: SalesPerson.EmployeeID - PurchaseOrderHeader.EmployeeID</summary>
		public override IEntityRelation PurchaseOrderHeaderEntityUsingEmployeeID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "PurchaseOrderHeaders", true, new[] { SalesPersonFields.EmployeeID, PurchaseOrderHeaderFields.EmployeeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and SalesOrderHeaderEntity over the 1:n relation they have, using the relation between the fields: SalesPerson.EmployeeID - SalesOrderHeader.SalesPersonID</summary>
		public virtual IEntityRelation SalesOrderHeaderEntityUsingSalesPersonID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesOrderHeaders", true, new[] { SalesPersonFields.EmployeeID, SalesOrderHeaderFields.SalesPersonID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and SalesPersonQuotaHistoryEntity over the 1:n relation they have, using the relation between the fields: SalesPerson.EmployeeID - SalesPersonQuotaHistory.SalesPersonID</summary>
		public virtual IEntityRelation SalesPersonQuotaHistoryEntityUsingSalesPersonID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesPersonQuotaHistories", true, new[] { SalesPersonFields.EmployeeID, SalesPersonQuotaHistoryFields.SalesPersonID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and SalesTerritoryHistoryEntity over the 1:n relation they have, using the relation between the fields: SalesPerson.EmployeeID - SalesTerritoryHistory.SalesPersonID</summary>
		public virtual IEntityRelation SalesTerritoryHistoryEntityUsingSalesPersonID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesTerritoryHistories", true, new[] { SalesPersonFields.EmployeeID, SalesTerritoryHistoryFields.SalesPersonID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and StoreEntity over the 1:n relation they have, using the relation between the fields: SalesPerson.EmployeeID - Store.SalesPersonID</summary>
		public virtual IEntityRelation StoreEntityUsingSalesPersonID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Stores", true, new[] { SalesPersonFields.EmployeeID, StoreFields.SalesPersonID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and EmployeeEntity over the m:1 relation they have, using the relation between the fields: SalesPerson.ManagerID - Employee.EmployeeID</summary>
		public override IEntityRelation EmployeeEntityUsingEmployeeIDManagerID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Manager", false, new[] { EmployeeFields.EmployeeID, SalesPersonFields.ManagerID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and ContactEntity over the m:1 relation they have, using the relation between the fields: SalesPerson.ContactID - Contact.ContactID</summary>
		public override IEntityRelation ContactEntityUsingContactID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Contact", false, new[] { ContactFields.ContactID, SalesPersonFields.ContactID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and SalesTerritoryEntity over the m:1 relation they have, using the relation between the fields: SalesPerson.TerritoryID - SalesTerritory.TerritoryID</summary>
		public virtual IEntityRelation SalesTerritoryEntityUsingTerritoryID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SalesTerritory", false, new[] { SalesTerritoryFields.TerritoryID, SalesPersonFields.TerritoryID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesPersonEntity and EmployeeEntity over the 1:1 relation they have, which is used to build a target per entity hierarchy</summary>
		internal IEntityRelation RelationToSuperTypeEmployeeEntity
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateHierarchyRelation(false, new[] { EmployeeFields.EmployeeID, SalesPersonFields.EmployeeID }); }
		}

		/// <inheritdoc/>
		public override IEntityRelation GetSubTypeRelation(string subTypeEntityName)
		{
			return null;
		}
		
		/// <inheritdoc/>
		public override IEntityRelation GetSuperTypeRelation()	{ return this.RelationToSuperTypeEmployeeEntity; }

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticSalesPersonRelations
	{
		internal static readonly IEntityRelation EmployeeEntityUsingManagerIDStatic = new SalesPersonRelations().EmployeeEntityUsingManagerID;
		internal static readonly IEntityRelation EmployeeAddressEntityUsingEmployeeIDStatic = new SalesPersonRelations().EmployeeAddressEntityUsingEmployeeID;
		internal static readonly IEntityRelation EmployeeDepartmentHistoryEntityUsingEmployeeIDStatic = new SalesPersonRelations().EmployeeDepartmentHistoryEntityUsingEmployeeID;
		internal static readonly IEntityRelation EmployeePayHistoryEntityUsingEmployeeIDStatic = new SalesPersonRelations().EmployeePayHistoryEntityUsingEmployeeID;
		internal static readonly IEntityRelation JobCandidateEntityUsingEmployeeIDStatic = new SalesPersonRelations().JobCandidateEntityUsingEmployeeID;
		internal static readonly IEntityRelation PurchaseOrderHeaderEntityUsingEmployeeIDStatic = new SalesPersonRelations().PurchaseOrderHeaderEntityUsingEmployeeID;
		internal static readonly IEntityRelation SalesOrderHeaderEntityUsingSalesPersonIDStatic = new SalesPersonRelations().SalesOrderHeaderEntityUsingSalesPersonID;
		internal static readonly IEntityRelation SalesPersonQuotaHistoryEntityUsingSalesPersonIDStatic = new SalesPersonRelations().SalesPersonQuotaHistoryEntityUsingSalesPersonID;
		internal static readonly IEntityRelation SalesTerritoryHistoryEntityUsingSalesPersonIDStatic = new SalesPersonRelations().SalesTerritoryHistoryEntityUsingSalesPersonID;
		internal static readonly IEntityRelation StoreEntityUsingSalesPersonIDStatic = new SalesPersonRelations().StoreEntityUsingSalesPersonID;
		internal static readonly IEntityRelation EmployeeEntityUsingEmployeeIDManagerIDStatic = new SalesPersonRelations().EmployeeEntityUsingEmployeeIDManagerID;
		internal static readonly IEntityRelation ContactEntityUsingContactIDStatic = new SalesPersonRelations().ContactEntityUsingContactID;
		internal static readonly IEntityRelation SalesTerritoryEntityUsingTerritoryIDStatic = new SalesPersonRelations().SalesTerritoryEntityUsingTerritoryID;

		/// <summary>CTor</summary>
		static StaticSalesPersonRelations() { }
	}
}
