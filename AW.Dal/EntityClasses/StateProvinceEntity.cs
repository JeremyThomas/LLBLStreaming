//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'StateProvince'.<br/><br/>MS_Description: State and province lookup table.<br/></summary>
	[Serializable]
	public partial class StateProvinceEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<AddressEntity> _addresses;
		private EntityCollection<SalesTaxRateEntity> _salesTaxRates;
		private CountryRegionEntity _countryRegion;
		private SalesTerritoryEntity _salesTerritory;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static StateProvinceEntityStaticMetaData _staticMetaData = new StateProvinceEntityStaticMetaData();
		private static StateProvinceRelations _relationsFactory = new StateProvinceRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name CountryRegion</summary>
			public static readonly string CountryRegion = "CountryRegion";
			/// <summary>Member name SalesTerritory</summary>
			public static readonly string SalesTerritory = "SalesTerritory";
			/// <summary>Member name Addresses</summary>
			public static readonly string Addresses = "Addresses";
			/// <summary>Member name SalesTaxRates</summary>
			public static readonly string SalesTaxRates = "SalesTaxRates";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class StateProvinceEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public StateProvinceEntityStaticMetaData()
			{
				SetEntityCoreInfo("StateProvinceEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.StateProvinceEntity, typeof(StateProvinceEntity), typeof(StateProvinceEntityFactory), false);
				AddNavigatorMetaData<StateProvinceEntity, EntityCollection<AddressEntity>>("Addresses", a => a._addresses, (a, b) => a._addresses = b, a => a.Addresses, () => new StateProvinceRelations().AddressEntityUsingStateProvinceID, typeof(AddressEntity), (int)AW.Dal.EntityType.AddressEntity);
				AddNavigatorMetaData<StateProvinceEntity, EntityCollection<SalesTaxRateEntity>>("SalesTaxRates", a => a._salesTaxRates, (a, b) => a._salesTaxRates = b, a => a.SalesTaxRates, () => new StateProvinceRelations().SalesTaxRateEntityUsingStateProvinceID, typeof(SalesTaxRateEntity), (int)AW.Dal.EntityType.SalesTaxRateEntity);
				AddNavigatorMetaData<StateProvinceEntity, CountryRegionEntity>("CountryRegion", "StateProvinces", (a, b) => a._countryRegion = b, a => a._countryRegion, (a, b) => a.CountryRegion = b, AW.Dal.RelationClasses.StaticStateProvinceRelations.CountryRegionEntityUsingCountryRegionCodeStatic, ()=>new StateProvinceRelations().CountryRegionEntityUsingCountryRegionCode, null, new int[] { (int)StateProvinceFieldIndex.CountryRegionCode }, null, true, (int)AW.Dal.EntityType.CountryRegionEntity);
				AddNavigatorMetaData<StateProvinceEntity, SalesTerritoryEntity>("SalesTerritory", "StateProvinces", (a, b) => a._salesTerritory = b, a => a._salesTerritory, (a, b) => a.SalesTerritory = b, AW.Dal.RelationClasses.StaticStateProvinceRelations.SalesTerritoryEntityUsingTerritoryIDStatic, ()=>new StateProvinceRelations().SalesTerritoryEntityUsingTerritoryID, null, new int[] { (int)StateProvinceFieldIndex.TerritoryID }, null, true, (int)AW.Dal.EntityType.SalesTerritoryEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static StateProvinceEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public StateProvinceEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public StateProvinceEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this StateProvinceEntity</param>
		public StateProvinceEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="stateProvinceID">PK value for StateProvince which data should be fetched into this StateProvince object</param>
		public StateProvinceEntity(System.Int32 stateProvinceID) : this(stateProvinceID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="stateProvinceID">PK value for StateProvince which data should be fetched into this StateProvince object</param>
		/// <param name="validator">The custom validator object for this StateProvinceEntity</param>
		public StateProvinceEntity(System.Int32 stateProvinceID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.StateProvinceID = stateProvinceID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected StateProvinceEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Address' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAddresses() { return CreateRelationInfoForNavigator("Addresses"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SalesTaxRate' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesTaxRates() { return CreateRelationInfoForNavigator("SalesTaxRates"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'CountryRegion' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCountryRegion() { return CreateRelationInfoForNavigator("CountryRegion"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'SalesTerritory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesTerritory() { return CreateRelationInfoForNavigator("SalesTerritory"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"State and province lookup table.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Unique nonclustered index.");
			_fieldsCustomProperties.Add("CountryRegionCode", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.");
			_fieldsCustomProperties.Add("IsOnlyStateProvinceFlag", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"State or province description.");
			_fieldsCustomProperties.Add("Name", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");
			_fieldsCustomProperties.Add("Rowguid", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"ISO standard state or province code.");
			_fieldsCustomProperties.Add("StateProvinceCode", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("StateProvinceID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.");
			_fieldsCustomProperties.Add("TerritoryID", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this StateProvinceEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static StateProvinceRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Address' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAddresses { get { return _staticMetaData.GetPrefetchPathElement("Addresses", CommonEntityBase.CreateEntityCollection<AddressEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesTaxRate' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesTaxRates { get { return _staticMetaData.GetPrefetchPathElement("SalesTaxRates", CommonEntityBase.CreateEntityCollection<SalesTaxRateEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'CountryRegion' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCountryRegion { get { return _staticMetaData.GetPrefetchPathElement("CountryRegion", CommonEntityBase.CreateEntityCollection<CountryRegionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesTerritory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesTerritory { get { return _staticMetaData.GetPrefetchPathElement("SalesTerritory", CommonEntityBase.CreateEntityCollection<SalesTerritoryEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The CountryRegionCode property of the Entity StateProvince<br/><br/>MS_Description: Unique nonclustered index.<br/>Unique nonclustered index.</summary>
		/// <remarks>Mapped on  table field: "StateProvince"."CountryRegionCode".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 3.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String CountryRegionCode
		{
			get { return (System.String)GetValue((int)StateProvinceFieldIndex.CountryRegionCode, true); }
			set	{ SetValue((int)StateProvinceFieldIndex.CountryRegionCode, value); }
		}

		/// <summary>The IsOnlyStateProvinceFlag property of the Entity StateProvince<br/><br/>MS_Description: 0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.<br/>0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.</summary>
		/// <remarks>Mapped on  table field: "StateProvince"."IsOnlyStateProvinceFlag".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsOnlyStateProvinceFlag
		{
			get { return (System.Boolean)GetValue((int)StateProvinceFieldIndex.IsOnlyStateProvinceFlag, true); }
			set	{ SetValue((int)StateProvinceFieldIndex.IsOnlyStateProvinceFlag, value); }
		}

		/// <summary>The ModifiedDate property of the Entity StateProvince<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "StateProvince"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)StateProvinceFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)StateProvinceFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The Name property of the Entity StateProvince<br/><br/>MS_Description: State or province description.<br/>State or province description.</summary>
		/// <remarks>Mapped on  table field: "StateProvince"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)StateProvinceFieldIndex.Name, true); }
			set	{ SetValue((int)StateProvinceFieldIndex.Name, value); }
		}

		/// <summary>The Rowguid property of the Entity StateProvince<br/><br/>MS_Description: ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.<br/>ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</summary>
		/// <remarks>Mapped on  table field: "StateProvince"."rowguid".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid Rowguid
		{
			get { return (System.Guid)GetValue((int)StateProvinceFieldIndex.Rowguid, true); }
			set	{ SetValue((int)StateProvinceFieldIndex.Rowguid, value); }
		}

		/// <summary>The StateProvinceCode property of the Entity StateProvince<br/><br/>MS_Description: ISO standard state or province code.<br/>ISO standard state or province code.</summary>
		/// <remarks>Mapped on  table field: "StateProvince"."StateProvinceCode".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 3.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String StateProvinceCode
		{
			get { return (System.String)GetValue((int)StateProvinceFieldIndex.StateProvinceCode, true); }
			set	{ SetValue((int)StateProvinceFieldIndex.StateProvinceCode, value); }
		}

		/// <summary>The StateProvinceID property of the Entity StateProvince<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "StateProvince"."StateProvinceID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 StateProvinceID
		{
			get { return (System.Int32)GetValue((int)StateProvinceFieldIndex.StateProvinceID, true); }
			set { SetValue((int)StateProvinceFieldIndex.StateProvinceID, value); }		}

		/// <summary>The TerritoryID property of the Entity StateProvince<br/><br/>MS_Description: ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.<br/>ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.</summary>
		/// <remarks>Mapped on  table field: "StateProvince"."TerritoryID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 TerritoryID
		{
			get { return (System.Int32)GetValue((int)StateProvinceFieldIndex.TerritoryID, true); }
			set	{ SetValue((int)StateProvinceFieldIndex.TerritoryID, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'AddressEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AddressEntity))]
		public virtual EntityCollection<AddressEntity> Addresses { get { return GetOrCreateEntityCollection<AddressEntity, AddressEntityFactory>("StateProvince", true, false, ref _addresses); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SalesTaxRateEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SalesTaxRateEntity))]
		public virtual EntityCollection<SalesTaxRateEntity> SalesTaxRates { get { return GetOrCreateEntityCollection<SalesTaxRateEntity, SalesTaxRateEntityFactory>("StateProvince", true, false, ref _salesTaxRates); } }

		/// <summary>Gets / sets related entity of type 'CountryRegionEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual CountryRegionEntity CountryRegion
		{
			get { return _countryRegion; }
			set { SetSingleRelatedEntityNavigator(value, "CountryRegion"); }
		}

		/// <summary>Gets / sets related entity of type 'SalesTerritoryEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual SalesTerritoryEntity SalesTerritory
		{
			get { return _salesTerritory; }
			set { SetSingleRelatedEntityNavigator(value, "SalesTerritory"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum StateProvinceFieldIndex
	{
		///<summary>CountryRegionCode. </summary>
		CountryRegionCode,
		///<summary>IsOnlyStateProvinceFlag. </summary>
		IsOnlyStateProvinceFlag,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>Name. </summary>
		Name,
		///<summary>Rowguid. </summary>
		Rowguid,
		///<summary>StateProvinceCode. </summary>
		StateProvinceCode,
		///<summary>StateProvinceID. </summary>
		StateProvinceID,
		///<summary>TerritoryID. </summary>
		TerritoryID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: StateProvince. </summary>
	public partial class StateProvinceRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between StateProvinceEntity and AddressEntity over the 1:n relation they have, using the relation between the fields: StateProvince.StateProvinceID - Address.StateProvinceID</summary>
		public virtual IEntityRelation AddressEntityUsingStateProvinceID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Addresses", true, new[] { StateProvinceFields.StateProvinceID, AddressFields.StateProvinceID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between StateProvinceEntity and SalesTaxRateEntity over the 1:n relation they have, using the relation between the fields: StateProvince.StateProvinceID - SalesTaxRate.StateProvinceID</summary>
		public virtual IEntityRelation SalesTaxRateEntityUsingStateProvinceID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesTaxRates", true, new[] { StateProvinceFields.StateProvinceID, SalesTaxRateFields.StateProvinceID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between StateProvinceEntity and CountryRegionEntity over the m:1 relation they have, using the relation between the fields: StateProvince.CountryRegionCode - CountryRegion.CountryRegionCode</summary>
		public virtual IEntityRelation CountryRegionEntityUsingCountryRegionCode
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "CountryRegion", false, new[] { CountryRegionFields.CountryRegionCode, StateProvinceFields.CountryRegionCode }); }
		}

		/// <summary>Returns a new IEntityRelation object, between StateProvinceEntity and SalesTerritoryEntity over the m:1 relation they have, using the relation between the fields: StateProvince.TerritoryID - SalesTerritory.TerritoryID</summary>
		public virtual IEntityRelation SalesTerritoryEntityUsingTerritoryID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SalesTerritory", false, new[] { SalesTerritoryFields.TerritoryID, StateProvinceFields.TerritoryID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticStateProvinceRelations
	{
		internal static readonly IEntityRelation AddressEntityUsingStateProvinceIDStatic = new StateProvinceRelations().AddressEntityUsingStateProvinceID;
		internal static readonly IEntityRelation SalesTaxRateEntityUsingStateProvinceIDStatic = new StateProvinceRelations().SalesTaxRateEntityUsingStateProvinceID;
		internal static readonly IEntityRelation CountryRegionEntityUsingCountryRegionCodeStatic = new StateProvinceRelations().CountryRegionEntityUsingCountryRegionCode;
		internal static readonly IEntityRelation SalesTerritoryEntityUsingTerritoryIDStatic = new StateProvinceRelations().SalesTerritoryEntityUsingTerritoryID;

		/// <summary>CTor</summary>
		static StaticStateProvinceRelations() { }
	}
}
