//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'StoreContact'.<br/><br/>MS_Description: Cross-reference table mapping stores and their employees.<br/></summary>
	[Serializable]
	public partial class StoreContactEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private ContactEntity _contact;
		private ContactTypeEntity _contactType;
		private StoreEntity _store;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static StoreContactEntityStaticMetaData _staticMetaData = new StoreContactEntityStaticMetaData();
		private static StoreContactRelations _relationsFactory = new StoreContactRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Contact</summary>
			public static readonly string Contact = "Contact";
			/// <summary>Member name ContactType</summary>
			public static readonly string ContactType = "ContactType";
			/// <summary>Member name Store</summary>
			public static readonly string Store = "Store";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class StoreContactEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public StoreContactEntityStaticMetaData()
			{
				SetEntityCoreInfo("StoreContactEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.StoreContactEntity, typeof(StoreContactEntity), typeof(StoreContactEntityFactory), false);
				AddNavigatorMetaData<StoreContactEntity, ContactEntity>("Contact", "StoreContacts", (a, b) => a._contact = b, a => a._contact, (a, b) => a.Contact = b, AW.Dal.RelationClasses.StaticStoreContactRelations.ContactEntityUsingContactIDStatic, ()=>new StoreContactRelations().ContactEntityUsingContactID, null, new int[] { (int)StoreContactFieldIndex.ContactID }, null, true, (int)AW.Dal.EntityType.ContactEntity);
				AddNavigatorMetaData<StoreContactEntity, ContactTypeEntity>("ContactType", "StoreContacts", (a, b) => a._contactType = b, a => a._contactType, (a, b) => a.ContactType = b, AW.Dal.RelationClasses.StaticStoreContactRelations.ContactTypeEntityUsingContactTypeIDStatic, ()=>new StoreContactRelations().ContactTypeEntityUsingContactTypeID, null, new int[] { (int)StoreContactFieldIndex.ContactTypeID }, null, true, (int)AW.Dal.EntityType.ContactTypeEntity);
				AddNavigatorMetaData<StoreContactEntity, StoreEntity>("Store", "StoreContacts", (a, b) => a._store = b, a => a._store, (a, b) => a.Store = b, AW.Dal.RelationClasses.StaticStoreContactRelations.StoreEntityUsingCustomerIDStatic, ()=>new StoreContactRelations().StoreEntityUsingCustomerID, null, new int[] { (int)StoreContactFieldIndex.CustomerID }, null, true, (int)AW.Dal.EntityType.StoreEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static StoreContactEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public StoreContactEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public StoreContactEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this StoreContactEntity</param>
		public StoreContactEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="contactID">PK value for StoreContact which data should be fetched into this StoreContact object</param>
		/// <param name="customerID">PK value for StoreContact which data should be fetched into this StoreContact object</param>
		public StoreContactEntity(System.Int32 contactID, System.Int32 customerID) : this(contactID, customerID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="contactID">PK value for StoreContact which data should be fetched into this StoreContact object</param>
		/// <param name="customerID">PK value for StoreContact which data should be fetched into this StoreContact object</param>
		/// <param name="validator">The custom validator object for this StoreContactEntity</param>
		public StoreContactEntity(System.Int32 contactID, System.Int32 customerID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ContactID = contactID;
			this.CustomerID = customerID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected StoreContactEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Contact' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoContact() { return CreateRelationInfoForNavigator("Contact"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'ContactType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoContactType() { return CreateRelationInfoForNavigator("ContactType"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Store' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStore() { return CreateRelationInfoForNavigator("Store"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Cross-reference table mapping stores and their employees.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Contact (store employee) identification number. Foreign key to Contact.ContactID.");
			_fieldsCustomProperties.Add("ContactID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Nonclustered index.");
			_fieldsCustomProperties.Add("ContactTypeID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("CustomerID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");
			_fieldsCustomProperties.Add("Rowguid", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this StoreContactEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static StoreContactRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Contact' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathContact { get { return _staticMetaData.GetPrefetchPathElement("Contact", CommonEntityBase.CreateEntityCollection<ContactEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ContactType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathContactType { get { return _staticMetaData.GetPrefetchPathElement("ContactType", CommonEntityBase.CreateEntityCollection<ContactTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Store' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStore { get { return _staticMetaData.GetPrefetchPathElement("Store", CommonEntityBase.CreateEntityCollection<StoreEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The ContactID property of the Entity StoreContact<br/><br/>MS_Description: Contact (store employee) identification number. Foreign key to Contact.ContactID.<br/>Contact (store employee) identification number. Foreign key to Contact.ContactID.</summary>
		/// <remarks>Mapped on  table field: "StoreContact"."ContactID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 ContactID
		{
			get { return (System.Int32)GetValue((int)StoreContactFieldIndex.ContactID, true); }
			set	{ SetValue((int)StoreContactFieldIndex.ContactID, value); }
		}

		/// <summary>The ContactTypeID property of the Entity StoreContact<br/><br/>MS_Description: Nonclustered index.<br/>Nonclustered index.</summary>
		/// <remarks>Mapped on  table field: "StoreContact"."ContactTypeID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual AW.Data.ContactType ContactTypeID
		{
			get { return (AW.Data.ContactType)GetValue((int)StoreContactFieldIndex.ContactTypeID, true); }
			set	{ SetValue((int)StoreContactFieldIndex.ContactTypeID, value); }
		}

		/// <summary>The CustomerID property of the Entity StoreContact<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "StoreContact"."CustomerID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 CustomerID
		{
			get { return (System.Int32)GetValue((int)StoreContactFieldIndex.CustomerID, true); }
			set	{ SetValue((int)StoreContactFieldIndex.CustomerID, value); }
		}

		/// <summary>The ModifiedDate property of the Entity StoreContact<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "StoreContact"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)StoreContactFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)StoreContactFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The Rowguid property of the Entity StoreContact<br/><br/>MS_Description: ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.<br/>ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.</summary>
		/// <remarks>Mapped on  table field: "StoreContact"."rowguid".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid Rowguid
		{
			get { return (System.Guid)GetValue((int)StoreContactFieldIndex.Rowguid, true); }
			set	{ SetValue((int)StoreContactFieldIndex.Rowguid, value); }
		}

		/// <summary>Gets / sets related entity of type 'ContactEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ContactEntity Contact
		{
			get { return _contact; }
			set { SetSingleRelatedEntityNavigator(value, "Contact"); }
		}

		/// <summary>Gets / sets related entity of type 'ContactTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ContactTypeEntity ContactType
		{
			get { return _contactType; }
			set { SetSingleRelatedEntityNavigator(value, "ContactType"); }
		}

		/// <summary>Gets / sets related entity of type 'StoreEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual StoreEntity Store
		{
			get { return _store; }
			set { SetSingleRelatedEntityNavigator(value, "Store"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum StoreContactFieldIndex
	{
		///<summary>ContactID. </summary>
		ContactID,
		///<summary>ContactTypeID. </summary>
		ContactTypeID,
		///<summary>CustomerID. </summary>
		CustomerID,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>Rowguid. </summary>
		Rowguid,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: StoreContact. </summary>
	public partial class StoreContactRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between StoreContactEntity and ContactEntity over the m:1 relation they have, using the relation between the fields: StoreContact.ContactID - Contact.ContactID</summary>
		public virtual IEntityRelation ContactEntityUsingContactID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Contact", false, new[] { ContactFields.ContactID, StoreContactFields.ContactID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between StoreContactEntity and ContactTypeEntity over the m:1 relation they have, using the relation between the fields: StoreContact.ContactTypeID - ContactType.ContactTypeID</summary>
		public virtual IEntityRelation ContactTypeEntityUsingContactTypeID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "ContactType", false, new[] { ContactTypeFields.ContactTypeID, StoreContactFields.ContactTypeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between StoreContactEntity and StoreEntity over the m:1 relation they have, using the relation between the fields: StoreContact.CustomerID - Store.CustomerID</summary>
		public virtual IEntityRelation StoreEntityUsingCustomerID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Store", false, new[] { StoreFields.CustomerID, StoreContactFields.CustomerID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticStoreContactRelations
	{
		internal static readonly IEntityRelation ContactEntityUsingContactIDStatic = new StoreContactRelations().ContactEntityUsingContactID;
		internal static readonly IEntityRelation ContactTypeEntityUsingContactTypeIDStatic = new StoreContactRelations().ContactTypeEntityUsingContactTypeID;
		internal static readonly IEntityRelation StoreEntityUsingCustomerIDStatic = new StoreContactRelations().StoreEntityUsingCustomerID;

		/// <summary>CTor</summary>
		static StaticStoreContactRelations() { }
	}
}
