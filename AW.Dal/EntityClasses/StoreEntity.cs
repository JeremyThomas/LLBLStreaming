//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Store'.<br/><br/>MS_Description: Primary XML index.<br/></summary>
	[Serializable]
	public partial class StoreEntity : CustomerEntity
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<StoreContactEntity> _storeContacts;
		private EntityCollection<ContactEntity> _contacts;
		private SalesPersonEntity _salesPerson;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static StoreEntityStaticMetaData _staticMetaData = new StoreEntityStaticMetaData();
		private static StoreRelations _relationsFactory = new StoreRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public new static partial class MemberNames
		{
			/// <summary>Member name SalesPerson</summary>
			public static readonly string SalesPerson = "SalesPerson";
			/// <summary>Member name SalesTerritory</summary>
			public static readonly string SalesTerritory = "SalesTerritory";
			/// <summary>Member name CustomerAddresses</summary>
			public static readonly string CustomerAddresses = "CustomerAddresses";
			/// <summary>Member name SalesOrderHeaders</summary>
			public static readonly string SalesOrderHeaders = "SalesOrderHeaders";
			/// <summary>Member name StoreContacts</summary>
			public static readonly string StoreContacts = "StoreContacts";
			/// <summary>Member name AddressCollectionViaCustomerAddress</summary>
			public static readonly string AddressCollectionViaCustomerAddress = "AddressCollectionViaCustomerAddress";
			/// <summary>Member name Contacts</summary>
			public static readonly string Contacts = "Contacts";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class StoreEntityStaticMetaData : CustomerEntityStaticMetaData
		{
			public StoreEntityStaticMetaData()
			{
				SetEntityCoreInfo("StoreEntity", InheritanceHierarchyType.TargetPerEntity, true, (int)AW.Dal.EntityType.StoreEntity, typeof(StoreEntity), typeof(StoreEntityFactory), false);
				AddNavigatorMetaData<StoreEntity, EntityCollection<StoreContactEntity>>("StoreContacts", a => a._storeContacts, (a, b) => a._storeContacts = b, a => a.StoreContacts, () => new StoreRelations().StoreContactEntityUsingCustomerID, typeof(StoreContactEntity), (int)AW.Dal.EntityType.StoreContactEntity);
				AddNavigatorMetaData<StoreEntity, SalesPersonEntity>("SalesPerson", "Stores", (a, b) => a._salesPerson = b, a => a._salesPerson, (a, b) => a.SalesPerson = b, AW.Dal.RelationClasses.StaticStoreRelations.SalesPersonEntityUsingSalesPersonIDStatic, ()=>new StoreRelations().SalesPersonEntityUsingSalesPersonID, null, new int[] { (int)StoreFieldIndex.SalesPersonID }, null, true, (int)AW.Dal.EntityType.SalesPersonEntity);
				AddNavigatorMetaData<StoreEntity, EntityCollection<ContactEntity>>("Contacts", a => a._contacts, (a, b) => a._contacts = b, a => a.Contacts, () => new StoreRelations().StoreContactEntityUsingCustomerID, () => new StoreContactRelations().ContactEntityUsingContactID, "StoreEntity__", "StoreContact_", typeof(ContactEntity), (int)AW.Dal.EntityType.ContactEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static StoreEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public StoreEntity()
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public StoreEntity(IEntityFields2 fields) : base(fields)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this StoreEntity</param>
		public StoreEntity(IValidator validator) : base(validator)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="customerID">PK value for Store which data should be fetched into this Store object</param>
		public StoreEntity(System.Int32 customerID) : base(customerID)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="customerID">PK value for Store which data should be fetched into this Store object</param>
		/// <param name="validator">The custom validator object for this StoreEntity</param>
		public StoreEntity(System.Int32 customerID, IValidator validator) : base(customerID, validator)
		{
			InitClassEmpty();
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected StoreEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Gets a predicateexpression which filters on this entity. Only useful in entity fetches</summary>
		/// <param name="negate">Optional flag to produce a NOT filter, (true), or a normal filter (false, default). </param>
		/// <returns>ready to use predicateexpression</returns>
		public new static IPredicateExpression GetEntityTypeFilter(bool negate=false) { return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter("StoreEntity", negate); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'StoreContact' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStoreContacts() { return CreateRelationInfoForNavigator("StoreContacts"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Contact' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoContacts() { return CreateRelationInfoForNavigator("Contacts"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'SalesPerson' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesPerson() { return CreateRelationInfoForNavigator("SalesPerson"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Primary XML index.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Demographic informationg about the store such as the number of employees, annual sales and store type.");
			_fieldsCustomProperties.Add("Demographics", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Name of the store.");
			_fieldsCustomProperties.Add("Name", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Nonclustered index.");
			_fieldsCustomProperties.Add("SalesPersonID", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		private void InitClassEmpty()
		{
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public new static StoreRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public new static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'StoreContact' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStoreContacts { get { return _staticMetaData.GetPrefetchPathElement("StoreContacts", CommonEntityBase.CreateEntityCollection<StoreContactEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Contact' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathContacts { get { return _staticMetaData.GetPrefetchPathElement("Contacts", CommonEntityBase.CreateEntityCollection<ContactEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesPerson' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesPerson { get { return _staticMetaData.GetPrefetchPathElement("SalesPerson", CommonEntityBase.CreateEntityCollection<SalesPersonEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public new static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The Demographics property of the Entity Store<br/><br/>MS_Description: Demographic informationg about the store such as the number of employees, annual sales and store type.<br/>Demographic informationg about the store such as the number of employees, annual sales and store type.</summary>
		/// <remarks>Mapped on  table field: "Store"."Demographics".<br/>Table field type characteristics (type, precision, scale, length): Xml, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Demographics
		{
			get { return (System.String)GetValue((int)StoreFieldIndex.Demographics, true); }
			set	{ SetValue((int)StoreFieldIndex.Demographics, value); }
		}

		/// <summary>The Name property of the Entity Store<br/><br/>MS_Description: Name of the store.<br/>Name of the store.</summary>
		/// <remarks>Mapped on  table field: "Store"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)StoreFieldIndex.Name, true); }
			set	{ SetValue((int)StoreFieldIndex.Name, value); }
		}

		/// <summary>The SalesPersonID property of the Entity Store<br/><br/>MS_Description: Nonclustered index.<br/>Nonclustered index.</summary>
		/// <remarks>Mapped on  table field: "Store"."SalesPersonID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> SalesPersonID
		{
			get { return (Nullable<System.Int32>)GetValue((int)StoreFieldIndex.SalesPersonID, false); }
			set	{ SetValue((int)StoreFieldIndex.SalesPersonID, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'StoreContactEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(StoreContactEntity))]
		public virtual EntityCollection<StoreContactEntity> StoreContacts { get { return GetOrCreateEntityCollection<StoreContactEntity, StoreContactEntityFactory>("Store", true, false, ref _storeContacts); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ContactEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ContactEntity))]
		public virtual EntityCollection<ContactEntity> Contacts { get { return GetOrCreateEntityCollection<ContactEntity, ContactEntityFactory>("Stores", false, true, ref _contacts); } }

		/// <summary>Gets / sets related entity of type 'SalesPersonEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual SalesPersonEntity SalesPerson
		{
			get { return _salesPerson; }
			set { SetSingleRelatedEntityNavigator(value, "SalesPerson"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum StoreFieldIndex
	{
		///<summary>AccountNumber. Inherited from Customer</summary>
		AccountNumber,
		///<summary>CustomerID. Inherited from Customer</summary>
		CustomerID_Customer,
		///<summary>CustomerType. Inherited from Customer</summary>
		CustomerType,
		///<summary>ModifiedDate. Inherited from Customer</summary>
		ModifiedDate,
		///<summary>Rowguid. Inherited from Customer</summary>
		Rowguid,
		///<summary>TerritoryID. Inherited from Customer</summary>
		TerritoryID,
		///<summary>CustomerID. </summary>
		CustomerID,
		///<summary>Demographics. </summary>
		Demographics,
		///<summary>Name. </summary>
		Name,
		///<summary>SalesPersonID. </summary>
		SalesPersonID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Store. </summary>
	public partial class StoreRelations: CustomerRelations
	{
		/// <summary>Returns a new IEntityRelation object, between StoreEntity and CustomerAddressEntity over the 1:n relation they have, using the relation between the fields: Store.CustomerID - CustomerAddress.CustomerID</summary>
		public override IEntityRelation CustomerAddressEntityUsingCustomerID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "CustomerAddresses", true, new[] { StoreFields.CustomerID, CustomerAddressFields.CustomerID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between StoreEntity and SalesOrderHeaderEntity over the 1:n relation they have, using the relation between the fields: Store.CustomerID - SalesOrderHeader.CustomerID</summary>
		public override IEntityRelation SalesOrderHeaderEntityUsingCustomerID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SalesOrderHeaders", true, new[] { StoreFields.CustomerID, SalesOrderHeaderFields.CustomerID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between StoreEntity and StoreContactEntity over the 1:n relation they have, using the relation between the fields: Store.CustomerID - StoreContact.CustomerID</summary>
		public virtual IEntityRelation StoreContactEntityUsingCustomerID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "StoreContacts", true, new[] { StoreFields.CustomerID, StoreContactFields.CustomerID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between StoreEntity and SalesPersonEntity over the m:1 relation they have, using the relation between the fields: Store.SalesPersonID - SalesPerson.EmployeeID</summary>
		public virtual IEntityRelation SalesPersonEntityUsingSalesPersonID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SalesPerson", false, new[] { SalesPersonFields.EmployeeID, StoreFields.SalesPersonID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between StoreEntity and SalesTerritoryEntity over the m:1 relation they have, using the relation between the fields: Store.TerritoryID - SalesTerritory.TerritoryID</summary>
		public override IEntityRelation SalesTerritoryEntityUsingTerritoryID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SalesTerritory", false, new[] { SalesTerritoryFields.TerritoryID, StoreFields.TerritoryID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between StoreEntity and CustomerEntity over the 1:1 relation they have, which is used to build a target per entity hierarchy</summary>
		internal IEntityRelation RelationToSuperTypeCustomerEntity
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateHierarchyRelation(false, new[] { CustomerFields.CustomerID, StoreFields.CustomerID }); }
		}

		/// <inheritdoc/>
		public override IEntityRelation GetSubTypeRelation(string subTypeEntityName)
		{
			return null;
		}
		
		/// <inheritdoc/>
		public override IEntityRelation GetSuperTypeRelation()	{ return this.RelationToSuperTypeCustomerEntity; }

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticStoreRelations
	{
		internal static readonly IEntityRelation CustomerAddressEntityUsingCustomerIDStatic = new StoreRelations().CustomerAddressEntityUsingCustomerID;
		internal static readonly IEntityRelation SalesOrderHeaderEntityUsingCustomerIDStatic = new StoreRelations().SalesOrderHeaderEntityUsingCustomerID;
		internal static readonly IEntityRelation StoreContactEntityUsingCustomerIDStatic = new StoreRelations().StoreContactEntityUsingCustomerID;
		internal static readonly IEntityRelation SalesPersonEntityUsingSalesPersonIDStatic = new StoreRelations().SalesPersonEntityUsingSalesPersonID;
		internal static readonly IEntityRelation SalesTerritoryEntityUsingTerritoryIDStatic = new StoreRelations().SalesTerritoryEntityUsingTerritoryID;

		/// <summary>CTor</summary>
		static StaticStoreRelations() { }
	}
}
