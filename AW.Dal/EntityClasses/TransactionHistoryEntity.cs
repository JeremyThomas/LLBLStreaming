//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'TransactionHistory'.<br/><br/>MS_Description: Record of each purchase order, sales order, or work order transaction year to date.<br/></summary>
	[Serializable]
	public partial class TransactionHistoryEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private ProductEntity _product;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static TransactionHistoryEntityStaticMetaData _staticMetaData = new TransactionHistoryEntityStaticMetaData();
		private static TransactionHistoryRelations _relationsFactory = new TransactionHistoryRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Product</summary>
			public static readonly string Product = "Product";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class TransactionHistoryEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public TransactionHistoryEntityStaticMetaData()
			{
				SetEntityCoreInfo("TransactionHistoryEntity", InheritanceHierarchyType.TargetPerEntityHierarchy, false, (int)AW.Dal.EntityType.TransactionHistoryEntity, typeof(TransactionHistoryEntity), typeof(TransactionHistoryEntityFactory), false);
				AddNavigatorMetaData<TransactionHistoryEntity, ProductEntity>("Product", "TransactionHistories", (a, b) => a._product = b, a => a._product, (a, b) => a.Product = b, AW.Dal.RelationClasses.StaticTransactionHistoryRelations.ProductEntityUsingProductIDStatic, ()=>new TransactionHistoryRelations().ProductEntityUsingProductID, null, new int[] { (int)TransactionHistoryFieldIndex.ProductID }, null, true, (int)AW.Dal.EntityType.ProductEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static TransactionHistoryEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		internal TransactionHistoryEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		internal TransactionHistoryEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this TransactionHistoryEntity</param>
		internal TransactionHistoryEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="transactionID">PK value for TransactionHistory which data should be fetched into this TransactionHistory object</param>
		internal TransactionHistoryEntity(System.Int32 transactionID) : this(transactionID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="transactionID">PK value for TransactionHistory which data should be fetched into this TransactionHistory object</param>
		/// <param name="validator">The custom validator object for this TransactionHistoryEntity</param>
		internal TransactionHistoryEntity(System.Int32 transactionID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.TransactionID = transactionID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected TransactionHistoryEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Gets a predicateexpression which filters on this entity. Only useful in entity fetches</summary>
		/// <param name="negate">Optional flag to produce a NOT filter, (true), or a normal filter (false, default). </param>
		/// <returns>ready to use predicateexpression</returns>
		public  static IPredicateExpression GetEntityTypeFilter(bool negate=false) { return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter("TransactionHistoryEntity", negate); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Product' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProduct() { return CreateRelationInfoForNavigator("Product"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Record of each purchase order, sales order, or work order transaction year to date.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Product cost.");
			_fieldsCustomProperties.Add("ActualCost", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Product identification number. Foreign key to Product.ProductID.");
			_fieldsCustomProperties.Add("ProductID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Product quantity.");
			_fieldsCustomProperties.Add("Quantity", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Nonclustered index.");
			_fieldsCustomProperties.Add("ReferenceOrderID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Line number associated with the purchase order, sales order, or work order.");
			_fieldsCustomProperties.Add("ReferenceOrderLineID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time of the transaction.");
			_fieldsCustomProperties.Add("TransactionDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("TransactionID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"W = WorkOrder, S = SalesOrder, P = PurchaseOrder");
			_fieldsCustomProperties.Add("TransactionType", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this TransactionHistoryEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			if(this.Fields.State==EntityState.New)
			{
				this.Fields.ForcedValueWrite((int)TransactionHistoryFieldIndex.TransactionType, "A");
			}
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static TransactionHistoryRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Product' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProduct { get { return _staticMetaData.GetPrefetchPathElement("Product", CommonEntityBase.CreateEntityCollection<ProductEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The ActualCost property of the Entity TransactionHistory<br/><br/>MS_Description: Product cost.<br/>Product cost.</summary>
		/// <remarks>Mapped on  table field: "TransactionHistory"."ActualCost".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal ActualCost
		{
			get { return (System.Decimal)GetValue((int)TransactionHistoryFieldIndex.ActualCost, true); }
			set	{ SetValue((int)TransactionHistoryFieldIndex.ActualCost, value); }
		}

		/// <summary>The ModifiedDate property of the Entity TransactionHistory<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "TransactionHistory"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)TransactionHistoryFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)TransactionHistoryFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The ProductID property of the Entity TransactionHistory<br/><br/>MS_Description: Product identification number. Foreign key to Product.ProductID.<br/>Product identification number. Foreign key to Product.ProductID.</summary>
		/// <remarks>Mapped on  table field: "TransactionHistory"."ProductID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ProductID
		{
			get { return (System.Int32)GetValue((int)TransactionHistoryFieldIndex.ProductID, true); }
			set	{ SetValue((int)TransactionHistoryFieldIndex.ProductID, value); }
		}

		/// <summary>The Quantity property of the Entity TransactionHistory<br/><br/>MS_Description: Product quantity.<br/>Product quantity.</summary>
		/// <remarks>Mapped on  table field: "TransactionHistory"."Quantity".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 Quantity
		{
			get { return (System.Int32)GetValue((int)TransactionHistoryFieldIndex.Quantity, true); }
			set	{ SetValue((int)TransactionHistoryFieldIndex.Quantity, value); }
		}

		/// <summary>The ReferenceOrderID property of the Entity TransactionHistory<br/><br/>MS_Description: Nonclustered index.<br/>Nonclustered index.</summary>
		/// <remarks>Mapped on  table field: "TransactionHistory"."ReferenceOrderID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ReferenceOrderID
		{
			get { return (System.Int32)GetValue((int)TransactionHistoryFieldIndex.ReferenceOrderID, true); }
			set	{ SetValue((int)TransactionHistoryFieldIndex.ReferenceOrderID, value); }
		}

		/// <summary>The ReferenceOrderLineID property of the Entity TransactionHistory<br/><br/>MS_Description: Line number associated with the purchase order, sales order, or work order.<br/>Line number associated with the purchase order, sales order, or work order.</summary>
		/// <remarks>Mapped on  table field: "TransactionHistory"."ReferenceOrderLineID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ReferenceOrderLineID
		{
			get { return (System.Int32)GetValue((int)TransactionHistoryFieldIndex.ReferenceOrderLineID, true); }
			set	{ SetValue((int)TransactionHistoryFieldIndex.ReferenceOrderLineID, value); }
		}

		/// <summary>The TransactionDate property of the Entity TransactionHistory<br/><br/>MS_Description: Date and time of the transaction.<br/>Date and time of the transaction.</summary>
		/// <remarks>Mapped on  table field: "TransactionHistory"."TransactionDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime TransactionDate
		{
			get { return (System.DateTime)GetValue((int)TransactionHistoryFieldIndex.TransactionDate, true); }
			set	{ SetValue((int)TransactionHistoryFieldIndex.TransactionDate, value); }
		}

		/// <summary>The TransactionID property of the Entity TransactionHistory<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "TransactionHistory"."TransactionID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 TransactionID
		{
			get { return (System.Int32)GetValue((int)TransactionHistoryFieldIndex.TransactionID, true); }
			set { SetValue((int)TransactionHistoryFieldIndex.TransactionID, value); }		}

		/// <summary>The TransactionType property of the Entity TransactionHistory<br/><br/>MS_Description: W = WorkOrder, S = SalesOrder, P = PurchaseOrder<br/>W = WorkOrder, S = SalesOrder, P = PurchaseOrder</summary>
		/// <remarks>Mapped on  table field: "TransactionHistory"."TransactionType".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 1.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String TransactionType
		{
			get { return (System.String)GetValue((int)TransactionHistoryFieldIndex.TransactionType, true); }
		}

		/// <summary>Gets / sets related entity of type 'ProductEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ProductEntity Product
		{
			get { return _product; }
			set { SetSingleRelatedEntityNavigator(value, "Product"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum TransactionHistoryFieldIndex
	{
		///<summary>ActualCost. </summary>
		ActualCost,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>ProductID. </summary>
		ProductID,
		///<summary>Quantity. </summary>
		Quantity,
		///<summary>ReferenceOrderID. </summary>
		ReferenceOrderID,
		///<summary>ReferenceOrderLineID. </summary>
		ReferenceOrderLineID,
		///<summary>TransactionDate. </summary>
		TransactionDate,
		///<summary>TransactionID. </summary>
		TransactionID,
		///<summary>TransactionType. </summary>
		TransactionType,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: TransactionHistory. </summary>
	public partial class TransactionHistoryRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between TransactionHistoryEntity and ProductEntity over the m:1 relation they have, using the relation between the fields: TransactionHistory.ProductID - Product.ProductID</summary>
		public virtual IEntityRelation ProductEntityUsingProductID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Product", false, new[] { ProductFields.ProductID, TransactionHistoryFields.ProductID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticTransactionHistoryRelations
	{
		internal static readonly IEntityRelation ProductEntityUsingProductIDStatic = new TransactionHistoryRelations().ProductEntityUsingProductID;

		/// <summary>CTor</summary>
		static StaticTransactionHistoryRelations() { }
	}
}
