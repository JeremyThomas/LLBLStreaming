//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'UnitMeasure'.<br/><br/>MS_Description: Unit of measure lookup table.<br/></summary>
	[Serializable]
	public partial class UnitMeasureEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<BillOfMaterialEntity> _billOfMaterials;
		private EntityCollection<ProductEntity> _productsOfSize;
		private EntityCollection<ProductEntity> _productsOfWeight;
		private EntityCollection<ProductVendorEntity> _productVendors;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static UnitMeasureEntityStaticMetaData _staticMetaData = new UnitMeasureEntityStaticMetaData();
		private static UnitMeasureRelations _relationsFactory = new UnitMeasureRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name BillOfMaterials</summary>
			public static readonly string BillOfMaterials = "BillOfMaterials";
			/// <summary>Member name ProductsOfSize</summary>
			public static readonly string ProductsOfSize = "ProductsOfSize";
			/// <summary>Member name ProductsOfWeight</summary>
			public static readonly string ProductsOfWeight = "ProductsOfWeight";
			/// <summary>Member name ProductVendors</summary>
			public static readonly string ProductVendors = "ProductVendors";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class UnitMeasureEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public UnitMeasureEntityStaticMetaData()
			{
				SetEntityCoreInfo("UnitMeasureEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.UnitMeasureEntity, typeof(UnitMeasureEntity), typeof(UnitMeasureEntityFactory), false);
				AddNavigatorMetaData<UnitMeasureEntity, EntityCollection<BillOfMaterialEntity>>("BillOfMaterials", a => a._billOfMaterials, (a, b) => a._billOfMaterials = b, a => a.BillOfMaterials, () => new UnitMeasureRelations().BillOfMaterialEntityUsingUnitMeasureCode, typeof(BillOfMaterialEntity), (int)AW.Dal.EntityType.BillOfMaterialEntity);
				AddNavigatorMetaData<UnitMeasureEntity, EntityCollection<ProductEntity>>("ProductsOfSize", a => a._productsOfSize, (a, b) => a._productsOfSize = b, a => a.ProductsOfSize, () => new UnitMeasureRelations().ProductEntityUsingSizeUnitMeasureCode, typeof(ProductEntity), (int)AW.Dal.EntityType.ProductEntity);
				AddNavigatorMetaData<UnitMeasureEntity, EntityCollection<ProductEntity>>("ProductsOfWeight", a => a._productsOfWeight, (a, b) => a._productsOfWeight = b, a => a.ProductsOfWeight, () => new UnitMeasureRelations().ProductEntityUsingWeightUnitMeasureCode, typeof(ProductEntity), (int)AW.Dal.EntityType.ProductEntity);
				AddNavigatorMetaData<UnitMeasureEntity, EntityCollection<ProductVendorEntity>>("ProductVendors", a => a._productVendors, (a, b) => a._productVendors = b, a => a.ProductVendors, () => new UnitMeasureRelations().ProductVendorEntityUsingUnitMeasureCode, typeof(ProductVendorEntity), (int)AW.Dal.EntityType.ProductVendorEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static UnitMeasureEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public UnitMeasureEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public UnitMeasureEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this UnitMeasureEntity</param>
		public UnitMeasureEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="unitMeasureCode">PK value for UnitMeasure which data should be fetched into this UnitMeasure object</param>
		public UnitMeasureEntity(System.String unitMeasureCode) : this(unitMeasureCode, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="unitMeasureCode">PK value for UnitMeasure which data should be fetched into this UnitMeasure object</param>
		/// <param name="validator">The custom validator object for this UnitMeasureEntity</param>
		public UnitMeasureEntity(System.String unitMeasureCode, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.UnitMeasureCode = unitMeasureCode;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected UnitMeasureEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'BillOfMaterial' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoBillOfMaterials() { return CreateRelationInfoForNavigator("BillOfMaterials"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Product' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProductsOfSize() { return CreateRelationInfoForNavigator("ProductsOfSize"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Product' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProductsOfWeight() { return CreateRelationInfoForNavigator("ProductsOfWeight"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ProductVendor' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProductVendors() { return CreateRelationInfoForNavigator("ProductVendors"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Unit of measure lookup table.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Unit of measure description.");
			_fieldsCustomProperties.Add("Name", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("UnitMeasureCode", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this UnitMeasureEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static UnitMeasureRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'BillOfMaterial' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathBillOfMaterials { get { return _staticMetaData.GetPrefetchPathElement("BillOfMaterials", CommonEntityBase.CreateEntityCollection<BillOfMaterialEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Product' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProductsOfSize { get { return _staticMetaData.GetPrefetchPathElement("ProductsOfSize", CommonEntityBase.CreateEntityCollection<ProductEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Product' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProductsOfWeight { get { return _staticMetaData.GetPrefetchPathElement("ProductsOfWeight", CommonEntityBase.CreateEntityCollection<ProductEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProductVendor' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProductVendors { get { return _staticMetaData.GetPrefetchPathElement("ProductVendors", CommonEntityBase.CreateEntityCollection<ProductVendorEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The ModifiedDate property of the Entity UnitMeasure<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "UnitMeasure"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)UnitMeasureFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)UnitMeasureFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The Name property of the Entity UnitMeasure<br/><br/>MS_Description: Unit of measure description.<br/>Unit of measure description.</summary>
		/// <remarks>Mapped on  table field: "UnitMeasure"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)UnitMeasureFieldIndex.Name, true); }
			set	{ SetValue((int)UnitMeasureFieldIndex.Name, value); }
		}

		/// <summary>The UnitMeasureCode property of the Entity UnitMeasure<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "UnitMeasure"."UnitMeasureCode".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 3.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String UnitMeasureCode
		{
			get { return (System.String)GetValue((int)UnitMeasureFieldIndex.UnitMeasureCode, true); }
			set	{ SetValue((int)UnitMeasureFieldIndex.UnitMeasureCode, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'BillOfMaterialEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(BillOfMaterialEntity))]
		public virtual EntityCollection<BillOfMaterialEntity> BillOfMaterials { get { return GetOrCreateEntityCollection<BillOfMaterialEntity, BillOfMaterialEntityFactory>("UnitMeasure", true, false, ref _billOfMaterials); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductEntity))]
		public virtual EntityCollection<ProductEntity> ProductsOfSize { get { return GetOrCreateEntityCollection<ProductEntity, ProductEntityFactory>("SizeUnitMeasure", true, false, ref _productsOfSize); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductEntity))]
		public virtual EntityCollection<ProductEntity> ProductsOfWeight { get { return GetOrCreateEntityCollection<ProductEntity, ProductEntityFactory>("WeightUnitMeasure", true, false, ref _productsOfWeight); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProductVendorEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProductVendorEntity))]
		public virtual EntityCollection<ProductVendorEntity> ProductVendors { get { return GetOrCreateEntityCollection<ProductVendorEntity, ProductVendorEntityFactory>("UnitMeasure", true, false, ref _productVendors); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum UnitMeasureFieldIndex
	{
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>Name. </summary>
		Name,
		///<summary>UnitMeasureCode. </summary>
		UnitMeasureCode,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: UnitMeasure. </summary>
	public partial class UnitMeasureRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between UnitMeasureEntity and BillOfMaterialEntity over the 1:n relation they have, using the relation between the fields: UnitMeasure.UnitMeasureCode - BillOfMaterial.UnitMeasureCode</summary>
		public virtual IEntityRelation BillOfMaterialEntityUsingUnitMeasureCode
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "BillOfMaterials", true, new[] { UnitMeasureFields.UnitMeasureCode, BillOfMaterialFields.UnitMeasureCode }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UnitMeasureEntity and ProductEntity over the 1:n relation they have, using the relation between the fields: UnitMeasure.UnitMeasureCode - Product.SizeUnitMeasureCode</summary>
		public virtual IEntityRelation ProductEntityUsingSizeUnitMeasureCode
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ProductsOfSize", true, new[] { UnitMeasureFields.UnitMeasureCode, ProductFields.SizeUnitMeasureCode }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UnitMeasureEntity and ProductEntity over the 1:n relation they have, using the relation between the fields: UnitMeasure.UnitMeasureCode - Product.WeightUnitMeasureCode</summary>
		public virtual IEntityRelation ProductEntityUsingWeightUnitMeasureCode
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ProductsOfWeight", true, new[] { UnitMeasureFields.UnitMeasureCode, ProductFields.WeightUnitMeasureCode }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UnitMeasureEntity and ProductVendorEntity over the 1:n relation they have, using the relation between the fields: UnitMeasure.UnitMeasureCode - ProductVendor.UnitMeasureCode</summary>
		public virtual IEntityRelation ProductVendorEntityUsingUnitMeasureCode
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ProductVendors", true, new[] { UnitMeasureFields.UnitMeasureCode, ProductVendorFields.UnitMeasureCode }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticUnitMeasureRelations
	{
		internal static readonly IEntityRelation BillOfMaterialEntityUsingUnitMeasureCodeStatic = new UnitMeasureRelations().BillOfMaterialEntityUsingUnitMeasureCode;
		internal static readonly IEntityRelation ProductEntityUsingSizeUnitMeasureCodeStatic = new UnitMeasureRelations().ProductEntityUsingSizeUnitMeasureCode;
		internal static readonly IEntityRelation ProductEntityUsingWeightUnitMeasureCodeStatic = new UnitMeasureRelations().ProductEntityUsingWeightUnitMeasureCode;
		internal static readonly IEntityRelation ProductVendorEntityUsingUnitMeasureCodeStatic = new UnitMeasureRelations().ProductVendorEntityUsingUnitMeasureCode;

		/// <summary>CTor</summary>
		static StaticUnitMeasureRelations() { }
	}
}
