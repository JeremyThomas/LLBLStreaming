//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AW.Dal.HelperClasses;
using AW.Dal.FactoryClasses;
using AW.Dal.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AW.Dal.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'VendorAddress'.<br/><br/>MS_Description: Cross-reference mapping vendors and addresses.<br/></summary>
	[Serializable]
	public partial class VendorAddressEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private AddressEntity _address;
		private AddressTypeEntity _addressType;
		private VendorEntity _vendor;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, string>	_customProperties;
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static VendorAddressEntityStaticMetaData _staticMetaData = new VendorAddressEntityStaticMetaData();
		private static VendorAddressRelations _relationsFactory = new VendorAddressRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Address</summary>
			public static readonly string Address = "Address";
			/// <summary>Member name AddressType</summary>
			public static readonly string AddressType = "AddressType";
			/// <summary>Member name Vendor</summary>
			public static readonly string Vendor = "Vendor";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class VendorAddressEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public VendorAddressEntityStaticMetaData()
			{
				SetEntityCoreInfo("VendorAddressEntity", InheritanceHierarchyType.None, false, (int)AW.Dal.EntityType.VendorAddressEntity, typeof(VendorAddressEntity), typeof(VendorAddressEntityFactory), false);
				AddNavigatorMetaData<VendorAddressEntity, AddressEntity>("Address", "VendorAddresses", (a, b) => a._address = b, a => a._address, (a, b) => a.Address = b, AW.Dal.RelationClasses.StaticVendorAddressRelations.AddressEntityUsingAddressIDStatic, ()=>new VendorAddressRelations().AddressEntityUsingAddressID, null, new int[] { (int)VendorAddressFieldIndex.AddressID }, null, true, (int)AW.Dal.EntityType.AddressEntity);
				AddNavigatorMetaData<VendorAddressEntity, AddressTypeEntity>("AddressType", "VendorAddresses", (a, b) => a._addressType = b, a => a._addressType, (a, b) => a.AddressType = b, AW.Dal.RelationClasses.StaticVendorAddressRelations.AddressTypeEntityUsingAddressTypeIDStatic, ()=>new VendorAddressRelations().AddressTypeEntityUsingAddressTypeID, null, new int[] { (int)VendorAddressFieldIndex.AddressTypeID }, null, true, (int)AW.Dal.EntityType.AddressTypeEntity);
				AddNavigatorMetaData<VendorAddressEntity, VendorEntity>("Vendor", "VendorAddresses", (a, b) => a._vendor = b, a => a._vendor, (a, b) => a.Vendor = b, AW.Dal.RelationClasses.StaticVendorAddressRelations.VendorEntityUsingVendorIDStatic, ()=>new VendorAddressRelations().VendorEntityUsingVendorID, null, new int[] { (int)VendorAddressFieldIndex.VendorID }, null, true, (int)AW.Dal.EntityType.VendorEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static VendorAddressEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public VendorAddressEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public VendorAddressEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this VendorAddressEntity</param>
		public VendorAddressEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="addressID">PK value for VendorAddress which data should be fetched into this VendorAddress object</param>
		/// <param name="vendorID">PK value for VendorAddress which data should be fetched into this VendorAddress object</param>
		public VendorAddressEntity(System.Int32 addressID, System.Int32 vendorID) : this(addressID, vendorID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="addressID">PK value for VendorAddress which data should be fetched into this VendorAddress object</param>
		/// <param name="vendorID">PK value for VendorAddress which data should be fetched into this VendorAddress object</param>
		/// <param name="validator">The custom validator object for this VendorAddressEntity</param>
		public VendorAddressEntity(System.Int32 addressID, System.Int32 vendorID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.AddressID = addressID;
			this.VendorID = vendorID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected VendorAddressEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Address' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAddress() { return CreateRelationInfoForNavigator("Address"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AddressType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAddressType() { return CreateRelationInfoForNavigator("AddressType"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Vendor' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoVendor() { return CreateRelationInfoForNavigator("Vendor"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Dictionary<string, string>();
			_customProperties.Add("MS_Description", @"Cross-reference mapping vendors and addresses.");
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Primary key. Foreign key to Address.AddressID.");
			_fieldsCustomProperties.Add("AddressID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Address type. Foreign key to AddressType.AddressTypeID.");
			_fieldsCustomProperties.Add("AddressTypeID", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Date and time the record was last updated.");
			_fieldsCustomProperties.Add("ModifiedDate", fieldHashtable);
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MS_Description", @"Clustered index created by a primary key constraint.");
			_fieldsCustomProperties.Add("VendorID", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this VendorAddressEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static VendorAddressRelations Relations { get { return _relationsFactory; } }

		/// <summary>The custom properties for this entity type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, string> CustomProperties { get { return _customProperties;} }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Address' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAddress { get { return _staticMetaData.GetPrefetchPathElement("Address", CommonEntityBase.CreateEntityCollection<AddressEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AddressType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAddressType { get { return _staticMetaData.GetPrefetchPathElement("AddressType", CommonEntityBase.CreateEntityCollection<AddressTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Vendor' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathVendor { get { return _staticMetaData.GetPrefetchPathElement("Vendor", CommonEntityBase.CreateEntityCollection<VendorEntity>()); } }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, string> CustomPropertiesOfType { get { return CustomProperties;} }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The AddressID property of the Entity VendorAddress<br/><br/>MS_Description: Primary key. Foreign key to Address.AddressID.<br/>Primary key. Foreign key to Address.AddressID.</summary>
		/// <remarks>Mapped on  table field: "VendorAddress"."AddressID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 AddressID
		{
			get { return (System.Int32)GetValue((int)VendorAddressFieldIndex.AddressID, true); }
			set	{ SetValue((int)VendorAddressFieldIndex.AddressID, value); }
		}

		/// <summary>The AddressTypeID property of the Entity VendorAddress<br/><br/>MS_Description: Address type. Foreign key to AddressType.AddressTypeID.<br/>Address type. Foreign key to AddressType.AddressTypeID.</summary>
		/// <remarks>Mapped on  table field: "VendorAddress"."AddressTypeID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual AW.Data.AddressType AddressTypeID
		{
			get { return (AW.Data.AddressType)GetValue((int)VendorAddressFieldIndex.AddressTypeID, true); }
			set	{ SetValue((int)VendorAddressFieldIndex.AddressTypeID, value); }
		}

		/// <summary>The ModifiedDate property of the Entity VendorAddress<br/><br/>MS_Description: Date and time the record was last updated.<br/>Date and time the record was last updated.</summary>
		/// <remarks>Mapped on  table field: "VendorAddress"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)VendorAddressFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)VendorAddressFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The VendorID property of the Entity VendorAddress<br/><br/>MS_Description: Clustered index created by a primary key constraint.<br/>Clustered index created by a primary key constraint.</summary>
		/// <remarks>Mapped on  table field: "VendorAddress"."VendorID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 VendorID
		{
			get { return (System.Int32)GetValue((int)VendorAddressFieldIndex.VendorID, true); }
			set	{ SetValue((int)VendorAddressFieldIndex.VendorID, value); }
		}

		/// <summary>Gets / sets related entity of type 'AddressEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual AddressEntity Address
		{
			get { return _address; }
			set { SetSingleRelatedEntityNavigator(value, "Address"); }
		}

		/// <summary>Gets / sets related entity of type 'AddressTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual AddressTypeEntity AddressType
		{
			get { return _addressType; }
			set { SetSingleRelatedEntityNavigator(value, "AddressType"); }
		}

		/// <summary>Gets / sets related entity of type 'VendorEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual VendorEntity Vendor
		{
			get { return _vendor; }
			set { SetSingleRelatedEntityNavigator(value, "Vendor"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AW.Dal
{
	public enum VendorAddressFieldIndex
	{
		///<summary>AddressID. </summary>
		AddressID,
		///<summary>AddressTypeID. </summary>
		AddressTypeID,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>VendorID. </summary>
		VendorID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AW.Dal.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: VendorAddress. </summary>
	public partial class VendorAddressRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between VendorAddressEntity and AddressEntity over the m:1 relation they have, using the relation between the fields: VendorAddress.AddressID - Address.AddressID</summary>
		public virtual IEntityRelation AddressEntityUsingAddressID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Address", false, new[] { AddressFields.AddressID, VendorAddressFields.AddressID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between VendorAddressEntity and AddressTypeEntity over the m:1 relation they have, using the relation between the fields: VendorAddress.AddressTypeID - AddressType.AddressTypeID</summary>
		public virtual IEntityRelation AddressTypeEntityUsingAddressTypeID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "AddressType", false, new[] { AddressTypeFields.AddressTypeID, VendorAddressFields.AddressTypeID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between VendorAddressEntity and VendorEntity over the m:1 relation they have, using the relation between the fields: VendorAddress.VendorID - Vendor.VendorID</summary>
		public virtual IEntityRelation VendorEntityUsingVendorID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Vendor", false, new[] { VendorFields.VendorID, VendorAddressFields.VendorID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticVendorAddressRelations
	{
		internal static readonly IEntityRelation AddressEntityUsingAddressIDStatic = new VendorAddressRelations().AddressEntityUsingAddressID;
		internal static readonly IEntityRelation AddressTypeEntityUsingAddressTypeIDStatic = new VendorAddressRelations().AddressTypeEntityUsingAddressTypeID;
		internal static readonly IEntityRelation VendorEntityUsingVendorIDStatic = new VendorAddressRelations().VendorEntityUsingVendorID;

		/// <summary>CTor</summary>
		static StaticVendorAddressRelations() { }
	}
}
