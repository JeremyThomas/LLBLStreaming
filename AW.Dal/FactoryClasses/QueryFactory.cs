//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
////////////////////////////////////////////////////////////// 
using System;
using System.Linq;
using AW.Dal.EntityClasses;
using AW.Dal.HelperClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;
using SD.LLBLGen.Pro.QuerySpec.AdapterSpecific;
using SD.LLBLGen.Pro.QuerySpec;

namespace AW.Dal.FactoryClasses
{
	/// <summary>Factory class to produce DynamicQuery instances and EntityQuery instances</summary>
	public partial class QueryFactory : QueryFactoryBase2
	{
		/// <summary>Creates and returns a new EntityQuery for the AwbuildVersion entity</summary>
		public EntityQuery<AwbuildVersionEntity> AwbuildVersion { get { return Create<AwbuildVersionEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the DatabaseLog entity</summary>
		public EntityQuery<DatabaseLogEntity> DatabaseLog { get { return Create<DatabaseLogEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ErrorLog entity</summary>
		public EntityQuery<ErrorLogEntity> ErrorLog { get { return Create<ErrorLogEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Department entity</summary>
		public EntityQuery<DepartmentEntity> Department { get { return Create<DepartmentEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Employee entity</summary>
		public EntityQuery<EmployeeEntity> Employee { get { return Create<EmployeeEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the EmployeeAddress entity</summary>
		public EntityQuery<EmployeeAddressEntity> EmployeeAddress { get { return Create<EmployeeAddressEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the EmployeeDepartmentHistory entity</summary>
		public EntityQuery<EmployeeDepartmentHistoryEntity> EmployeeDepartmentHistory { get { return Create<EmployeeDepartmentHistoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the EmployeePayHistory entity</summary>
		public EntityQuery<EmployeePayHistoryEntity> EmployeePayHistory { get { return Create<EmployeePayHistoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the JobCandidate entity</summary>
		public EntityQuery<JobCandidateEntity> JobCandidate { get { return Create<JobCandidateEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Shift entity</summary>
		public EntityQuery<ShiftEntity> Shift { get { return Create<ShiftEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Address entity</summary>
		public EntityQuery<AddressEntity> Address { get { return Create<AddressEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the AddressType entity</summary>
		public EntityQuery<AddressTypeEntity> AddressType { get { return Create<AddressTypeEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Contact entity</summary>
		public EntityQuery<ContactEntity> Contact { get { return Create<ContactEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ContactType entity</summary>
		public EntityQuery<ContactTypeEntity> ContactType { get { return Create<ContactTypeEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the CountryRegion entity</summary>
		public EntityQuery<CountryRegionEntity> CountryRegion { get { return Create<CountryRegionEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the StateProvince entity</summary>
		public EntityQuery<StateProvinceEntity> StateProvince { get { return Create<StateProvinceEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the BillOfMaterial entity</summary>
		public EntityQuery<BillOfMaterialEntity> BillOfMaterial { get { return Create<BillOfMaterialEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Culture entity</summary>
		public EntityQuery<CultureEntity> Culture { get { return Create<CultureEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Document entity</summary>
		public EntityQuery<DocumentEntity> Document { get { return Create<DocumentEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Illustration entity</summary>
		public EntityQuery<IllustrationEntity> Illustration { get { return Create<IllustrationEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Location entity</summary>
		public EntityQuery<LocationEntity> Location { get { return Create<LocationEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Product entity</summary>
		public EntityQuery<ProductEntity> Product { get { return Create<ProductEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductCategory entity</summary>
		public EntityQuery<ProductCategoryEntity> ProductCategory { get { return Create<ProductCategoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductCostHistory entity</summary>
		public EntityQuery<ProductCostHistoryEntity> ProductCostHistory { get { return Create<ProductCostHistoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductDescription entity</summary>
		public EntityQuery<ProductDescriptionEntity> ProductDescription { get { return Create<ProductDescriptionEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductDocument entity</summary>
		public EntityQuery<ProductDocumentEntity> ProductDocument { get { return Create<ProductDocumentEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductInventory entity</summary>
		public EntityQuery<ProductInventoryEntity> ProductInventory { get { return Create<ProductInventoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductListPriceHistory entity</summary>
		public EntityQuery<ProductListPriceHistoryEntity> ProductListPriceHistory { get { return Create<ProductListPriceHistoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductModel entity</summary>
		public EntityQuery<ProductModelEntity> ProductModel { get { return Create<ProductModelEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductModelIllustration entity</summary>
		public EntityQuery<ProductModelIllustrationEntity> ProductModelIllustration { get { return Create<ProductModelIllustrationEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductModelProductDescriptionCulture entity</summary>
		public EntityQuery<ProductModelProductDescriptionCultureEntity> ProductModelProductDescriptionCulture { get { return Create<ProductModelProductDescriptionCultureEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductPhoto entity</summary>
		public EntityQuery<ProductPhotoEntity> ProductPhoto { get { return Create<ProductPhotoEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductProductPhoto entity</summary>
		public EntityQuery<ProductProductPhotoEntity> ProductProductPhoto { get { return Create<ProductProductPhotoEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductReview entity</summary>
		public EntityQuery<ProductReviewEntity> ProductReview { get { return Create<ProductReviewEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductSubcategory entity</summary>
		public EntityQuery<ProductSubcategoryEntity> ProductSubcategory { get { return Create<ProductSubcategoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the PurchaseOrderHistory entity</summary>
		public EntityQuery<PurchaseOrderHistoryEntity> PurchaseOrderHistory { get { return Create<PurchaseOrderHistoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SalesOrderHistory entity</summary>
		public EntityQuery<SalesOrderHistoryEntity> SalesOrderHistory { get { return Create<SalesOrderHistoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ScrapReason entity</summary>
		public EntityQuery<ScrapReasonEntity> ScrapReason { get { return Create<ScrapReasonEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the TransactionHistory entity</summary>
		public EntityQuery<TransactionHistoryEntity> TransactionHistory { get { return Create<TransactionHistoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the TransactionHistoryArchive entity</summary>
		public EntityQuery<TransactionHistoryArchiveEntity> TransactionHistoryArchive { get { return Create<TransactionHistoryArchiveEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the UnitMeasure entity</summary>
		public EntityQuery<UnitMeasureEntity> UnitMeasure { get { return Create<UnitMeasureEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the WorkOrder entity</summary>
		public EntityQuery<WorkOrderEntity> WorkOrder { get { return Create<WorkOrderEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the WorkOrderHistory entity</summary>
		public EntityQuery<WorkOrderHistoryEntity> WorkOrderHistory { get { return Create<WorkOrderHistoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the WorkOrderRouting entity</summary>
		public EntityQuery<WorkOrderRoutingEntity> WorkOrderRouting { get { return Create<WorkOrderRoutingEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ProductVendor entity</summary>
		public EntityQuery<ProductVendorEntity> ProductVendor { get { return Create<ProductVendorEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the PurchaseOrderDetail entity</summary>
		public EntityQuery<PurchaseOrderDetailEntity> PurchaseOrderDetail { get { return Create<PurchaseOrderDetailEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the PurchaseOrderHeader entity</summary>
		public EntityQuery<PurchaseOrderHeaderEntity> PurchaseOrderHeader { get { return Create<PurchaseOrderHeaderEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ShipMethod entity</summary>
		public EntityQuery<ShipMethodEntity> ShipMethod { get { return Create<ShipMethodEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Vendor entity</summary>
		public EntityQuery<VendorEntity> Vendor { get { return Create<VendorEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the VendorAddress entity</summary>
		public EntityQuery<VendorAddressEntity> VendorAddress { get { return Create<VendorAddressEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the VendorContact entity</summary>
		public EntityQuery<VendorContactEntity> VendorContact { get { return Create<VendorContactEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ContactCreditCard entity</summary>
		public EntityQuery<ContactCreditCardEntity> ContactCreditCard { get { return Create<ContactCreditCardEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the CountryRegionCurrency entity</summary>
		public EntityQuery<CountryRegionCurrencyEntity> CountryRegionCurrency { get { return Create<CountryRegionCurrencyEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the CreditCard entity</summary>
		public EntityQuery<CreditCardEntity> CreditCard { get { return Create<CreditCardEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Currency entity</summary>
		public EntityQuery<CurrencyEntity> Currency { get { return Create<CurrencyEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the CurrencyRate entity</summary>
		public EntityQuery<CurrencyRateEntity> CurrencyRate { get { return Create<CurrencyRateEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Customer entity</summary>
		public EntityQuery<CustomerEntity> Customer { get { return Create<CustomerEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the CustomerAddress entity</summary>
		public EntityQuery<CustomerAddressEntity> CustomerAddress { get { return Create<CustomerAddressEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the CustomerViewRelated entity</summary>
		public EntityQuery<CustomerViewRelatedEntity> CustomerViewRelated { get { return Create<CustomerViewRelatedEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Individual entity</summary>
		public EntityQuery<IndividualEntity> Individual { get { return Create<IndividualEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SalesOrderDetail entity</summary>
		public EntityQuery<SalesOrderDetailEntity> SalesOrderDetail { get { return Create<SalesOrderDetailEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SalesOrderHeader entity</summary>
		public EntityQuery<SalesOrderHeaderEntity> SalesOrderHeader { get { return Create<SalesOrderHeaderEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SalesOrderHeaderSalesReason entity</summary>
		public EntityQuery<SalesOrderHeaderSalesReasonEntity> SalesOrderHeaderSalesReason { get { return Create<SalesOrderHeaderSalesReasonEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SalesPerson entity</summary>
		public EntityQuery<SalesPersonEntity> SalesPerson { get { return Create<SalesPersonEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SalesPersonQuotaHistory entity</summary>
		public EntityQuery<SalesPersonQuotaHistoryEntity> SalesPersonQuotaHistory { get { return Create<SalesPersonQuotaHistoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SalesReason entity</summary>
		public EntityQuery<SalesReasonEntity> SalesReason { get { return Create<SalesReasonEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SalesTaxRate entity</summary>
		public EntityQuery<SalesTaxRateEntity> SalesTaxRate { get { return Create<SalesTaxRateEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SalesTerritory entity</summary>
		public EntityQuery<SalesTerritoryEntity> SalesTerritory { get { return Create<SalesTerritoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SalesTerritoryHistory entity</summary>
		public EntityQuery<SalesTerritoryHistoryEntity> SalesTerritoryHistory { get { return Create<SalesTerritoryHistoryEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ShoppingCartItem entity</summary>
		public EntityQuery<ShoppingCartItemEntity> ShoppingCartItem { get { return Create<ShoppingCartItemEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SpecialOffer entity</summary>
		public EntityQuery<SpecialOfferEntity> SpecialOffer { get { return Create<SpecialOfferEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SpecialOfferProduct entity</summary>
		public EntityQuery<SpecialOfferProductEntity> SpecialOfferProduct { get { return Create<SpecialOfferProductEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Store entity</summary>
		public EntityQuery<StoreEntity> Store { get { return Create<StoreEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the StoreContact entity</summary>
		public EntityQuery<StoreContactEntity> StoreContact { get { return Create<StoreContactEntity>(); } }

		/// <inheritdoc/>
		protected override IElementCreatorCore CreateElementCreator() { return new ElementCreator(); }
 
		/// <summary>Creates and returns the query to fetch the typed view Sales.CustomerViewQuerySpec</summary>
		public DynamicQuery<AW.Dal.TypedViewClasses.CustomerViewQuerySpecRow> CustomerViewQuerySpec
		{
			get { return this.Create().Select<AW.Dal.TypedViewClasses.CustomerViewQuerySpecRow, AW.Dal.HelperClasses.CustomerViewQuerySpecFields>(); }
		}

		/// <summary>Gets the query to fetch the typed list Sales.CustomerListQuerySpec</summary>
		/// <param name="root">Optional. If specified (not null) it's used as the root of the query to fetch the typed list, otherwise a new EntityQuery(Of AddressEntity) is used</param>
		/// <returns>Dynamic Query which fetches <see cref="AW.Dal.TypedListClasses.CustomerListQuerySpecRow"/> instances </returns>
		public DynamicQuery<AW.Dal.TypedListClasses.CustomerListQuerySpecRow> GetCustomerListQuerySpecTypedList(EntityQuery<AddressEntity> root=null)
		{
			var rootOfQuery = root ?? this.Address;
			return this.Create()
						.Select(() => new AW.Dal.TypedListClasses.CustomerListQuerySpecRow()
								{
									AddressLine1 = AddressFields.AddressLine1.ToValue<System.String>(),
									AddressLine2 = AddressFields.AddressLine2.ToValue<System.String>(),
									AddressType = AddressTypeFields.Name.As("AddressType").ToValue<System.String>(),
									City = AddressFields.City.ToValue<System.String>(),
									CountryRegionName = StateProvinceFields.Name.As("CountryRegionName").ToValue<System.String>(),
									CustomerId = IndividualFields.CustomerID.As("CustomerId").ToValue<System.Int32>(),
									Demographics = IndividualFields.Demographics.ToValue<System.String>(),
									EmailAddress = ContactFields.EmailAddress.ToValue<System.String>(),
									EmailPromotion = ContactFields.EmailPromotion.ToValue<AW.Data.EmailPromotion>(),
									FirstName = ContactFields.FirstName.ToValue<System.String>(),
									LastName = ContactFields.LastName.ToValue<System.String>(),
									MiddleName = ContactFields.MiddleName.ToValue<System.String>(),
									Phone = ContactFields.Phone.ToValue<System.String>(),
									PostalCode = AddressFields.PostalCode.ToValue<System.String>(),
									StateProvinceName = CountryRegionFields.Name.As("StateProvinceName").ToValue<System.String>(),
									Suffix = ContactFields.Suffix.ToValue<System.String>(),
									Title = ContactFields.Title.ToValue<System.String>()
								})
						.From(rootOfQuery
								.InnerJoin(this.StateProvince).On(AddressFields.StateProvinceID.Equal(StateProvinceFields.StateProvinceID))
								.InnerJoin(this.CustomerAddress).On(AddressFields.AddressID.Equal(CustomerAddressFields.AddressID))
								.InnerJoin(this.CountryRegion).On(StateProvinceFields.CountryRegionCode.Equal(CountryRegionFields.CountryRegionCode))
								.InnerJoin(this.AddressType).On(CustomerAddressFields.AddressTypeID.Equal(AddressTypeFields.AddressTypeID))
								.InnerJoin(this.Individual).On(CustomerAddressFields.CustomerID.Equal(IndividualFields.CustomerID))
								.InnerJoin(this.Contact).On(IndividualFields.ContactID.Equal(ContactFields.ContactID)));
		}

	}
}