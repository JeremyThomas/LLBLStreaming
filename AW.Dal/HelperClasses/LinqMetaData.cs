//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Linq;
using System.Collections.Generic;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;
using AW.Dal.EntityClasses;
using AW.Dal.FactoryClasses;

namespace AW.Dal.Linq
{
	/// <summary>Meta-data class for the construction of Linq queries which are to be executed using LLBLGen Pro code.</summary>
	public partial class LinqMetaData: ILinqMetaData
	{
		/// <summary>CTor. Using this ctor will leave the IDataAccessAdapter object to use empty. To be able to execute the query, an IDataAccessAdapter instance
		/// is required, and has to be set on the LLBLGenProProvider2 object in the query to execute. </summary>
		public LinqMetaData() : this(null, null) { }
		
		/// <summary>CTor which accepts an IDataAccessAdapter implementing object, which will be used to execute queries created with this metadata class.</summary>
		/// <param name="adapterToUse">the IDataAccessAdapter to use in queries created with this meta data</param>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data till they go out of scope.</remarks>
		public LinqMetaData(IDataAccessAdapter adapterToUse) : this (adapterToUse, null) { }

		/// <summary>CTor which accepts an IDataAccessAdapter implementing object, which will be used to execute queries created with this metadata class.</summary>
		/// <param name="adapterToUse">the IDataAccessAdapter to use in queries created with this meta data</param>
		/// <param name="customFunctionMappings">The custom function mappings to use. These take higher precedence than the ones in the DQE to use.</param>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data till they go out of scope.</remarks>
		public LinqMetaData(IDataAccessAdapter adapterToUse, FunctionMappingStore customFunctionMappings)
		{
			this.AdapterToUse = adapterToUse;
			this.CustomFunctionMappings = customFunctionMappings;
		}
	
		/// <summary>returns the datasource to use in a Linq query for the entity type specified</summary>
		/// <param name="typeOfEntity">the type of the entity to get the datasource for</param>
		/// <returns>the requested datasource</returns>
		public IDataSource GetQueryableForEntity(int typeOfEntity)
		{
			switch((AW.Dal.EntityType)typeOfEntity)
			{
				case AW.Dal.EntityType.AwbuildVersionEntity:
					return this.AwbuildVersion;
				case AW.Dal.EntityType.DatabaseLogEntity:
					return this.DatabaseLog;
				case AW.Dal.EntityType.ErrorLogEntity:
					return this.ErrorLog;
				case AW.Dal.EntityType.DepartmentEntity:
					return this.Department;
				case AW.Dal.EntityType.EmployeeEntity:
					return this.Employee;
				case AW.Dal.EntityType.EmployeeAddressEntity:
					return this.EmployeeAddress;
				case AW.Dal.EntityType.EmployeeDepartmentHistoryEntity:
					return this.EmployeeDepartmentHistory;
				case AW.Dal.EntityType.EmployeePayHistoryEntity:
					return this.EmployeePayHistory;
				case AW.Dal.EntityType.JobCandidateEntity:
					return this.JobCandidate;
				case AW.Dal.EntityType.ShiftEntity:
					return this.Shift;
				case AW.Dal.EntityType.AddressEntity:
					return this.Address;
				case AW.Dal.EntityType.AddressTypeEntity:
					return this.AddressType;
				case AW.Dal.EntityType.ContactEntity:
					return this.Contact;
				case AW.Dal.EntityType.ContactTypeEntity:
					return this.ContactType;
				case AW.Dal.EntityType.CountryRegionEntity:
					return this.CountryRegion;
				case AW.Dal.EntityType.StateProvinceEntity:
					return this.StateProvince;
				case AW.Dal.EntityType.BillOfMaterialEntity:
					return this.BillOfMaterial;
				case AW.Dal.EntityType.CultureEntity:
					return this.Culture;
				case AW.Dal.EntityType.DocumentEntity:
					return this.Document;
				case AW.Dal.EntityType.IllustrationEntity:
					return this.Illustration;
				case AW.Dal.EntityType.LocationEntity:
					return this.Location;
				case AW.Dal.EntityType.ProductEntity:
					return this.Product;
				case AW.Dal.EntityType.ProductCategoryEntity:
					return this.ProductCategory;
				case AW.Dal.EntityType.ProductCostHistoryEntity:
					return this.ProductCostHistory;
				case AW.Dal.EntityType.ProductDescriptionEntity:
					return this.ProductDescription;
				case AW.Dal.EntityType.ProductDocumentEntity:
					return this.ProductDocument;
				case AW.Dal.EntityType.ProductInventoryEntity:
					return this.ProductInventory;
				case AW.Dal.EntityType.ProductListPriceHistoryEntity:
					return this.ProductListPriceHistory;
				case AW.Dal.EntityType.ProductModelEntity:
					return this.ProductModel;
				case AW.Dal.EntityType.ProductModelIllustrationEntity:
					return this.ProductModelIllustration;
				case AW.Dal.EntityType.ProductModelProductDescriptionCultureEntity:
					return this.ProductModelProductDescriptionCulture;
				case AW.Dal.EntityType.ProductPhotoEntity:
					return this.ProductPhoto;
				case AW.Dal.EntityType.ProductProductPhotoEntity:
					return this.ProductProductPhoto;
				case AW.Dal.EntityType.ProductReviewEntity:
					return this.ProductReview;
				case AW.Dal.EntityType.ProductSubcategoryEntity:
					return this.ProductSubcategory;
				case AW.Dal.EntityType.PurchaseOrderHistoryEntity:
					return this.PurchaseOrderHistory;
				case AW.Dal.EntityType.SalesOrderHistoryEntity:
					return this.SalesOrderHistory;
				case AW.Dal.EntityType.ScrapReasonEntity:
					return this.ScrapReason;
				case AW.Dal.EntityType.TransactionHistoryEntity:
					return this.TransactionHistory;
				case AW.Dal.EntityType.TransactionHistoryArchiveEntity:
					return this.TransactionHistoryArchive;
				case AW.Dal.EntityType.UnitMeasureEntity:
					return this.UnitMeasure;
				case AW.Dal.EntityType.WorkOrderEntity:
					return this.WorkOrder;
				case AW.Dal.EntityType.WorkOrderHistoryEntity:
					return this.WorkOrderHistory;
				case AW.Dal.EntityType.WorkOrderRoutingEntity:
					return this.WorkOrderRouting;
				case AW.Dal.EntityType.ProductVendorEntity:
					return this.ProductVendor;
				case AW.Dal.EntityType.PurchaseOrderDetailEntity:
					return this.PurchaseOrderDetail;
				case AW.Dal.EntityType.PurchaseOrderHeaderEntity:
					return this.PurchaseOrderHeader;
				case AW.Dal.EntityType.ShipMethodEntity:
					return this.ShipMethod;
				case AW.Dal.EntityType.VendorEntity:
					return this.Vendor;
				case AW.Dal.EntityType.VendorAddressEntity:
					return this.VendorAddress;
				case AW.Dal.EntityType.VendorContactEntity:
					return this.VendorContact;
				case AW.Dal.EntityType.ContactCreditCardEntity:
					return this.ContactCreditCard;
				case AW.Dal.EntityType.CountryRegionCurrencyEntity:
					return this.CountryRegionCurrency;
				case AW.Dal.EntityType.CreditCardEntity:
					return this.CreditCard;
				case AW.Dal.EntityType.CurrencyEntity:
					return this.Currency;
				case AW.Dal.EntityType.CurrencyRateEntity:
					return this.CurrencyRate;
				case AW.Dal.EntityType.CustomerEntity:
					return this.Customer;
				case AW.Dal.EntityType.CustomerAddressEntity:
					return this.CustomerAddress;
				case AW.Dal.EntityType.CustomerViewRelatedEntity:
					return this.CustomerViewRelated;
				case AW.Dal.EntityType.IndividualEntity:
					return this.Individual;
				case AW.Dal.EntityType.SalesOrderDetailEntity:
					return this.SalesOrderDetail;
				case AW.Dal.EntityType.SalesOrderHeaderEntity:
					return this.SalesOrderHeader;
				case AW.Dal.EntityType.SalesOrderHeaderSalesReasonEntity:
					return this.SalesOrderHeaderSalesReason;
				case AW.Dal.EntityType.SalesPersonEntity:
					return this.SalesPerson;
				case AW.Dal.EntityType.SalesPersonQuotaHistoryEntity:
					return this.SalesPersonQuotaHistory;
				case AW.Dal.EntityType.SalesReasonEntity:
					return this.SalesReason;
				case AW.Dal.EntityType.SalesTaxRateEntity:
					return this.SalesTaxRate;
				case AW.Dal.EntityType.SalesTerritoryEntity:
					return this.SalesTerritory;
				case AW.Dal.EntityType.SalesTerritoryHistoryEntity:
					return this.SalesTerritoryHistory;
				case AW.Dal.EntityType.ShoppingCartItemEntity:
					return this.ShoppingCartItem;
				case AW.Dal.EntityType.SpecialOfferEntity:
					return this.SpecialOffer;
				case AW.Dal.EntityType.SpecialOfferProductEntity:
					return this.SpecialOfferProduct;
				case AW.Dal.EntityType.StoreEntity:
					return this.Store;
				case AW.Dal.EntityType.StoreContactEntity:
					return this.StoreContact;
				default:
					return null;
			}
		}

		/// <summary>returns the datasource to use in a Linq query which wraps the specified SQL query and projects it to instances of type T</summary>
		/// <param name="sqlQuery">The SQL query to execute. Has to follow one of the parameter specification patterns for Plain SQL queries in the LLBLGen Pro Runtime Framework</param>
		/// <param name="parameterValues">The object which will provide the parameter values for the SQL query specified. Has to follow one of the parameter specification patterns for Plain SQL queries in the LLBLGen Pro Runtime Framework</param>
		/// <typeparam name="T">The type of the instances to project the rows into, returned by the SQL query specified</typeparam>
		/// <returns>the requested datasource</returns>
		[InMemoryCandidate]
		public DataSource2<T> FromSql<T>(string sqlQuery, object parameterValues)
			where T : class
		{
			return new DataSource2<T>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse).SetWrappedPlainSQLQuerySpecification(sqlQuery, parameterValues);
		}

		/// <summary>returns the datasource to use in a Linq query for the entity type specified</summary>
		/// <typeparam name="TEntity">the type of the entity to get the datasource for</typeparam>
		/// <returns>the requested datasource</returns>
		public DataSource2<TEntity> GetQueryableForEntity<TEntity>()
				where TEntity : class
		{
			return new DataSource2<TEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse);
		}

		/// <summary>returns the datasource to use in a Linq query when targeting AwbuildVersionEntity instances in the database.</summary>
		public DataSource2<AwbuildVersionEntity> AwbuildVersion {	get { return new DataSource2<AwbuildVersionEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting DatabaseLogEntity instances in the database.</summary>
		public DataSource2<DatabaseLogEntity> DatabaseLog {	get { return new DataSource2<DatabaseLogEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ErrorLogEntity instances in the database.</summary>
		public DataSource2<ErrorLogEntity> ErrorLog {	get { return new DataSource2<ErrorLogEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting DepartmentEntity instances in the database.</summary>
		public DataSource2<DepartmentEntity> Department {	get { return new DataSource2<DepartmentEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting EmployeeEntity instances in the database.</summary>
		public DataSource2<EmployeeEntity> Employee {	get { return new DataSource2<EmployeeEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting EmployeeAddressEntity instances in the database.</summary>
		public DataSource2<EmployeeAddressEntity> EmployeeAddress {	get { return new DataSource2<EmployeeAddressEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting EmployeeDepartmentHistoryEntity instances in the database.</summary>
		public DataSource2<EmployeeDepartmentHistoryEntity> EmployeeDepartmentHistory {	get { return new DataSource2<EmployeeDepartmentHistoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting EmployeePayHistoryEntity instances in the database.</summary>
		public DataSource2<EmployeePayHistoryEntity> EmployeePayHistory {	get { return new DataSource2<EmployeePayHistoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting JobCandidateEntity instances in the database.</summary>
		public DataSource2<JobCandidateEntity> JobCandidate {	get { return new DataSource2<JobCandidateEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ShiftEntity instances in the database.</summary>
		public DataSource2<ShiftEntity> Shift {	get { return new DataSource2<ShiftEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting AddressEntity instances in the database.</summary>
		public DataSource2<AddressEntity> Address {	get { return new DataSource2<AddressEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting AddressTypeEntity instances in the database.</summary>
		public DataSource2<AddressTypeEntity> AddressType {	get { return new DataSource2<AddressTypeEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ContactEntity instances in the database.</summary>
		public DataSource2<ContactEntity> Contact {	get { return new DataSource2<ContactEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ContactTypeEntity instances in the database.</summary>
		public DataSource2<ContactTypeEntity> ContactType {	get { return new DataSource2<ContactTypeEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting CountryRegionEntity instances in the database.</summary>
		public DataSource2<CountryRegionEntity> CountryRegion {	get { return new DataSource2<CountryRegionEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting StateProvinceEntity instances in the database.</summary>
		public DataSource2<StateProvinceEntity> StateProvince {	get { return new DataSource2<StateProvinceEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting BillOfMaterialEntity instances in the database.</summary>
		public DataSource2<BillOfMaterialEntity> BillOfMaterial {	get { return new DataSource2<BillOfMaterialEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting CultureEntity instances in the database.</summary>
		public DataSource2<CultureEntity> Culture {	get { return new DataSource2<CultureEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting DocumentEntity instances in the database.</summary>
		public DataSource2<DocumentEntity> Document {	get { return new DataSource2<DocumentEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting IllustrationEntity instances in the database.</summary>
		public DataSource2<IllustrationEntity> Illustration {	get { return new DataSource2<IllustrationEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting LocationEntity instances in the database.</summary>
		public DataSource2<LocationEntity> Location {	get { return new DataSource2<LocationEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductEntity instances in the database.</summary>
		public DataSource2<ProductEntity> Product {	get { return new DataSource2<ProductEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductCategoryEntity instances in the database.</summary>
		public DataSource2<ProductCategoryEntity> ProductCategory {	get { return new DataSource2<ProductCategoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductCostHistoryEntity instances in the database.</summary>
		public DataSource2<ProductCostHistoryEntity> ProductCostHistory {	get { return new DataSource2<ProductCostHistoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductDescriptionEntity instances in the database.</summary>
		public DataSource2<ProductDescriptionEntity> ProductDescription {	get { return new DataSource2<ProductDescriptionEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductDocumentEntity instances in the database.</summary>
		public DataSource2<ProductDocumentEntity> ProductDocument {	get { return new DataSource2<ProductDocumentEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductInventoryEntity instances in the database.</summary>
		public DataSource2<ProductInventoryEntity> ProductInventory {	get { return new DataSource2<ProductInventoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductListPriceHistoryEntity instances in the database.</summary>
		public DataSource2<ProductListPriceHistoryEntity> ProductListPriceHistory {	get { return new DataSource2<ProductListPriceHistoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductModelEntity instances in the database.</summary>
		public DataSource2<ProductModelEntity> ProductModel {	get { return new DataSource2<ProductModelEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductModelIllustrationEntity instances in the database.</summary>
		public DataSource2<ProductModelIllustrationEntity> ProductModelIllustration {	get { return new DataSource2<ProductModelIllustrationEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductModelProductDescriptionCultureEntity instances in the database.</summary>
		public DataSource2<ProductModelProductDescriptionCultureEntity> ProductModelProductDescriptionCulture {	get { return new DataSource2<ProductModelProductDescriptionCultureEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductPhotoEntity instances in the database.</summary>
		public DataSource2<ProductPhotoEntity> ProductPhoto {	get { return new DataSource2<ProductPhotoEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductProductPhotoEntity instances in the database.</summary>
		public DataSource2<ProductProductPhotoEntity> ProductProductPhoto {	get { return new DataSource2<ProductProductPhotoEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductReviewEntity instances in the database.</summary>
		public DataSource2<ProductReviewEntity> ProductReview {	get { return new DataSource2<ProductReviewEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductSubcategoryEntity instances in the database.</summary>
		public DataSource2<ProductSubcategoryEntity> ProductSubcategory {	get { return new DataSource2<ProductSubcategoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting PurchaseOrderHistoryEntity instances in the database.</summary>
		public DataSource2<PurchaseOrderHistoryEntity> PurchaseOrderHistory {	get { return new DataSource2<PurchaseOrderHistoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SalesOrderHistoryEntity instances in the database.</summary>
		public DataSource2<SalesOrderHistoryEntity> SalesOrderHistory {	get { return new DataSource2<SalesOrderHistoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ScrapReasonEntity instances in the database.</summary>
		public DataSource2<ScrapReasonEntity> ScrapReason {	get { return new DataSource2<ScrapReasonEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting TransactionHistoryEntity instances in the database.</summary>
		public DataSource2<TransactionHistoryEntity> TransactionHistory {	get { return new DataSource2<TransactionHistoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting TransactionHistoryArchiveEntity instances in the database.</summary>
		public DataSource2<TransactionHistoryArchiveEntity> TransactionHistoryArchive {	get { return new DataSource2<TransactionHistoryArchiveEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting UnitMeasureEntity instances in the database.</summary>
		public DataSource2<UnitMeasureEntity> UnitMeasure {	get { return new DataSource2<UnitMeasureEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting WorkOrderEntity instances in the database.</summary>
		public DataSource2<WorkOrderEntity> WorkOrder {	get { return new DataSource2<WorkOrderEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting WorkOrderHistoryEntity instances in the database.</summary>
		public DataSource2<WorkOrderHistoryEntity> WorkOrderHistory {	get { return new DataSource2<WorkOrderHistoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting WorkOrderRoutingEntity instances in the database.</summary>
		public DataSource2<WorkOrderRoutingEntity> WorkOrderRouting {	get { return new DataSource2<WorkOrderRoutingEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ProductVendorEntity instances in the database.</summary>
		public DataSource2<ProductVendorEntity> ProductVendor {	get { return new DataSource2<ProductVendorEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting PurchaseOrderDetailEntity instances in the database.</summary>
		public DataSource2<PurchaseOrderDetailEntity> PurchaseOrderDetail {	get { return new DataSource2<PurchaseOrderDetailEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting PurchaseOrderHeaderEntity instances in the database.</summary>
		public DataSource2<PurchaseOrderHeaderEntity> PurchaseOrderHeader {	get { return new DataSource2<PurchaseOrderHeaderEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ShipMethodEntity instances in the database.</summary>
		public DataSource2<ShipMethodEntity> ShipMethod {	get { return new DataSource2<ShipMethodEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting VendorEntity instances in the database.</summary>
		public DataSource2<VendorEntity> Vendor {	get { return new DataSource2<VendorEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting VendorAddressEntity instances in the database.</summary>
		public DataSource2<VendorAddressEntity> VendorAddress {	get { return new DataSource2<VendorAddressEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting VendorContactEntity instances in the database.</summary>
		public DataSource2<VendorContactEntity> VendorContact {	get { return new DataSource2<VendorContactEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ContactCreditCardEntity instances in the database.</summary>
		public DataSource2<ContactCreditCardEntity> ContactCreditCard {	get { return new DataSource2<ContactCreditCardEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting CountryRegionCurrencyEntity instances in the database.</summary>
		public DataSource2<CountryRegionCurrencyEntity> CountryRegionCurrency {	get { return new DataSource2<CountryRegionCurrencyEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting CreditCardEntity instances in the database.</summary>
		public DataSource2<CreditCardEntity> CreditCard {	get { return new DataSource2<CreditCardEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting CurrencyEntity instances in the database.</summary>
		public DataSource2<CurrencyEntity> Currency {	get { return new DataSource2<CurrencyEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting CurrencyRateEntity instances in the database.</summary>
		public DataSource2<CurrencyRateEntity> CurrencyRate {	get { return new DataSource2<CurrencyRateEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting CustomerEntity instances in the database.</summary>
		public DataSource2<CustomerEntity> Customer {	get { return new DataSource2<CustomerEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting CustomerAddressEntity instances in the database.</summary>
		public DataSource2<CustomerAddressEntity> CustomerAddress {	get { return new DataSource2<CustomerAddressEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting CustomerViewRelatedEntity instances in the database.</summary>
		public DataSource2<CustomerViewRelatedEntity> CustomerViewRelated {	get { return new DataSource2<CustomerViewRelatedEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting IndividualEntity instances in the database.</summary>
		public DataSource2<IndividualEntity> Individual {	get { return new DataSource2<IndividualEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SalesOrderDetailEntity instances in the database.</summary>
		public DataSource2<SalesOrderDetailEntity> SalesOrderDetail {	get { return new DataSource2<SalesOrderDetailEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SalesOrderHeaderEntity instances in the database.</summary>
		public DataSource2<SalesOrderHeaderEntity> SalesOrderHeader {	get { return new DataSource2<SalesOrderHeaderEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SalesOrderHeaderSalesReasonEntity instances in the database.</summary>
		public DataSource2<SalesOrderHeaderSalesReasonEntity> SalesOrderHeaderSalesReason {	get { return new DataSource2<SalesOrderHeaderSalesReasonEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SalesPersonEntity instances in the database.</summary>
		public DataSource2<SalesPersonEntity> SalesPerson {	get { return new DataSource2<SalesPersonEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SalesPersonQuotaHistoryEntity instances in the database.</summary>
		public DataSource2<SalesPersonQuotaHistoryEntity> SalesPersonQuotaHistory {	get { return new DataSource2<SalesPersonQuotaHistoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SalesReasonEntity instances in the database.</summary>
		public DataSource2<SalesReasonEntity> SalesReason {	get { return new DataSource2<SalesReasonEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SalesTaxRateEntity instances in the database.</summary>
		public DataSource2<SalesTaxRateEntity> SalesTaxRate {	get { return new DataSource2<SalesTaxRateEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SalesTerritoryEntity instances in the database.</summary>
		public DataSource2<SalesTerritoryEntity> SalesTerritory {	get { return new DataSource2<SalesTerritoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SalesTerritoryHistoryEntity instances in the database.</summary>
		public DataSource2<SalesTerritoryHistoryEntity> SalesTerritoryHistory {	get { return new DataSource2<SalesTerritoryHistoryEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ShoppingCartItemEntity instances in the database.</summary>
		public DataSource2<ShoppingCartItemEntity> ShoppingCartItem {	get { return new DataSource2<ShoppingCartItemEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SpecialOfferEntity instances in the database.</summary>
		public DataSource2<SpecialOfferEntity> SpecialOffer {	get { return new DataSource2<SpecialOfferEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SpecialOfferProductEntity instances in the database.</summary>
		public DataSource2<SpecialOfferProductEntity> SpecialOfferProduct {	get { return new DataSource2<SpecialOfferProductEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting StoreEntity instances in the database.</summary>
		public DataSource2<StoreEntity> Store {	get { return new DataSource2<StoreEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting StoreContactEntity instances in the database.</summary>
		public DataSource2<StoreContactEntity> StoreContact {	get { return new DataSource2<StoreContactEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		

		/// <summary>returns the datasource to use in a Linq query when targeting Sales.CustomerView instances in the database.</summary>
		public DataSource2<AW.Dal.TypedViewClasses.CustomerViewRow> CustomerView
		{
			get { return new DataSource2<AW.Dal.TypedViewClasses.CustomerViewRow>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse) { TypedViewEnumTypeValue=(int)TypedViewType.CustomerViewTypedView }; }
		}

		/// <summary>returns the datasource to use in a Linq query when targeting Sales.CustomerViewLinq instances in the database.</summary>
		public DataSource2<AW.Dal.TypedViewClasses.CustomerViewLinqRow> CustomerViewLinq
		{
			get { return new DataSource2<AW.Dal.TypedViewClasses.CustomerViewLinqRow>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse) { TypedViewEnumTypeValue=(int)TypedViewType.CustomerViewLinqTypedView }; }
		}

		/// <summary>Gets the query to fetch the typed list Sales.CustomerList</summary>
		/// <param name="root">Optional. If specified (not null) it's used as the root of the query to fetch the typed list, otherwise a new IQueryable(Of AddressEntity) is used</param>
		/// <returns>IQueryable</returns>
		public IQueryable<AW.Dal.TypedListClasses.CustomerListRow> GetCustomerListTypedList(IQueryable<AddressEntity> root = null)
		{
			var current0 = root ?? this.Address;
			var current1 = from person_Address in current0
						   join person_StateProvince in this.StateProvince on person_Address.StateProvinceID equals person_StateProvince.StateProvinceID
						   join sales_CustomerAddress in this.CustomerAddress on person_Address.AddressID equals sales_CustomerAddress.AddressID
						   join person_CountryRegion in this.CountryRegion on person_StateProvince.CountryRegionCode equals person_CountryRegion.CountryRegionCode
						   join person_AddressType in this.AddressType on sales_CustomerAddress.AddressTypeID equals person_AddressType.AddressTypeID
						   join sales_Customer in this.Customer on sales_CustomerAddress.CustomerID equals sales_Customer.CustomerID
						   join sales_Individual in this.Individual on sales_CustomerAddress.CustomerID equals sales_Individual.CustomerID
						   join person_Contact in this.Contact on sales_Individual.ContactID equals person_Contact.ContactID
						   select new AW.Dal.TypedListClasses.CustomerListRow() { AddressLine1 = person_Address.AddressLine1, AddressLine2 = person_Address.AddressLine2, AddressType = person_AddressType.Name, City = person_Address.City, CountryRegionName = person_StateProvince.Name, CustomerId = sales_Individual.CustomerID, Demographics = sales_Individual.Demographics, EmailAddress = person_Contact.EmailAddress, EmailPromotion = person_Contact.EmailPromotion, FirstName = person_Contact.FirstName, LastName = person_Contact.LastName, MiddleName = person_Contact.MiddleName, Phone = person_Contact.Phone, PostalCode = person_Address.PostalCode, StateProvinceName = person_CountryRegion.Name, Suffix = person_Contact.Suffix, Title = person_Contact.Title };
			return current1;
		}

		/// <summary>Gets the query to fetch the typed list Sales.CustomerListLinq</summary>
		/// <param name="root">Optional. If specified (not null) it's used as the root of the query to fetch the typed list, otherwise a new IQueryable(Of AddressEntity) is used</param>
		/// <returns>IQueryable</returns>
		public IQueryable<AW.Dal.TypedListClasses.CustomerListLinqRow> GetCustomerListLinqTypedList(IQueryable<AddressEntity> root = null)
		{
			var current0 = root ?? this.Address;
			var current1 = from person_Address in current0
						   join person_StateProvince in this.StateProvince on person_Address.StateProvinceID equals person_StateProvince.StateProvinceID
						   join sales_CustomerAddress in this.CustomerAddress on person_Address.AddressID equals sales_CustomerAddress.AddressID
						   join person_CountryRegion in this.CountryRegion on person_StateProvince.CountryRegionCode equals person_CountryRegion.CountryRegionCode
						   join person_AddressType in this.AddressType on sales_CustomerAddress.AddressTypeID equals person_AddressType.AddressTypeID
						   join sales_Individual in this.Individual on sales_CustomerAddress.CustomerID equals sales_Individual.CustomerID
						   join person_Contact in this.Contact on sales_Individual.ContactID equals person_Contact.ContactID
						   select new AW.Dal.TypedListClasses.CustomerListLinqRow() { AddressLine1 = person_Address.AddressLine1, AddressLine2 = person_Address.AddressLine2, AddressType = person_AddressType.Name, City = person_Address.City, CountryRegionName = person_StateProvince.Name, CustomerId = sales_Individual.CustomerID, Demographics = sales_Individual.Demographics, EmailAddress = person_Contact.EmailAddress, EmailPromotion = person_Contact.EmailPromotion, FirstName = person_Contact.FirstName, LastName = person_Contact.LastName, MiddleName = person_Contact.MiddleName, Phone = person_Contact.Phone, PostalCode = person_Address.PostalCode, StateProvinceName = person_CountryRegion.Name, Suffix = person_Contact.Suffix, Title = person_Contact.Title };
			return current1;
		}


		/// <summary> Gets / sets the IDataAccessAdapter to use for the queries created with this meta data object.</summary>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data
		/// till they go out of scope.</remarks>
		public IDataAccessAdapter AdapterToUse { get; set; }
		
		/// <summary>Gets or sets the custom function mappings to use. These take higher precedence than the ones in the DQE to use</summary>
		public FunctionMappingStore CustomFunctionMappings { get; set; }
		
		/// <summary>Gets or sets the Context instance to use for entity fetches.</summary>
		public Context ContextToUse { get; set; }
	}
}