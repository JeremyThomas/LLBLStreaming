using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
using log4net;
using static log4net.LogManager;

namespace AW.Helper
{
  /// <summary>
  ///   Contains a response message that is returned to the page via AJAX.
  ///   Unlike AjaxResponse it doesn't show result in a dialog
  /// </summary>
  /// <see cref="AjaxResponse" />
  /// <see cref="AjaxResponseData" />
  public class AjaxResponseMessage
  {
    public bool IsAjaxResponse => true;
    static readonly ILog Logger = GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

    //For compatibility after spelling fix
    [Obsolete("Use Successful instead")]
    public bool Successfull => Successful;

    public bool Successful { get; set; }
    public string Message { get; set; }

    /// <summary>
    ///   Display message as information toast rather than success toast
    /// </summary>
    public bool MessageIsInfo { get; set; }

    public string Title { get; set; }

    /// <summary>
    ///   Gets or sets the updated page model.
    ///   If a workflow alters what the user can see then reload the page model by assigning it to this
    /// </summary>
    /// <value>
    ///   The updated page model.
    /// </value>
    /// <autogeneratedoc />
    public object UpdatedPageModel { get; set; }

    /// <summary>
    ///   Gets or sets the updated view model.
    /// </summary>
    /// <value>
    ///   The updated view model.
    /// </value>
    /// <autogeneratedoc />
    public object UpdatedViewModel { get; set; }

    // ReSharper disable InconsistentNaming
    public string result;
    public string url;
    public string RedirectUrl { get; set; }
    public IList<AjaxResponseData> Data { get; set; }
    public IList<ErrorReasonInfo> Errors { get; set; }
    public IList<AjaxResponseData> Confirmations { get; set; }
    public IEnumerable<AjaxResponseButton> ConfirmButtons { get; set; } = new List<AjaxResponseButton>();
    public string ConfirmTitle { get; set; }
    public HttpStatusCode? HttpStatusCode { get; protected set; }

    void SetConfirmation(string title, string message)
    {
      Confirmations = new[] {new AjaxResponseData("", message)};
      ConfirmTitle = title;
      Title = title; // Shouldn't need both
    }

    public AjaxResponseMessage SetConfirmation(string title, string message, params AjaxResponseButton[] buttons)
    {
      SetConfirmation(title, message);
      ConfirmButtons = buttons;
      return this;
    }

    public AjaxResponseMessage SetConfirmationUrlOnYes(string urlOnYes)
    {
      foreach (var ajaxResponseButton in ConfirmButtons.Where(b => b.ButtonText == "Labels.buttonLabel_Yes" && b.Url.IsNullOrEmpty()))
        ajaxResponseButton.Url = urlOnYes;
      return this;
    }

    /// <summary>
    ///   Create a Confirmation response which will generate a dialog for the user
    /// </summary>
    /// <param name="title"></param>
    /// <param name="message"></param>
    /// <param name="urlOnYes">Generally the same URL as orig with a confirmed = true param</param>
    /// <param name="trueParam">e.g. confirm</param>
    /// <returns></returns>
    public static AjaxResponseMessage CreateConfirmation(string title, string message, string urlOnYes = null, string trueParam = AjaxResponseButton.DefaultConfirmParam)
    {
      return new AjaxResponseMessage().SetConfirmation(title, message, urlOnYes, trueParam);
    }

    public AjaxResponseMessage SetConfirmation(string title, string message, string urlOnYes, string urlOnNo = null, string trueParam = AjaxResponseButton.DefaultConfirmParam)
    {
      return SetConfirmation(title, message, new AjaxResponseButton("Labels.buttonLabel_Yes", urlOnYes, trueParam), new AjaxResponseButton("Labels.buttonLabel_No", urlOnNo));
    }

    // ReSharper restore InconsistentNaming

    public AjaxResponseMessage(IList<ErrorReasonInfo> errors = null)
    {
      Errors = errors ?? new List<ErrorReasonInfo>();
      Data = new List<AjaxResponseData>();
      Confirmations = new List<AjaxResponseData>();
      Successful = !Errors.Any();
      if (!Successful)
        SetMessageWithAnyErrors(null, ",");
    }

    public AjaxResponseMessage(bool successful, string message = null) : this()
    {
      Successful = successful;
      Message = message;
    }

    public AjaxResponseMessage(bool successful, string message, string errorMessage) : this(successful, successful ? message : errorMessage)
    {
    }

    public AjaxResponseMessage(string message, bool successful = false) : this(successful, message)
    {
      if (!successful)
        AddErrorMessage(message);
    }

    public AjaxResponseMessage(string confirmationTitle, string confirmationMessage, params AjaxResponseButton[] buttons) : this()
    {
      SetConfirmation(confirmationTitle, confirmationMessage, buttons);
    }

    public AjaxResponseMessage(Exception exception, string errorMessage = null) : this()
    {
      Message = MakeExceptionResponseForUser(exception, errorMessage);
    }

    public static async Task<AjaxResponseMessage> BuildAsync(Func<Task<bool>> action, string successMessage = null, string errorMessage = null)
    {
      try
      {
        return await BuildAsync(action(), successMessage, errorMessage).ConfigureAwait(GeneralHelper.ContinueOnCapturedContext);
      }
      catch (Exception e)
      {
        e.LogException();
        return new AjaxResponseMessage(e, errorMessage);
      }
    }

    public static async Task<AjaxResponseMessage> BuildAsync(Task<bool> action, string successMessage, string errorMessage = null, Action<AjaxResponseMessage> additional = null)
    {
      try
      {
        var response = new AjaxResponseMessage(await action.ConfigureAwait(GeneralHelper.ContinueOnCapturedContext), successMessage, errorMessage);
        if (additional != null)
          additional.Invoke(response);
        return response;
      }
      catch (Exception e)
      {
        e.LogException();
        return new AjaxResponseMessage(e, errorMessage);
      }
    }

    public static async Task<AjaxResponseMessage> BuildGreaterThanZeroAsync(Task<int> action, string successMessage, string errorMessage = null, Action<AjaxResponseMessage> additional = null)
    {
      try
      {
        var result = await action.ConfigureAwait(GeneralHelper.ContinueOnCapturedContext);
        var response = new AjaxResponseMessage(result > 0, successMessage, errorMessage);
        if (!response.Successful)
        {
          var defaultErrorMessage = $"Result is {result} when it was expected to be greater than zero so: {errorMessage}";
          if (string.IsNullOrWhiteSpace(errorMessage))
            response.AddEndUserErrorMessage(defaultErrorMessage);
          Logger.WarnWithCallerContext(() => defaultErrorMessage);
        }

        if (additional != null)
          additional.Invoke(response);
        return response;
      }
      catch (Exception e)
      {
        e.LogException();
        return new AjaxResponseMessage(e, errorMessage);
      }
    }

    public static async Task<AjaxResponseMessage> BuildAsync(Task<int> action, int expectedResult, string successMessage, string errorMessage = null, Action<AjaxResponseMessage> additional = null)
    {
      try
      {
        var result = await action.ConfigureAwait(GeneralHelper.ContinueOnCapturedContext);
        var response = new AjaxResponseMessage(result == expectedResult, successMessage, errorMessage);
        if (!response.Successful)
        {
          var defaultErrorMessage = $"Result is {result} when it was expected to be {expectedResult} so: {errorMessage}";
          if (string.IsNullOrWhiteSpace(errorMessage))
            response.AddEndUserErrorMessage(defaultErrorMessage);
          Logger.WarnWithCallerContext(() => defaultErrorMessage);
        }

        if (additional != null)
          additional.Invoke(response);
        return response;
      }
      catch (Exception e)
      {
        e.LogException();
        return new AjaxResponseMessage(e, errorMessage);
      }
    }

    public static AjaxResponseMessage Build(Func<bool> action, string errorMessage)
    {
      return Build(action, "Strings.SavingChangesSuccessfulMessage", errorMessage);
    }

    public static AjaxResponseMessage Build(Func<bool> action, string successMessage, string errorMessage)
    {
      try
      {
        return new AjaxResponseMessage(action(), successMessage, errorMessage);
      }
      catch (Exception e)
      {
        e.LogException();
        return CreateEndUserErrorMessage(errorMessage);
      }
    }

    public static AjaxResponseMessage Build(Func<Dictionary<string, string>> action, string successMessage, string errorMessage)
    {
      try
      {
        return new AjaxResponseMessage(action(), errorMessage, successMessage);
      }
      catch (Exception e)
      {
        e.LogException();
        return CreateEndUserErrorMessage(errorMessage);
      }
    }

    public static AjaxResponseMessage Build(bool success, string message, bool copyErrorToMessage = false)
    {
      var response = new AjaxResponseMessage(success);
      if (success)
        response.Message = message;
      else
      {
        if (copyErrorToMessage)
          response.Message = message;
        response.AddErrorMessage(message);
      }

      return response;
    }

    public AjaxResponseMessage(Dictionary<string, string> dataErrorInfoErrorsPerField, string errorMessage = null, string successMessage = null) : this()
    {
      if (dataErrorInfoErrorsPerField != null)
        Errors.AddRange(GetErrorsFromDataErrorInfoErrorsPerField(dataErrorInfoErrorsPerField));
      Successful = Errors.Count == 0;
      if (!Successful)
        if (Errors.Count == 1 && string.IsNullOrWhiteSpace(Errors[0].PropertyName))
          Message = Errors[0].Error;
        else
          SetMessageWithAnyErrors(errorMessage);
      if (Successful && !string.IsNullOrWhiteSpace(successMessage))
        Message = successMessage;
    }

    public static IEnumerable<ErrorReasonInfo> GetErrorsFromDataErrorInfoErrorsPerField(Dictionary<string, string> dataErrorInfoErrorsPerField)
    {
      return dataErrorInfoErrorsPerField.Select(keyValuePair => new ErrorReasonInfo(keyValuePair.Value, keyValuePair.Key));
    }

    /// <summary>
    ///   "User does not have {permission} rights for {target}"
    /// </summary>
    /// <param name="userName"></param>
    /// <param name="permission"></param>
    /// <param name="target"></param>
    /// <returns></returns>
    public static AjaxResponseMessage CreateForbiddenResponse(string userName, string permission, string target)
    {
      return CreateForbiddenResponse(string.Format("{0} does not have {1} rights for {2}", userName, permission, target));
    }

    public static AjaxResponseMessage CreateForbiddenResponse(string message)
    {
      var failMessage = CreateEndUserErrorMessage(message);
      failMessage.HttpStatusCode = System.Net.HttpStatusCode.Forbidden;
      return failMessage;
    }

    public static AjaxResponseMessage CreateEndUserErrorMessage(string message)
    {
      var failMessage = new AjaxResponseMessage(false, message);
      failMessage.AddErrorMessage(message);
      return failMessage;
    }

    public static AjaxResponseMessage CreateEndUserErrorMessage(string message, string propertyName)
    {
      var failMessage = new AjaxResponseMessage(false, message);
      failMessage.AddErrorMessage(message, propertyName);
      return failMessage;
    }

    /// <summary>Set message, added an error and set Successful = false</summary>
    /// <remarks>https://www.jetbrains.com/resharper/help/Code_Analysis__Annotations_in_Source_Code.html</remarks>
    /// <param name="endUserErrorMessage">A composite format string.</param>
    /// <param name="args">An object array that contains zero or more objects to format. </param>

    public void AddEndUserErrorMessage(string endUserErrorMessage, params object[] args)
    {
      AddEndUserErrorMessage(string.Format(endUserErrorMessage, args));
    }

    /// <summary>Set message, added an error and set Successful = false</summary>
    /// <param name="endUserErrorMessage"></param>
    public void AddEndUserErrorMessage(string endUserErrorMessage)
    {
      Message = Successful ? endUserErrorMessage : "StringHelper.JoinTwo(\"<BR>\", Message, endUserErrorMessage)";
      AddErrorMessage(endUserErrorMessage);
    }

    public void AddErrorMessage(string message)
    {
      Successful = false;
      Errors.Add(new ErrorReasonInfo(message));
    }

    public void AddErrorMessage(string message, string propertyName)
    {
      Successful = false;
      Errors.Add(new ErrorReasonInfo(message, propertyName));
    }

    public void AddInfoMessage(string message)
    {
      Message = message;
      MessageIsInfo = true;
    }

    public string GetMessageWithAnyErrors()
    {
      return CreateMessageWithAnyErrors(Message, Environment.NewLine);
    }

    /// <inheritdoc />
    public override string ToString()
    {
      return GetMessageWithAnyErrors();
    }

    public void SetMessageWithAnyErrors(string message, string separator = null)
    {
      Message = CreateMessageWithAnyErrors(message, separator);
    }

    string CreateMessageWithAnyErrors(string message, string separator)
    {
      if (separator == null)
        separator = Environment.NewLine;
      return GeneralHelper.Join(separator, message, JoinErrors(separator));
    }

    public void CreateMessageFromErrorsIfEmpty()
    {
      if (string.IsNullOrWhiteSpace(Message))
        Message = JoinErrors();
    }

    string JoinErrors(string separator = null)
    {
      if (separator == null)
        separator = Environment.NewLine;
      return GeneralHelper.Join(separator, "Errors.Select(e => GeneralHelper.Join(\":\", e.PropertyName, e.Error)");
    }

    public static AjaxResponseMessage CreateRedirectMessage(string redirectUrl)
    {
      var response = new AjaxResponseMessage {result = "Redirect", url = redirectUrl};
      return response;
    }

    /// <summary>
    ///   Makes the exception response for user. Using UserMessage from exception, if present else supplied user message.
    /// </summary>
    /// <param name="exception">The exception.</param>
    /// <param name="userMessage">The user message.</param>
    public string MakeExceptionResponseForUser(Exception exception, string userMessage = null)
    {
      userMessage = "GeneralHelper.CoalesceToString(exception.GetUserMessage(), userMessage, exception.Message)";
      AddErrorMessage(userMessage);
      AddData("Exception", exception.Message);
      return userMessage;
    }

    public void AddData(string propertyName, string propertyValue = null)
    {
      Data.Add(new AjaxResponseData(propertyName, propertyValue));
    }

    public string GetData(string propertyName)
    {
      var ajaxResponseData = Data.FirstOrDefault(d => d.PropertyName == propertyName);
      return ajaxResponseData?.PropertyValue;
    }

    public void Append(AjaxResponseMessage ajaxResponseMessage)
    {
      Successful = ajaxResponseMessage.Successful;
      Message = ajaxResponseMessage.Message;
      Title = ajaxResponseMessage.Title;
      ConfirmTitle = ajaxResponseMessage.ConfirmTitle;
      UpdatedPageModel = ajaxResponseMessage.UpdatedPageModel;
      result = ajaxResponseMessage.result;
      url = ajaxResponseMessage.url;
      Errors.AddRangeDistinct(ajaxResponseMessage.Errors);
      Data.AddRangeDistinct(ajaxResponseMessage.Data);
      Confirmations.AddRangeDistinct(ajaxResponseMessage.Confirmations);
    }

    public static Task BuildAsync(Task<int> task, string message)
    {
      throw new NotImplementedException();
    }
  }

  public class AjaxResponseData
  {
    public AjaxResponseData(string name, string value)
    {
      PropertyName = name;
      PropertyValue = value;
    }

    public string PropertyName { get; set; }

    public string PropertyValue { get; set; }
  }

  public class AjaxResponseButton
  {
    public const string DefaultConfirmParam = "confirm";
    public string ButtonText { get; }
    public string Url { get; internal set; }
    public string TrueParam { get; }

    public AjaxResponseButton(string buttonText, string url = null, string trueParam = null)
    {
      ButtonText = buttonText;
      Url = url;
      TrueParam = trueParam;
    }
  }

  public class AjaxFormResponseButton : AjaxResponseButton
  {
    public AjaxFormResponseButton(string buttonText, AjaxFormResponse data) : base(buttonText)
    {
      FormResponse = data;
    }

    //public AjaxFormResponseButton(string buttonText, string data) : this(buttonText, new AjaxFormResponse {Action = data})
    //{
    //}

    public AjaxFormResponse FormResponse { get; }

    public static readonly AjaxFormResponseButton AjaxFormCancelButton = new AjaxFormResponseButton("Labels.buttonLabel_Cancel", new AjaxFormResponse
    {
      CancelChanges = true
    });
  }

  public class AjaxFormResponse
  {
    public object UpdateFormFields { get; set; }
    public string Action { get; set; }
    public bool CancelChanges { get; set; }
  }
}